{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":0},{"_id":"source/images/ios-wkwebview-cookie/safari-has-cookie.png","path":"images/ios-wkwebview-cookie/safari-has-cookie.png","modified":1,"renderable":0},{"_id":"source/images/ios-wkwebview-cookie/safari-first-cookie.png","path":"images/ios-wkwebview-cookie/safari-first-cookie.png","modified":1,"renderable":0},{"_id":"source/images/ios-wkwebview-cookie/safari-second-cookie.png","path":"images/ios-wkwebview-cookie/safari-second-cookie.png","modified":1,"renderable":0},{"_id":"themes/anatole/source/css/blog_basic.css","path":"css/blog_basic.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/anatole/source/images/favicon.png","path":"images/favicon.png","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery.appear.js","path":"js/jquery.appear.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","path":"js/jquery-migrate-1.2.1.min.js","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/images/ios-wkwebview-cookie/taobao safari2.png","path":"images/ios-wkwebview-cookie/taobao safari2.png","modified":1,"renderable":0},{"_id":"themes/anatole/source/js/jquery.js","path":"js/jquery.js","modified":1,"renderable":1},{"_id":"source/images/ios-wkwebview-cookie/taobao google2.png","path":"images/ios-wkwebview-cookie/taobao google2.png","modified":1,"renderable":0},{"_id":"source/images/ios-wkwebview-cookie/taobao google1.png","path":"images/ios-wkwebview-cookie/taobao google1.png","modified":1,"renderable":0},{"_id":"source/images/ios-wkwebview-cookie/taobao safari1.png","path":"images/ios-wkwebview-cookie/taobao safari1.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4e04776fddcb1e19ba189ad6db6eeb335fe303ca","modified":1525784797164},{"_id":"source/.DS_Store","hash":"d15be96c3422ef680a6ac0d938c7589848ef88fc","modified":1556866819568},{"_id":"themes/anatole/.DS_Store","hash":"3d0fae348f12e3e5af82deef889142d004189982","modified":1556866056426},{"_id":"themes/anatole/_config.sample.yml","hash":"c6bce49d93a37e9ed5f0c4b104decc0bd7832e04","modified":1525829994886},{"_id":"themes/anatole/_config.yml","hash":"5ebac8902e1093d15c8204767fe636c278aa3636","modified":1526031470700},{"_id":"source/about/index.md","hash":"f27a6173a91f0a69b9725321dc41daeab57032bd","modified":1525865035133},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1556865879462},{"_id":"source/_posts/Raspberry-Setting.markdown","hash":"b61fc386671eb3cf868b247ba0ecb8bb07017a5e","modified":1525848415404},{"_id":"source/_posts/angularjs-intro.markdown","hash":"df0a43c8038addac0f4a55bf28ba2fab243f5829","modified":1526032163554},{"_id":"source/_posts/ajax-pushstate.markdown","hash":"2a0cda27a49c85416fd022647e179e3df888a1c9","modified":1525855447624},{"_id":"source/_posts/VueRouter-VueResource-webpack.markdown","hash":"7228f98a7a03c1cf782482c02edfaf9ecf6b33a4","modified":1525854694227},{"_id":"source/_posts/clear-float.markdown","hash":"71bd9ce5f690fe1b5ff0ed532f9e7a971ad58d35","modified":1525852001271},{"_id":"source/_posts/create-efi-msr.markdown","hash":"16046928c607fd20df2d7f2e2f19406e541d442e","modified":1525854039401},{"_id":"source/_posts/firefox-event.markdown","hash":"8388962d605bc92b7e2a32fee21f9eee1da7324b","modified":1525849243457},{"_id":"source/_posts/express-mongoose-test.markdown","hash":"1688b01a88da4cc5e86328a451be2d7f482ce858","modified":1525853543672},{"_id":"source/_posts/github-notepad.markdown","hash":"40c7da22ed69f6b43a76cd8e0b49ab8119b5daab","modified":1525854538122},{"_id":"source/_posts/git-server-create.markdown","hash":"97a8cdc5869fdd0541acdf77f09849f273f253a8","modified":1525859472828},{"_id":"source/_posts/http-detailed.markdown","hash":"c5c57225bc098b3751d5b01d1238cbcca8b65df7","modified":1525857537207},{"_id":"source/_posts/ios-wkwebview-cookie.markdown","hash":"e5d49eb670cb4665ff3c2d353162c476c29f39da","modified":1556866630794},{"_id":"source/_posts/javascript-event.markdown","hash":"129340d6f0caa325f78021603e743dfac338de07","modified":1525855346983},{"_id":"source/_posts/javascript-module.markdown","hash":"d56b16a0e996c2392ab38158139e50eb5aad43bf","modified":1525853934598},{"_id":"source/_posts/javascript-mvc-simple-relize.markdown","hash":"a938233ec01aaba98ed2e54896e4675d06e883da","modified":1525857263963},{"_id":"source/_posts/javascript-vue-data-binding.markdown","hash":"7b9df903ad411a59375c5db36ce7f3a16dd33b2d","modified":1525921833633},{"_id":"source/_posts/javascript-vue-simple-compile.markdown","hash":"6e2382f4b8c6159103d26376481b8adef4e6d6ca","modified":1525857966536},{"_id":"source/_posts/json-data-formate.markdown","hash":"a5e27577361c48699c8fd365c55e264804be2055","modified":1525855171591},{"_id":"source/_posts/machine-optimization.markdown","hash":"183c06a9e282647d35029a91ddd1e4400319ac6b","modified":1530107452351},{"_id":"source/_posts/mongoose-population.markdown","hash":"315706cae5a1b4190c8987449a177afb618d8f1d","modified":1525853492569},{"_id":"source/_posts/nodejs-ubuntu-server.markdown","hash":"9b23c24e358f047ee2b4dde02ded5f9dd08e6d9e","modified":1525858494343},{"_id":"source/_posts/mongodb-js-zz.markdown","hash":"d978146537102f78498df6248684b054d613f602","modified":1525854115950},{"_id":"source/_posts/python-mysql.markdown","hash":"0085d71211fa3e151ff8837f52609220b860db8e","modified":1525858954678},{"_id":"source/_posts/npm-customize-and-httpservice.markdown","hash":"8ee44ec774983222e3c334ce32fef95de847ac60","modified":1526197571860},{"_id":"source/_posts/python-socket-img.markdown","hash":"b02c06ad339b5314129d30b385416ca83dfb78f0","modified":1525858852085},{"_id":"source/_posts/raspberry-opencv-open-camera.markdown","hash":"e8ce20270af8478c51f13546bb67cd79f9f64d95","modified":1525921865999},{"_id":"source/_posts/raspberry-startup-boot.markdown","hash":"71610832d3f5dbf26c91c5739ba411a0907eaa4e","modified":1525921889614},{"_id":"source/_posts/raspberry-date-sync.markdown","hash":"19805f113c722835bb37131bf119c361c38dd290","modified":1525858989805},{"_id":"source/_posts/removeChild-default.markdown","hash":"e572d0f4f146ff45b9dc46d3a876c0a72e55474d","modified":1525853131478},{"_id":"source/_posts/scroll-monitor.markdown","hash":"b09266d7ac5ca95292da21bdcc1917724e8d8838","modified":1525852571231},{"_id":"source/_posts/sublime-text-C-Setting.markdown","hash":"4177f16cb8a4ceb33b527a6bc28e7b858dea73ea","modified":1525853143574},{"_id":"source/_posts/searching-and-ranking.md","hash":"79062dfb59022e71be6f9f9ed81aa443fed309ef","modified":1528970540205},{"_id":"source/_posts/ubuntu-wubi-install.markdown","hash":"de6336ab478782b787852d62576d1878ea388f98","modified":1525848768547},{"_id":"source/_posts/underscore-read-01-type-judgment.markdown","hash":"1eb842090fb921c9aa2b335f31ad405ec59aa104","modified":1525855634379},{"_id":"source/_posts/underscore-read-02-judgment-equal.markdown","hash":"121440884a8d6db5e98ca1f9dba72f0812e0c8cb","modified":1525855831135},{"_id":"source/_posts/underscore-read-03-clouser-createAssigner.markdown","hash":"6d17647d92b1a01770dec22ee02ab46bbd4824cb","modified":1525855996193},{"_id":"source/_posts/underscore-read-05-array-search.markdown","hash":"2b3850c7fd830ee92c4d2588ba067a09e9d36f2f","modified":1525856368948},{"_id":"source/_posts/underscore-read-04-optimizeCb-cb-sortedIndex.markdown","hash":"941cf79d3e86250a6bc8f03a2533b350a4895004","modified":1525856189027},{"_id":"source/_posts/underscore-read-06-flatten-unique.markdown","hash":"8acd34a696012272e5ff9f57e1d937221b8e8c0b","modified":1525856473736},{"_id":"source/_posts/underscore-read-07-Fisher-Yates-shuffle.markdown","hash":"8f5f7f83d36125f32152490dcd7b97d302d64488","modified":1525856554003},{"_id":"source/_posts/underscore-read-08-bind-polyfill-and-prototypal-inheritance.markdown","hash":"3ce762066179a43e8727fcf27e882a0c728e00d2","modified":1525856701512},{"_id":"source/_posts/underscore-read-09-throttle-debounce.markdown","hash":"73a02672dac0f2598b9320f6ae4efef86521526c","modified":1525856965943},{"_id":"source/_posts/underscore-read-10-memoize-tailCall.markdown","hash":"3660f5430b7103a7591aee13543f99cf642b1701","modified":1525857070779},{"_id":"source/_posts/underscore-read-11-oop.markdown","hash":"709ec327a8b86f7ccd7e035264f9999587c7f21a","modified":1525857178907},{"_id":"source/_posts/vue-01-find-input.markdown","hash":"99a0cb1ce8ece2cfba354e600fcc7e62722b478f","modified":1525921917206},{"_id":"source/_posts/vue-custom-prop.markdown","hash":"8b75541182cff318a4c1ac83a0474a69f0f3dbfe","modified":1525855302524},{"_id":"source/_posts/vue-cli-module.markdown","hash":"8dbfd4c94c6725ed4df421481c30d91b349a156a","modified":1525855113175},{"_id":"source/_posts/webpack-module-karma-test.markdown","hash":"0c2de9454a56aa1b7f141143826cc14f4ca309e7","modified":1525858285440},{"_id":"source/_posts/wechat-custom-qa.md","hash":"6c4d47033a4c0b5d31b1286e5d1bec27985e1544","modified":1556866006847},{"_id":"source/_posts/windows-uac-white.markdown","hash":"7377715bec8daee16c00261ca50bf654d0e8db93","modified":1525848832979},{"_id":"source/_posts/wordpress-basic.markdown","hash":"91fab6ae86614da149c4f6ee95414465be842a18","modified":1525853622016},{"_id":"source/_posts/wordpress-page.markdown","hash":"096f4a422fde562da71a50bdcbafe8bfe1681c28","modified":1525852399612},{"_id":"source/images/.DS_Store","hash":"3fa7b4c2a7c41a4d4df40c99175045fc87c0627c","modified":1556866220345},{"_id":"source/_posts/wordpress-sidebar.markdown","hash":"76f41f44de328d111d6feeb62aa5eda36cc95128","modified":1525852515868},{"_id":"source/images/favicon.png","hash":"db3cb89160925ff44e2e3edd045cb54bd6d46883","modified":1556866753816},{"_id":"themes/anatole/languages/pt-BR.yml","hash":"ac5a0003d7793aade51f70643b2e2a631b6a65c3","modified":1525829994886},{"_id":"themes/anatole/languages/zh-cn.yml","hash":"dab1823e036f4adb3b7ae9efe95a37a15e47bec2","modified":1525829994886},{"_id":"themes/anatole/layout/archive.pug","hash":"1a161404966000b25a84762f08da3ca60af146bc","modified":1525829994887},{"_id":"themes/anatole/layout/category.pug","hash":"ae894ef4baee4a0c7c8e66641166061e789f1fa7","modified":1525829994887},{"_id":"themes/anatole/layout/index.pug","hash":"53da3cfd498951148acb33de1574df80ae282dc5","modified":1525829994887},{"_id":"themes/anatole/layout/mixins.pug","hash":"107bfd2fe10de0d8b110c13bb1168af79e62a37c","modified":1525829994887},{"_id":"themes/anatole/layout/page.pug","hash":"15142c94e5c2247aba8efb64cffd695b3f133670","modified":1525829994888},{"_id":"themes/anatole/layout/post.pug","hash":"012f8e272cf4713a0f08e3b702dab08ef6593b31","modified":1525829994889},{"_id":"themes/anatole/layout/tag.pug","hash":"7017a8bae4f4a412dafb556772bdcf2cfddeb79f","modified":1525829994889},{"_id":"themes/anatole/source/.DS_Store","hash":"f750849e7ca6c72ca60fa69d4fb429e8b649ced3","modified":1556866056428},{"_id":"source/images/ios-wkwebview-cookie/.DS_Store","hash":"f74b99a58904eadeea0ba4d63ca5a5e991e4c168","modified":1550061266081},{"_id":"source/images/ios-wkwebview-cookie/safari-has-cookie.png","hash":"3fcb9b3c9b5e5558d5035becf7b4f0d92a9d45b7","modified":1556866192071},{"_id":"source/images/ios-wkwebview-cookie/safari-first-cookie.png","hash":"f059591b5a0fc0e2e77b246edb691fc698b395fe","modified":1556866169072},{"_id":"source/images/ios-wkwebview-cookie/safari-second-cookie.png","hash":"363c20bf0b1919418bb92b359eee4b6d879ef2a2","modified":1549006065000},{"_id":"themes/anatole/layout/partial/comments.pug","hash":"fad5bbe7c2a134c892fcb1c731d979463145a49b","modified":1525829994888},{"_id":"themes/anatole/layout/partial/footer.pug","hash":"772f03a2dd9fa4fed422c4eb4d5d1ace84c65580","modified":1525829994888},{"_id":"themes/anatole/layout/partial/head.pug","hash":"8978b11633e4ae15d298941715f794a07fe3e276","modified":1527217890010},{"_id":"themes/anatole/layout/partial/layout.pug","hash":"174050fa9ee919f5bcb2c5426224ec1968db672c","modified":1525829994888},{"_id":"themes/anatole/layout/partial/nav.pug","hash":"d6d16cc19e2dd8f7f7da5362990140348d6a633d","modified":1525864640596},{"_id":"themes/anatole/layout/partial/sidebar.pug","hash":"c9418906354578d97cde77a99fe419ee7712f6c0","modified":1525866098237},{"_id":"themes/anatole/source/css/blog_basic.css","hash":"a5c9e299fbb743fc1276f1f48f7c5685743d0e63","modified":1530107487310},{"_id":"themes/anatole/source/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1525829994891},{"_id":"themes/anatole/source/css/style.css","hash":"24e7815f854374164faa35285cb353314f456b30","modified":1525867178003},{"_id":"themes/anatole/source/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1525829994891},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1525829994892},{"_id":"themes/anatole/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527217762930},{"_id":"themes/anatole/source/images/favicon.png","hash":"db3cb89160925ff44e2e3edd045cb54bd6d46883","modified":1525863882000},{"_id":"themes/anatole/source/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1525829994898},{"_id":"themes/anatole/source/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1525829994897},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1525829994896},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1525829994895},{"_id":"themes/anatole/source/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1525829994894},{"_id":"source/images/ios-wkwebview-cookie/taobao safari2.png","hash":"9d6a710a20af5861a50f3ca9de613dec17291ca7","modified":1550059232117},{"_id":"themes/anatole/source/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1525829994899},{"_id":"source/images/ios-wkwebview-cookie/taobao google2.png","hash":"fb5ce8da35e3793ff2a4a064862b1d9392d193ba","modified":1550059122286},{"_id":"source/images/ios-wkwebview-cookie/taobao google1.png","hash":"6257e7d6a8973d68338f1839b6424b3c5456a541","modified":1550059087367},{"_id":"source/images/ios-wkwebview-cookie/taobao safari1.png","hash":"aed1c794130df2179821738cbfc11282a9ae51a1","modified":1550059204339},{"_id":"public/2019/02/13/ios-wkwebview-cookie/index.html","hash":"91f89ef34df20c52fc6ede987d084679d3e321cd","modified":1556867014263},{"_id":"public/about/index.html","hash":"d788cae9ce82c2445a021c553ccf9511bba227b4","modified":1556867014263},{"_id":"public/2018/06/27/machine-optimization/index.html","hash":"be758e7e28c03ac86a44478528d2f8a6068f39d3","modified":1556867014264},{"_id":"public/2018/02/02/git-server-create/index.html","hash":"b6422e26fe3148c4047c6b5a985cd2a385a9865f","modified":1556867014264},{"_id":"public/2017/12/09/raspberry-startup-boot/index.html","hash":"df372c3d397173801f0b9624a9dc9e73073a8cf9","modified":1556867014264},{"_id":"public/2017/12/07/raspberry-date-sync/index.html","hash":"51e427b5a31bbc015c4119fd2d56e4cd397b04c9","modified":1556867014264},{"_id":"public/2017/12/05/python-mysql/index.html","hash":"cf730426389b24705dd2967e6622ba9b9c13be04","modified":1556867014264},{"_id":"public/2017/11/14/raspberry-opencv-open-camera/index.html","hash":"57aaa9e300c97b948d3a294cf9b54ced59b7b65f","modified":1556867014264},{"_id":"public/2017/08/27/nodejs-ubuntu-server/index.html","hash":"cdac16662b59ca6aaf535ff060552206e92a0476","modified":1556867014264},{"_id":"public/2017/08/06/webpack-module-karma-test/index.html","hash":"9842c254b5603a05a3f7755efb7d832314e1abec","modified":1556867014264},{"_id":"public/2017/07/23/http-detailed/index.html","hash":"7f2c74882e026722e3b82e0f3f84d18ffe11d396","modified":1556867014264},{"_id":"public/2017/06/15/underscore-read-11-oop/index.html","hash":"5f20eb202f0d9a1c6c59eab73c9dfc194aff3cad","modified":1556867014264},{"_id":"public/2017/06/15/underscore-read-10-memoize-tailCall/index.html","hash":"38b4a015e41e21495a02fd375380483fa6ba24ad","modified":1556867014264},{"_id":"public/2017/06/11/underscore-read-07-Fisher-Yates-shuffle/index.html","hash":"2a3f6e21f9c698765f1ac8eb0cfb82dc0a27d638","modified":1556867014264},{"_id":"public/2017/06/10/underscore-read-05-array-search/index.html","hash":"717c3bab93f7f890ebf95b2bae242b33064aecee","modified":1556867014264},{"_id":"public/2017/05/24/ajax-pushstate/index.html","hash":"6640ca8a481993336fa060731df7753e9ca0e0ae","modified":1556867014264},{"_id":"public/2017/05/10/javascript-event/index.html","hash":"13003d33d28c7513898d1aa183ba0fbfda1b2751","modified":1556867014265},{"_id":"public/2017/04/27/vue-custom-prop/index.html","hash":"56741774febdae28ed2aee7bfa6e710d9fe0e07e","modified":1556867014265},{"_id":"public/2017/04/27/json-data-formate/index.html","hash":"1a6290a95d4ade1bf487d72da8a144477f2b48e4","modified":1556867014265},{"_id":"public/2017/03/24/github-notepad/index.html","hash":"1bc07b5fd1e9114e05e87ca68a8715ce02b704ad","modified":1556867014265},{"_id":"public/2017/03/20/mongodb-js-zz/index.html","hash":"516b2ac28a7ccc04085c3ba0a7c7324c22c325b5","modified":1556867014265},{"_id":"public/2017/03/19/create-efi-msr/index.html","hash":"b1a93559d46d4790a6e1f47dbed094719264f81e","modified":1556867014265},{"_id":"public/2017/03/01/mongoose-population/index.html","hash":"6de00381b2e3c14bd60f7fe2b6332e2b86867303","modified":1556867014265},{"_id":"public/2016/12/19/removeChild-default/index.html","hash":"5e945d25e51f562efed9d2e3e4b41226becc3900","modified":1556867014265},{"_id":"public/2016/12/05/scroll-monitor/index.html","hash":"cea878c0e545f15db920264e2dd18d7cb6341b44","modified":1556867014265},{"_id":"public/2016/08/24/wordpress-basic/index.html","hash":"e54f86a046eafb943e38b8fa7ad2b7e4a5bbfea2","modified":1556867014265},{"_id":"public/2016/08/24/wordpress-sidebar/index.html","hash":"1b1eaaa24e1799adabe8d8f0479021ef3d6956f8","modified":1556867014265},{"_id":"public/2016/08/24/clear-float/index.html","hash":"6ad6db5f2dbb136ff0119fe70051c9ac1c65e415","modified":1556867014265},{"_id":"public/2016/08/23/firefox-event/index.html","hash":"21eb6d29c4fb12c3b926007919d3ea5bf4d007d0","modified":1556867014265},{"_id":"public/2016/08/18/windows-uac-white/index.html","hash":"40625b8079751dd21ba0135f9501292969a1c4bc","modified":1556867014265},{"_id":"public/2016/08/18/ubuntu-wubi-install/index.html","hash":"93d32172e37cb6450852e1bdc9ff5da8e6f8898b","modified":1556867014265},{"_id":"public/2016/08/18/sublime-text-C-Setting/index.html","hash":"f482fcca7104afad36037eb7edc9fbe7e4d26eca","modified":1556867014265},{"_id":"public/2016/08/18/Raspberry-Setting/index.html","hash":"84647421936045b52c62a7be2e21c620b146b071","modified":1556867014265},{"_id":"public/index.html","hash":"9e7236175608ee7ad376137e94e9acbf5356a0a9","modified":1556867014265},{"_id":"public/page/2/index.html","hash":"c2b729f3068997838f968581a2b209f3eb22413c","modified":1556867014265},{"_id":"public/page/3/index.html","hash":"1f943ac3aa88d515b25b182a2b5998f3c621171d","modified":1556867014265},{"_id":"public/page/4/index.html","hash":"5510569ee8810462ef8f15f4688b7275f5ab2283","modified":1556867014266},{"_id":"public/page/5/index.html","hash":"199af4c0389adb41273fbf8998e7004b09162368","modified":1556867014266},{"_id":"public/page/6/index.html","hash":"ee3f3311fc396b8d62c688a6ac69e4b0f7499ba0","modified":1556867014266},{"_id":"public/tags/JavaScript/index.html","hash":"57404fd10d6b8297da0cee5cd32ebd0788350a2b","modified":1556867014266},{"_id":"public/tags/JavaScript/page/2/index.html","hash":"6a9bfcc1ff33493b7a1e6097fd600f447394576e","modified":1556867014266},{"_id":"public/tags/JavaScript/page/3/index.html","hash":"158b6663bce99ea642f302bafd48b5eda1e0dd31","modified":1556867014266},{"_id":"public/tags/AngularJS/index.html","hash":"779c82842a39fe93e5938a754de85974aab8ef31","modified":1556867014266},{"_id":"public/tags/Vue/index.html","hash":"127ac6fceb934b24be544530f04886735f53f1fd","modified":1556867014266},{"_id":"public/tags/WebPack/index.html","hash":"3641b2d7ceea36e54fec045efbdd85c9c85ccb7c","modified":1556867014266},{"_id":"public/tags/CSS/index.html","hash":"373fc50e2ab4ff894656d56fda54e0487bed24c7","modified":1556867014266},{"_id":"public/tags/System/index.html","hash":"7efae78d93bd3ad60a02da3bb9058888a24e0588","modified":1556867014266},{"_id":"public/tags/Raspberry/index.html","hash":"49ad7f90150b4c6a639cb8f70b19c88ad837c010","modified":1556867014266},{"_id":"public/tags/Git/index.html","hash":"821c6762ec407d6d1f7724d2b729da02dca1c7d5","modified":1556867014266},{"_id":"public/tags/NodeJS/index.html","hash":"ccd3a35b12d10c53664ed892ee6085014bedc767","modified":1556867014266},{"_id":"public/tags/MongoDB/index.html","hash":"aaaabd243eb3c5f2240960f8bf767dd009a6dc5a","modified":1556867014266},{"_id":"public/tags/HTTP/index.html","hash":"35ce9d4c270925eb920af8d61bcf34f270dd602a","modified":1556867014267},{"_id":"public/tags/iOS/index.html","hash":"700dcfa05218da093e22f510770503c3574234da","modified":1556867014267},{"_id":"public/tags/WKWebView/index.html","hash":"9aa0c47565ea83b7731348589804e5428b1357c7","modified":1556867014267},{"_id":"public/tags/Python/index.html","hash":"290105c868ea8a52af738e8d0e4e97eba1a395b6","modified":1556867014267},{"_id":"public/tags/机器学习/index.html","hash":"b9a29812ec2e638d03c7610c9edc6d96284238fd","modified":1556867014267},{"_id":"public/tags/Linux/index.html","hash":"9c25b8dee581780a0561c75fa5aafbfca6570b60","modified":1556867014267},{"_id":"public/tags/Mysql/index.html","hash":"bfe347d11a2f9bae1cb5990948e643e2afad11a4","modified":1556867014267},{"_id":"public/tags/npm/index.html","hash":"9b6c620b039cd9e011c3f30649a5512c6d66907f","modified":1556867014267},{"_id":"public/tags/OpenCV/index.html","hash":"c2463aed7f4a3b88398e4abe2d233bb51afe11ed","modified":1556867014267},{"_id":"public/tags/Tool/index.html","hash":"eb0b6a6601d36ca9e200c920f858451859732423","modified":1556867014267},{"_id":"public/tags/UnderScore/index.html","hash":"edb1cc6fc1337fa4b87086f6b303ca0919667b0a","modified":1556867014267},{"_id":"public/tags/UnderScore/page/2/index.html","hash":"8eadce14ae7ae6db5d4924340b962bca8d0737ec","modified":1556867014267},{"_id":"public/tags/WordPress/index.html","hash":"f870001fb03ee1d18b9590bc17a02f65d943372e","modified":1556867014267},{"_id":"public/2018/06/10/searching-and-ranking/index.html","hash":"b755289e028e488bd3e366879a4b6a45d43475c9","modified":1556867014267},{"_id":"public/2018/05/13/npm-customize-and-httpservice/index.html","hash":"a3da4e4d975913b094daa69bcf0fe9316b8254e9","modified":1556867014267},{"_id":"public/2018/05/11/angularjs-intro/index.html","hash":"a45f48ef7224f12b96b0b4a374dd9a0817a32b81","modified":1556867014267},{"_id":"public/2017/12/24/vue-01-find-input/index.html","hash":"2044ab69cc2a3aa81cad4926a4d1a21c6dff9df1","modified":1556867014267},{"_id":"public/2017/12/04/python-socket-img/index.html","hash":"4fc8659f6b0ea4636356c587bac9c287d23176cc","modified":1556867014267},{"_id":"public/2017/08/02/javascript-vue-data-binding/index.html","hash":"6309f695a27dc1c6f1b13f01e573863a4d6e0da5","modified":1556867014267},{"_id":"public/2017/08/02/javascript-vue-simple-compile/index.html","hash":"158500f60f36f7b716c1a2a33ea7fccb1efbfb3e","modified":1556867014267},{"_id":"public/2017/06/21/javascript-mvc-simple-relize/index.html","hash":"fbe58ffdcce1f71bc4fb8ec215774435b3bc6444","modified":1556867014268},{"_id":"public/2017/06/14/underscore-read-09-throttle-debounce/index.html","hash":"023601f65725eabffe6b013bdc21bd687c140a8e","modified":1556867014268},{"_id":"public/2017/06/11/underscore-read-08-bind-polyfill-and-prototypal-inheritance/index.html","hash":"5db5d0ee4f2883fb870d51f42fc4a8553313b50c","modified":1556867014268},{"_id":"public/2017/06/10/underscore-read-06-flatten-unique/index.html","hash":"243fc995e35c0e2e354364c2cca829f5406d4fc5","modified":1556867014268},{"_id":"public/2017/06/09/underscore-read-04-optimizeCb-cb-sortedIndex/index.html","hash":"bb1a77edb344521cc63fba83e83c88e19be60f94","modified":1556867014268},{"_id":"public/2017/06/07/underscore-read-03-clouser-createAssigner/index.html","hash":"b2e4c4c7a90a96f893e3bb40c0fe181e953c4a70","modified":1556867014268},{"_id":"public/2017/06/07/underscore-read-02-judgment-equal/index.html","hash":"bd8ee153aabf247a56194875000b7a74aa869e96","modified":1556867014268},{"_id":"public/2017/06/06/underscore-read-01-type-judgment/index.html","hash":"4092b035d71a619ff92c8eb3ec74e0f12720516e","modified":1556867014268},{"_id":"public/2017/04/11/vue-cli-module/index.html","hash":"668aa26ca87a512b3a1099d73c92871c15a47933","modified":1556867014268},{"_id":"public/2017/04/09/VueRouter-VueResource-webpack/index.html","hash":"36265f5bcd41affb38fed35119f6c785c55fe939","modified":1556867014268},{"_id":"public/2017/03/07/javascript-module/index.html","hash":"f27de82fe46e590cb64ce2eb792991810acc6179","modified":1556867014268},{"_id":"public/2017/02/28/express-mongoose-test/index.html","hash":"7595b307bc77dd8b2ae9c590a4f7c94cc866c5d2","modified":1556867014268},{"_id":"public/2016/08/24/wordpress-page/index.html","hash":"4f45970e300440bb9b9c01f0c53ac72b7661c319","modified":1556867014268},{"_id":"public/archives/index.html","hash":"f5f0bdb9fdadbb31dac3ca16ed3f05244014c524","modified":1556867014268},{"_id":"public/CNAME","hash":"4e04776fddcb1e19ba189ad6db6eeb335fe303ca","modified":1556867014282},{"_id":"public/images/ios-wkwebview-cookie/safari-first-cookie.png","hash":"f059591b5a0fc0e2e77b246edb691fc698b395fe","modified":1556867014282},{"_id":"public/images/ios-wkwebview-cookie/safari-has-cookie.png","hash":"3fcb9b3c9b5e5558d5035becf7b4f0d92a9d45b7","modified":1556867014282},{"_id":"public/images/ios-wkwebview-cookie/safari-second-cookie.png","hash":"363c20bf0b1919418bb92b359eee4b6d879ef2a2","modified":1556867014282},{"_id":"public/css/style.scss","hash":"175c9237798207f705c62777b5f51509adec6d0a","modified":1556867014282},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1556867014282},{"_id":"public/images/favicon.png","hash":"db3cb89160925ff44e2e3edd045cb54bd6d46883","modified":1556867014287},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1556867014288},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1556867014288},{"_id":"public/js/jquery.appear.js","hash":"1f8067d7bd4c0bde30785e8016100f239e14394f","modified":1556867014297},{"_id":"public/js/jquery-migrate-1.2.1.min.js","hash":"743052320809514fb788fe1d3df37fc87ce90452","modified":1556867014298},{"_id":"public/css/blog_basic.css","hash":"a5c9e299fbb743fc1276f1f48f7c5685743d0e63","modified":1556867014303},{"_id":"public/css/style.css","hash":"24e7815f854374164faa35285cb353314f456b30","modified":1556867014303},{"_id":"public/css/font-awesome.min.css","hash":"95d0b0c4d11105c81be1857b744076a1d2bed918","modified":1556867014308},{"_id":"public/images/ios-wkwebview-cookie/taobao safari2.png","hash":"9d6a710a20af5861a50f3ca9de613dec17291ca7","modified":1556867014308},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1556867014309},{"_id":"public/images/ios-wkwebview-cookie/taobao google2.png","hash":"fb5ce8da35e3793ff2a4a064862b1d9392d193ba","modified":1556867014313},{"_id":"public/images/ios-wkwebview-cookie/taobao google1.png","hash":"6257e7d6a8973d68338f1839b6424b3c5456a541","modified":1556867014315},{"_id":"public/images/ios-wkwebview-cookie/taobao safari1.png","hash":"aed1c794130df2179821738cbfc11282a9ae51a1","modified":1556867014316},{"_id":"public/js/jquery.js","hash":"bfc05b695dfa4f23e11d04b84993585da7a764bf","modified":1556867014320}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2018-05-09T04:17:12.000Z","_content":"\n#### INFO\n- 陈曦 / Virgil\n- from: 福建 / to: 深圳\n- 96 / 狮子座\n\n#### TECH\n\n- HTML / CSS / JavaScript\n- Vue / Angular\n- Python\n- NodeJS\n\n### JOB\n\n- 微众银行 / 前端开发工程师","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-05-09 12:17:12\n---\n\n#### INFO\n- 陈曦 / Virgil\n- from: 福建 / to: 深圳\n- 96 / 狮子座\n\n#### TECH\n\n- HTML / CSS / JavaScript\n- Vue / Angular\n- Python\n- NodeJS\n\n### JOB\n\n- 微众银行 / 前端开发工程师","updated":"2018-05-09T11:23:55.133Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjv7qf3zu00002mhsasd1rtuu","content":"<h4 id=\"INFO\"><a href=\"#INFO\" class=\"headerlink\" title=\"INFO\"></a>INFO</h4><ul>\n<li>陈曦 / Virgil</li>\n<li>from: 福建 / to: 深圳</li>\n<li>96 / 狮子座</li>\n</ul>\n<h4 id=\"TECH\"><a href=\"#TECH\" class=\"headerlink\" title=\"TECH\"></a>TECH</h4><ul>\n<li>HTML / CSS / JavaScript</li>\n<li>Vue / Angular</li>\n<li>Python</li>\n<li>NodeJS</li>\n</ul>\n<h3 id=\"JOB\"><a href=\"#JOB\" class=\"headerlink\" title=\"JOB\"></a>JOB</h3><ul>\n<li>微众银行 / 前端开发工程师</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"INFO\"><a href=\"#INFO\" class=\"headerlink\" title=\"INFO\"></a>INFO</h4><ul>\n<li>陈曦 / Virgil</li>\n<li>from: 福建 / to: 深圳</li>\n<li>96 / 狮子座</li>\n</ul>\n<h4 id=\"TECH\"><a href=\"#TECH\" class=\"headerlink\" title=\"TECH\"></a>TECH</h4><ul>\n<li>HTML / CSS / JavaScript</li>\n<li>Vue / Angular</li>\n<li>Python</li>\n<li>NodeJS</li>\n</ul>\n<h3 id=\"JOB\"><a href=\"#JOB\" class=\"headerlink\" title=\"JOB\"></a>JOB</h3><ul>\n<li>微众银行 / 前端开发工程师</li>\n</ul>\n"}],"Post":[{"layout":"post","title":"Ajax + pushState 无刷新加载内容","date":"2017-05-24T02:24:00.000Z","_content":"\n```js\nvar loadAjax = function(url, pop) {\n\tvar xmlhttp;\n\tif(window.XMLHttpRequest) {\n\t\txmlhttp = new XMLHttpRequest();\n\t}else {\n\t\txmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t}\n\txmlhttp.onreadystatechange = function() {\n\t\tif(xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n\t\t\tvar text = xmlhttp.responseText;\n\t\t\tconsole.log(text)\n\t\t\tif(!pop) { // 如果是后退或前进刷新,则不需要手动修改url\n      \t\t\t// 改变 url\n      \t\t\twindow.history.pushState(null, null, url);\n      \t\t}\n\t\t}\n\t}\n\txmlhttp.open(\"GET\",url,true);\n\txmlhttp.send();\n};\nwindow.onload = function() {\n\t// 事件委托,绑定所有 a 标签\n\twindow.addEventListener('click',function(e) {\n\t\te = e || window.event;\n\t\tvar t = e.target || e.srcElement;   // IE8\n\t\tif(t.tagName === 'A'){\n      \t\tif(t.target === '_blank') return;\n      \t\te.preventDefault();\n\t\t\tvar url = t.href;\t// 跳转的 url\n\t\t  \t// Ajax 加载页面\n\t\t\tloadAjax(url);\n  \t\t}\n\t}, false);\n\t// 后退前进刷新\n\twindow.addEventListener(\"popstate\", function(e) {\n\t  var url = window.location.href;\n\t  loadAjax(url,'pop');\t\t// 如果是后退或前进刷新,则不需要手动修改url\n\n\t},false);\n}\n```\n\n##### 跨域问题\n\nAjax 获取内容不难，只要是内部链接没有跨域问题就行。如果是外部链接，有两种方法判断：\n1. 给外部链接加上 `target = \"_blank\"` ，在给 a 标签绑定事件时判断一下 target 的值\n2. 用正则判断一下所给的 url 是不是内部链接，如果不是，直接返回。\n\n这里我用的是第一种方法\n\n##### 事件绑定\n\n我们先假设一种情况，我们从 A 页面获取了 B页面内容，然后将 A 无刷新修改成 B 页面，此时的 JS 已经执行过了，如果是写了个 for 循环遍历所有 a 标签，则修改后的页面 a 标签并没有绑定事件，或是直接将事件绑定在 HTML 里面，显然也是不好。这时我们就得用<a href=\"http://localhost:4000/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a> ,在 document 上挂载事件\n\n##### 修改地址栏链接与浏览器历史记录\n\nHTML5 新增的历史记录 API 可以实现无刷新更改地址栏链接  \n\n简单来说：假设当前页面为 idmrchan.com，那么执行下面的 JavaScript 语句：\n\n```js\nwindow.history.pushState(null, null, \"/blog/\");\n```\n\n之后，地址栏的地址就会变成 idmrchan.com/blog ,但同时浏览器不会刷新页面，甚至不会检测目标页面是否存在。\n\n执行 pushState 函数之后，会往浏览器的历史记录中添加一条新记录，同时改变地址栏的地址内容。它可以接收三个参数，按顺序分别为：  \n\n1. 一个对象或者字符串，用于描述新记录的一些特性。这个参数会被一并添加到历史记录中，以供以后使用。比如跳转前的所有内容，这样后退时就可以直接调用这些信息\n2. 一个字符串，代表新页面的标题\n3. 一个字符串，代表新页面的相对地址\n\n修改链接后，点击「前进」、「后退」按钮时，就会触发 popstate 事件。通过监听这一事件，从而作出反应。\n\n```js\nwindow.addEventListener(\"popstate\", function() {/* */},false);\n```\n\n","source":"_posts/ajax-pushstate.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"Ajax + pushState 无刷新加载内容\"\ndate:       2017-05-24 10:24:00\ntags:\n    - JavaScript\n---\n\n```js\nvar loadAjax = function(url, pop) {\n\tvar xmlhttp;\n\tif(window.XMLHttpRequest) {\n\t\txmlhttp = new XMLHttpRequest();\n\t}else {\n\t\txmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n\t}\n\txmlhttp.onreadystatechange = function() {\n\t\tif(xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n\t\t\tvar text = xmlhttp.responseText;\n\t\t\tconsole.log(text)\n\t\t\tif(!pop) { // 如果是后退或前进刷新,则不需要手动修改url\n      \t\t\t// 改变 url\n      \t\t\twindow.history.pushState(null, null, url);\n      \t\t}\n\t\t}\n\t}\n\txmlhttp.open(\"GET\",url,true);\n\txmlhttp.send();\n};\nwindow.onload = function() {\n\t// 事件委托,绑定所有 a 标签\n\twindow.addEventListener('click',function(e) {\n\t\te = e || window.event;\n\t\tvar t = e.target || e.srcElement;   // IE8\n\t\tif(t.tagName === 'A'){\n      \t\tif(t.target === '_blank') return;\n      \t\te.preventDefault();\n\t\t\tvar url = t.href;\t// 跳转的 url\n\t\t  \t// Ajax 加载页面\n\t\t\tloadAjax(url);\n  \t\t}\n\t}, false);\n\t// 后退前进刷新\n\twindow.addEventListener(\"popstate\", function(e) {\n\t  var url = window.location.href;\n\t  loadAjax(url,'pop');\t\t// 如果是后退或前进刷新,则不需要手动修改url\n\n\t},false);\n}\n```\n\n##### 跨域问题\n\nAjax 获取内容不难，只要是内部链接没有跨域问题就行。如果是外部链接，有两种方法判断：\n1. 给外部链接加上 `target = \"_blank\"` ，在给 a 标签绑定事件时判断一下 target 的值\n2. 用正则判断一下所给的 url 是不是内部链接，如果不是，直接返回。\n\n这里我用的是第一种方法\n\n##### 事件绑定\n\n我们先假设一种情况，我们从 A 页面获取了 B页面内容，然后将 A 无刷新修改成 B 页面，此时的 JS 已经执行过了，如果是写了个 for 循环遍历所有 a 标签，则修改后的页面 a 标签并没有绑定事件，或是直接将事件绑定在 HTML 里面，显然也是不好。这时我们就得用<a href=\"http://localhost:4000/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a> ,在 document 上挂载事件\n\n##### 修改地址栏链接与浏览器历史记录\n\nHTML5 新增的历史记录 API 可以实现无刷新更改地址栏链接  \n\n简单来说：假设当前页面为 idmrchan.com，那么执行下面的 JavaScript 语句：\n\n```js\nwindow.history.pushState(null, null, \"/blog/\");\n```\n\n之后，地址栏的地址就会变成 idmrchan.com/blog ,但同时浏览器不会刷新页面，甚至不会检测目标页面是否存在。\n\n执行 pushState 函数之后，会往浏览器的历史记录中添加一条新记录，同时改变地址栏的地址内容。它可以接收三个参数，按顺序分别为：  \n\n1. 一个对象或者字符串，用于描述新记录的一些特性。这个参数会被一并添加到历史记录中，以供以后使用。比如跳转前的所有内容，这样后退时就可以直接调用这些信息\n2. 一个字符串，代表新页面的标题\n3. 一个字符串，代表新页面的相对地址\n\n修改链接后，点击「前进」、「后退」按钮时，就会触发 popstate 事件。通过监听这一事件，从而作出反应。\n\n```js\nwindow.addEventListener(\"popstate\", function() {/* */},false);\n```\n\n","slug":"ajax-pushstate","published":1,"updated":"2018-05-09T08:44:07.624Z","comments":1,"photos":[],"link":"","_id":"cjv7qf3zw00012mhsu538gd58","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadAjax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, pop</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">\t\txmlhttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\txmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xmlhttp.readyState == <span class=\"number\">4</span> &amp;&amp; xmlhttp.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> text = xmlhttp.responseText;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(text)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!pop) &#123; <span class=\"comment\">// 如果是后退或前进刷新,则不需要手动修改url</span></span><br><span class=\"line\">      \t\t\t<span class=\"comment\">// 改变 url</span></span><br><span class=\"line\">      \t\t\t<span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, url);</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmlhttp.open(<span class=\"string\">\"GET\"</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\txmlhttp.send();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 事件委托,绑定所有 a 标签</span></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\te = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = e.target || e.srcElement;   <span class=\"comment\">// IE8</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t.tagName === <span class=\"string\">'A'</span>)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(t.target === <span class=\"string\">'_blank'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      \t\te.preventDefault();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> url = t.href;\t<span class=\"comment\">// 跳转的 url</span></span><br><span class=\"line\">\t\t  \t<span class=\"comment\">// Ajax 加载页面</span></span><br><span class=\"line\">\t\t\tloadAjax(url);</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 后退前进刷新</span></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">\t  loadAjax(url,<span class=\"string\">'pop'</span>);\t\t<span class=\"comment\">// 如果是后退或前进刷新,则不需要手动修改url</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h5><p>Ajax 获取内容不难，只要是内部链接没有跨域问题就行。如果是外部链接，有两种方法判断：</p>\n<ol>\n<li>给外部链接加上 <code>target = &quot;_blank&quot;</code> ，在给 a 标签绑定事件时判断一下 target 的值</li>\n<li>用正则判断一下所给的 url 是不是内部链接，如果不是，直接返回。</li>\n</ol>\n<p>这里我用的是第一种方法</p>\n<h5 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h5><p>我们先假设一种情况，我们从 A 页面获取了 B页面内容，然后将 A 无刷新修改成 B 页面，此时的 JS 已经执行过了，如果是写了个 for 循环遍历所有 a 标签，则修改后的页面 a 标签并没有绑定事件，或是直接将事件绑定在 HTML 里面，显然也是不好。这时我们就得用<a href=\"http://localhost:4000/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a> ,在 document 上挂载事件</p>\n<h5 id=\"修改地址栏链接与浏览器历史记录\"><a href=\"#修改地址栏链接与浏览器历史记录\" class=\"headerlink\" title=\"修改地址栏链接与浏览器历史记录\"></a>修改地址栏链接与浏览器历史记录</h5><p>HTML5 新增的历史记录 API 可以实现无刷新更改地址栏链接  </p>\n<p>简单来说：假设当前页面为 idmrchan.com，那么执行下面的 JavaScript 语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"/blog/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>之后，地址栏的地址就会变成 idmrchan.com/blog ,但同时浏览器不会刷新页面，甚至不会检测目标页面是否存在。</p>\n<p>执行 pushState 函数之后，会往浏览器的历史记录中添加一条新记录，同时改变地址栏的地址内容。它可以接收三个参数，按顺序分别为：  </p>\n<ol>\n<li>一个对象或者字符串，用于描述新记录的一些特性。这个参数会被一并添加到历史记录中，以供以后使用。比如跳转前的所有内容，这样后退时就可以直接调用这些信息</li>\n<li>一个字符串，代表新页面的标题</li>\n<li>一个字符串，代表新页面的相对地址</li>\n</ol>\n<p>修改链接后，点击「前进」、「后退」按钮时，就会触发 popstate 事件。通过监听这一事件，从而作出反应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* */</span>&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> loadAjax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url, pop</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> xmlhttp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.XMLHttpRequest) &#123;</span><br><span class=\"line\">\t\txmlhttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\txmlhttp = <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"Microsoft.XMLHTTP\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmlhttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(xmlhttp.readyState == <span class=\"number\">4</span> &amp;&amp; xmlhttp.status == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> text = xmlhttp.responseText;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(text)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!pop) &#123; <span class=\"comment\">// 如果是后退或前进刷新,则不需要手动修改url</span></span><br><span class=\"line\">      \t\t\t<span class=\"comment\">// 改变 url</span></span><br><span class=\"line\">      \t\t\t<span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, url);</span><br><span class=\"line\">      \t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\txmlhttp.open(<span class=\"string\">\"GET\"</span>,url,<span class=\"literal\">true</span>);</span><br><span class=\"line\">\txmlhttp.send();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 事件委托,绑定所有 a 标签</span></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t\te = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> t = e.target || e.srcElement;   <span class=\"comment\">// IE8</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t.tagName === <span class=\"string\">'A'</span>)&#123;</span><br><span class=\"line\">      \t\t<span class=\"keyword\">if</span>(t.target === <span class=\"string\">'_blank'</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      \t\te.preventDefault();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> url = t.href;\t<span class=\"comment\">// 跳转的 url</span></span><br><span class=\"line\">\t\t  \t<span class=\"comment\">// Ajax 加载页面</span></span><br><span class=\"line\">\t\t\tloadAjax(url);</span><br><span class=\"line\">  \t\t&#125;</span><br><span class=\"line\">\t&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 后退前进刷新</span></span><br><span class=\"line\">\t<span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">\t  <span class=\"keyword\">var</span> url = <span class=\"built_in\">window</span>.location.href;</span><br><span class=\"line\">\t  loadAjax(url,<span class=\"string\">'pop'</span>);\t\t<span class=\"comment\">// 如果是后退或前进刷新,则不需要手动修改url</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"跨域问题\"><a href=\"#跨域问题\" class=\"headerlink\" title=\"跨域问题\"></a>跨域问题</h5><p>Ajax 获取内容不难，只要是内部链接没有跨域问题就行。如果是外部链接，有两种方法判断：</p>\n<ol>\n<li>给外部链接加上 <code>target = &quot;_blank&quot;</code> ，在给 a 标签绑定事件时判断一下 target 的值</li>\n<li>用正则判断一下所给的 url 是不是内部链接，如果不是，直接返回。</li>\n</ol>\n<p>这里我用的是第一种方法</p>\n<h5 id=\"事件绑定\"><a href=\"#事件绑定\" class=\"headerlink\" title=\"事件绑定\"></a>事件绑定</h5><p>我们先假设一种情况，我们从 A 页面获取了 B页面内容，然后将 A 无刷新修改成 B 页面，此时的 JS 已经执行过了，如果是写了个 for 循环遍历所有 a 标签，则修改后的页面 a 标签并没有绑定事件，或是直接将事件绑定在 HTML 里面，显然也是不好。这时我们就得用<a href=\"http://localhost:4000/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a> ,在 document 上挂载事件</p>\n<h5 id=\"修改地址栏链接与浏览器历史记录\"><a href=\"#修改地址栏链接与浏览器历史记录\" class=\"headerlink\" title=\"修改地址栏链接与浏览器历史记录\"></a>修改地址栏链接与浏览器历史记录</h5><p>HTML5 新增的历史记录 API 可以实现无刷新更改地址栏链接  </p>\n<p>简单来说：假设当前页面为 idmrchan.com，那么执行下面的 JavaScript 语句：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.history.pushState(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"string\">\"/blog/\"</span>);</span><br></pre></td></tr></table></figure>\n<p>之后，地址栏的地址就会变成 idmrchan.com/blog ,但同时浏览器不会刷新页面，甚至不会检测目标页面是否存在。</p>\n<p>执行 pushState 函数之后，会往浏览器的历史记录中添加一条新记录，同时改变地址栏的地址内容。它可以接收三个参数，按顺序分别为：  </p>\n<ol>\n<li>一个对象或者字符串，用于描述新记录的一些特性。这个参数会被一并添加到历史记录中，以供以后使用。比如跳转前的所有内容，这样后退时就可以直接调用这些信息</li>\n<li>一个字符串，代表新页面的标题</li>\n<li>一个字符串，代表新页面的相对地址</li>\n</ol>\n<p>修改链接后，点击「前进」、「后退」按钮时，就会触发 popstate 事件。通过监听这一事件，从而作出反应。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"popstate\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* */</span>&#125;,<span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"AngularJS 使用介绍","date":"2018-05-11T07:20:00.000Z","_content":"\n### 入口\n\n一个页面只能有一个 AngularJS 应用\n\n```html\n<div ng-app=\"app\"></div>\n```\n\n```js\nvar app = angular.module('app', [])\n```\n\n### 控制器\n\n用于连接页面与数据，定义数据和数据变化，添加页面交互逻辑等\n\n```html\n<div>{{name}}</div>\n<button ng-click=\"goUrl\">goUrl</button>\n```\n\n```js\napp.controller('mainCtrl', ($scope, $http, $location) => {\n    $scope.name = 'Virgil'  // $scope 为当前作用域，页面需要的数据都要在这里添加\n    // 一般获取数据也都放控制器里\n    $http.get('url', (res) => {\n        $scope.data = res.data\n    })\n    $scope.goUrl = () => {\n        $location.path('url')\n    }\n})\n```\n\n### 数据绑定\n\nAngularJS 采用的是脏检测方式，当数据更新时，会隐式的调用 `$watch()` 方法，该方法会遍历当前作用域所有绑定的数据，即 $scope 上的数据。这就是为什么 AngularJS 要重写 $http 等方法，这些方法源码都是调用了 `$watch()`。\n\n所以在使用 directive 时，需要显示的调用 `$watch()` 和 `$apply()` ，apply 作用全局， watch 作用当前。\n\n以及对于一些不更新的数据进行绑定时，采用 `::val` 的绑定方式，只进行一次绑定，性能上会略微提高。\n\n### 服务\n\n服务（$provider）逻辑代码，用于存放公共代码或某个页面比较重的逻辑，以及公用变量，以便 controller 层尽可能的薄。\n\nAngularJS 自带了 30 多个自建服务，如 $scope $http 等。通过注入机制（$inject）可以在任何页面中直接调用。\n\n创建服务有 3 种方法和 2 个定义变量方法\n\n- factory\n- provider\n- service\n- value（定义变量）\n- constant（定义常量）\n\nfactory、provider、service 其实在源码里是一个函数的三种不同调用方式，区别不大。\n\n##### service\n\nservice 是用 new 关键字实例化的\n\n```js\napp.service('hexafy', () => {\n    this.myFunc = function(x) {\n        return x.toString(16)\n    }\n})\napp.controller('myCtrl', ($scope, hexafy) => {\n    $scope.hex = hexafy.myFunc(255)\n})\n```\n\n##### provider\n\n如果要在使用服务之前，先对服务进行一些配置操作，该怎么做？这时候就可以用上 provider ，provider 可以返回 $get 方法的内容。\n\n```js\napp.provider('getMsg', () => {\n    let name = ''\n    this.setName = function(val) {\n        name = val\n    }\n    this.$get = function(val) {\n        return name + 'is ' + val + ' age'\n    }\n})\n\napp.config('getMsgProvider', () => {\n    getMsgProvider.setName = 'Virgil'\n})\n\napp.controller('myCtrl', ($scope, getMsg) {\n    getMsg.setName()   // Error\n    $scope.msg = getMsg(18) // Virgil is 18 age\n})\n```\n\n这里需要提一下 config，AngularJS 执行分为 config 和 run 两个阶段，服务里只有 provider 可以在 config 阶段中进行配置，通过 xx + Provider 调用 provider 里的方法，而到了 run 步骤，注入器只返回 $get 内的函数内容。\n\n用过 AngularJS 路由的话应该就很好理解了。\n\n```js\n<script src=\"angular-route\"></script>\nvar app = angular.module('app', ['ngRoute'])    // 添加 route 方法\napp.config('routeProvider', () => {\n    $routeProvider\n        .when('/user', {\n            templateUrl: 'user.html',\n            controller: 'userCtrl'\n        })\n        .when('/about', {\n            template: '<p>about</p>',\n            controller: 'aboutCtrl'\n        })\n})\n```\n\nngRoute 定义了 provider 方法，让用户可以在 config 阶段进行配置。\n\n##### factory\n\nfactory 为 provider 的简写方式，源码里会把 factory return 的函数添加到 provider 的 $get 方法内。如果只是某个页面的复杂逻辑，不需要其他额外配置，建议使用 factory。\n\n```js\napp.factory('hexafy', () => {\n    return function(x) {\n        return x.toString(16)\n    }\n})\napp.controller('myCtrl', ($scope, hexafy) => {\n    $scope.hex = hexafy(255)\n})\n```\n\n### 过滤器\n\n```html\n<div>{{name | uppercase}}</div> // 变大写字母\n```\n\n自定义过滤器，可直接在全局使用\n\n```js\napp.filter('format', () => {\n    return function(val) {\n        // ...\n    }\n})\n```\n\n### directive\n\n太复杂，不讲了...\n\n反正就是提供了类似组件的功能，还可以通过 directive 实现操作 DOM 等共用方法。\n\n### 项目架构\n\n首页一个总的 `angular.module('app', [...])` `[]` 里放导入的外部 js。\n\n路由使用自带的 ngRoute，比较复杂的建议用 ui-route。\n\n页面一个 html 对应一个 controller。\n\n复杂逻辑或公共代码写在 factory，需要针对不同情况在 config 阶段进行配置的用 provider，在一个组件里在使用多个方法的用 service。\n\nfilter，constant，value 分 3 个文件，写在一块即可。\n\n弹窗、密码框等组件用 factory 而不用 directive，用 directive 需要在对应 html 添加配置，不灵活。使用 factory 可以 `_tmpl = '<div></div>'`，然后 `angular.element()` 动态添加和销毁。这样可以摆脱页面的限制，在任何页面都可以直接调用方法。\n\ndirective 则更多用于监听 DOM 以及需要父子组件双向传值的情况，举个栗子🌰：\n\n```js\napp.directive('scrollLoading', () => {\n  return {\n    restrict: 'A',\n    scope: {\n      isBottom: '=bind'\n    },\n    link: function($scope, element, attrs) {\n      element[0].addEventListener('scroll', function(e) {\n        let target = e.target\n        if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n          $scope.isBottom = true\n          $scope.$apply()\n        }\n      })\n    }\n  }\n})\n```\n\n一个简单的监听页面滚动底部的 directive，可以直接添加在某个 DOM 的属性上面\n\n```html\n<div scroll-loading></div>\n```\n\n然后在对应页面的 controller 里添加监听\n\n```js\n$scope.$watch('isBottom', (val) => {\n    if (val) {\n      getData()\n      // ...\n    }\n})\n```\n\nThat‘s all\n\n","source":"_posts/angularjs-intro.markdown","raw":"---\nlayout:     post\ntitle:      \"AngularJS 使用介绍\"\ndate:       2018-05-11 15:20:00\ntags:\n    - AngularJS\n---\n\n### 入口\n\n一个页面只能有一个 AngularJS 应用\n\n```html\n<div ng-app=\"app\"></div>\n```\n\n```js\nvar app = angular.module('app', [])\n```\n\n### 控制器\n\n用于连接页面与数据，定义数据和数据变化，添加页面交互逻辑等\n\n```html\n<div>{{name}}</div>\n<button ng-click=\"goUrl\">goUrl</button>\n```\n\n```js\napp.controller('mainCtrl', ($scope, $http, $location) => {\n    $scope.name = 'Virgil'  // $scope 为当前作用域，页面需要的数据都要在这里添加\n    // 一般获取数据也都放控制器里\n    $http.get('url', (res) => {\n        $scope.data = res.data\n    })\n    $scope.goUrl = () => {\n        $location.path('url')\n    }\n})\n```\n\n### 数据绑定\n\nAngularJS 采用的是脏检测方式，当数据更新时，会隐式的调用 `$watch()` 方法，该方法会遍历当前作用域所有绑定的数据，即 $scope 上的数据。这就是为什么 AngularJS 要重写 $http 等方法，这些方法源码都是调用了 `$watch()`。\n\n所以在使用 directive 时，需要显示的调用 `$watch()` 和 `$apply()` ，apply 作用全局， watch 作用当前。\n\n以及对于一些不更新的数据进行绑定时，采用 `::val` 的绑定方式，只进行一次绑定，性能上会略微提高。\n\n### 服务\n\n服务（$provider）逻辑代码，用于存放公共代码或某个页面比较重的逻辑，以及公用变量，以便 controller 层尽可能的薄。\n\nAngularJS 自带了 30 多个自建服务，如 $scope $http 等。通过注入机制（$inject）可以在任何页面中直接调用。\n\n创建服务有 3 种方法和 2 个定义变量方法\n\n- factory\n- provider\n- service\n- value（定义变量）\n- constant（定义常量）\n\nfactory、provider、service 其实在源码里是一个函数的三种不同调用方式，区别不大。\n\n##### service\n\nservice 是用 new 关键字实例化的\n\n```js\napp.service('hexafy', () => {\n    this.myFunc = function(x) {\n        return x.toString(16)\n    }\n})\napp.controller('myCtrl', ($scope, hexafy) => {\n    $scope.hex = hexafy.myFunc(255)\n})\n```\n\n##### provider\n\n如果要在使用服务之前，先对服务进行一些配置操作，该怎么做？这时候就可以用上 provider ，provider 可以返回 $get 方法的内容。\n\n```js\napp.provider('getMsg', () => {\n    let name = ''\n    this.setName = function(val) {\n        name = val\n    }\n    this.$get = function(val) {\n        return name + 'is ' + val + ' age'\n    }\n})\n\napp.config('getMsgProvider', () => {\n    getMsgProvider.setName = 'Virgil'\n})\n\napp.controller('myCtrl', ($scope, getMsg) {\n    getMsg.setName()   // Error\n    $scope.msg = getMsg(18) // Virgil is 18 age\n})\n```\n\n这里需要提一下 config，AngularJS 执行分为 config 和 run 两个阶段，服务里只有 provider 可以在 config 阶段中进行配置，通过 xx + Provider 调用 provider 里的方法，而到了 run 步骤，注入器只返回 $get 内的函数内容。\n\n用过 AngularJS 路由的话应该就很好理解了。\n\n```js\n<script src=\"angular-route\"></script>\nvar app = angular.module('app', ['ngRoute'])    // 添加 route 方法\napp.config('routeProvider', () => {\n    $routeProvider\n        .when('/user', {\n            templateUrl: 'user.html',\n            controller: 'userCtrl'\n        })\n        .when('/about', {\n            template: '<p>about</p>',\n            controller: 'aboutCtrl'\n        })\n})\n```\n\nngRoute 定义了 provider 方法，让用户可以在 config 阶段进行配置。\n\n##### factory\n\nfactory 为 provider 的简写方式，源码里会把 factory return 的函数添加到 provider 的 $get 方法内。如果只是某个页面的复杂逻辑，不需要其他额外配置，建议使用 factory。\n\n```js\napp.factory('hexafy', () => {\n    return function(x) {\n        return x.toString(16)\n    }\n})\napp.controller('myCtrl', ($scope, hexafy) => {\n    $scope.hex = hexafy(255)\n})\n```\n\n### 过滤器\n\n```html\n<div>{{name | uppercase}}</div> // 变大写字母\n```\n\n自定义过滤器，可直接在全局使用\n\n```js\napp.filter('format', () => {\n    return function(val) {\n        // ...\n    }\n})\n```\n\n### directive\n\n太复杂，不讲了...\n\n反正就是提供了类似组件的功能，还可以通过 directive 实现操作 DOM 等共用方法。\n\n### 项目架构\n\n首页一个总的 `angular.module('app', [...])` `[]` 里放导入的外部 js。\n\n路由使用自带的 ngRoute，比较复杂的建议用 ui-route。\n\n页面一个 html 对应一个 controller。\n\n复杂逻辑或公共代码写在 factory，需要针对不同情况在 config 阶段进行配置的用 provider，在一个组件里在使用多个方法的用 service。\n\nfilter，constant，value 分 3 个文件，写在一块即可。\n\n弹窗、密码框等组件用 factory 而不用 directive，用 directive 需要在对应 html 添加配置，不灵活。使用 factory 可以 `_tmpl = '<div></div>'`，然后 `angular.element()` 动态添加和销毁。这样可以摆脱页面的限制，在任何页面都可以直接调用方法。\n\ndirective 则更多用于监听 DOM 以及需要父子组件双向传值的情况，举个栗子🌰：\n\n```js\napp.directive('scrollLoading', () => {\n  return {\n    restrict: 'A',\n    scope: {\n      isBottom: '=bind'\n    },\n    link: function($scope, element, attrs) {\n      element[0].addEventListener('scroll', function(e) {\n        let target = e.target\n        if (target.scrollTop + target.clientHeight === target.scrollHeight) {\n          $scope.isBottom = true\n          $scope.$apply()\n        }\n      })\n    }\n  }\n})\n```\n\n一个简单的监听页面滚动底部的 directive，可以直接添加在某个 DOM 的属性上面\n\n```html\n<div scroll-loading></div>\n```\n\n然后在对应页面的 controller 里添加监听\n\n```js\n$scope.$watch('isBottom', (val) => {\n    if (val) {\n      getData()\n      // ...\n    }\n})\n```\n\nThat‘s all\n\n","slug":"angularjs-intro","published":1,"updated":"2018-05-11T09:49:23.554Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40200022mhs4uts7agd","content":"<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>一个页面只能有一个 AngularJS 应用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>用于连接页面与数据，定义数据和数据变化，添加页面交互逻辑等</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"goUrl\"</span>&gt;</span>goUrl<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'mainCtrl'</span>, ($scope, $http, $location) =&gt; &#123;</span><br><span class=\"line\">    $scope.name = <span class=\"string\">'Virgil'</span>  <span class=\"comment\">// $scope 为当前作用域，页面需要的数据都要在这里添加</span></span><br><span class=\"line\">    <span class=\"comment\">// 一般获取数据也都放控制器里</span></span><br><span class=\"line\">    $http.get(<span class=\"string\">'url'</span>, (res) =&gt; &#123;</span><br><span class=\"line\">        $scope.data = res.data</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    $scope.goUrl = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        $location.path(<span class=\"string\">'url'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>AngularJS 采用的是脏检测方式，当数据更新时，会隐式的调用 <code>$watch()</code> 方法，该方法会遍历当前作用域所有绑定的数据，即 $scope 上的数据。这就是为什么 AngularJS 要重写 $http 等方法，这些方法源码都是调用了 <code>$watch()</code>。</p>\n<p>所以在使用 directive 时，需要显示的调用 <code>$watch()</code> 和 <code>$apply()</code> ，apply 作用全局， watch 作用当前。</p>\n<p>以及对于一些不更新的数据进行绑定时，采用 <code>::val</code> 的绑定方式，只进行一次绑定，性能上会略微提高。</p>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>服务（$provider）逻辑代码，用于存放公共代码或某个页面比较重的逻辑，以及公用变量，以便 controller 层尽可能的薄。</p>\n<p>AngularJS 自带了 30 多个自建服务，如 $scope $http 等。通过注入机制（$inject）可以在任何页面中直接调用。</p>\n<p>创建服务有 3 种方法和 2 个定义变量方法</p>\n<ul>\n<li>factory</li>\n<li>provider</li>\n<li>service</li>\n<li>value（定义变量）</li>\n<li>constant（定义常量）</li>\n</ul>\n<p>factory、provider、service 其实在源码里是一个函数的三种不同调用方式，区别不大。</p>\n<h5 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h5><p>service 是用 new 关键字实例化的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.service(<span class=\"string\">'hexafy'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, hexafy) =&gt; &#123;</span><br><span class=\"line\">    $scope.hex = hexafy.myFunc(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h5><p>如果要在使用服务之前，先对服务进行一些配置操作，该怎么做？这时候就可以用上 provider ，provider 可以返回 $get 方法的内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.provider(<span class=\"string\">'getMsg'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        name = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">'is '</span> + val + <span class=\"string\">' age'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config(<span class=\"string\">'getMsgProvider'</span>, () =&gt; &#123;</span><br><span class=\"line\">    getMsgProvider.setName = <span class=\"string\">'Virgil'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, getMsg) &#123;</span><br><span class=\"line\">    getMsg.setName()   <span class=\"comment\">// Error</span></span><br><span class=\"line\">    $scope.msg = getMsg(<span class=\"number\">18</span>) <span class=\"comment\">// Virgil is 18 age</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里需要提一下 config，AngularJS 执行分为 config 和 run 两个阶段，服务里只有 provider 可以在 config 阶段中进行配置，通过 xx + Provider 调用 provider 里的方法，而到了 run 步骤，注入器只返回 $get 内的函数内容。</p>\n<p>用过 AngularJS 路由的话应该就很好理解了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"angular-route\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [<span class=\"string\">'ngRoute'</span>])    <span class=\"comment\">// 添加 route 方法</span></span><br><span class=\"line\">app.config(<span class=\"string\">'routeProvider'</span>, () =&gt; &#123;</span><br><span class=\"line\">    $routeProvider</span><br><span class=\"line\">        .when(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">            templateUrl: <span class=\"string\">'user.html'</span>,</span><br><span class=\"line\">            controller: <span class=\"string\">'userCtrl'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .when(<span class=\"string\">'/about'</span>, &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;p&gt;about&lt;/p&gt;'</span>,</span><br><span class=\"line\">            controller: <span class=\"string\">'aboutCtrl'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>ngRoute 定义了 provider 方法，让用户可以在 config 阶段进行配置。</p>\n<h5 id=\"factory\"><a href=\"#factory\" class=\"headerlink\" title=\"factory\"></a>factory</h5><p>factory 为 provider 的简写方式，源码里会把 factory return 的函数添加到 provider 的 $get 方法内。如果只是某个页面的复杂逻辑，不需要其他额外配置，建议使用 factory。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'hexafy'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, hexafy) =&gt; &#123;</span><br><span class=\"line\">    $scope.hex = hexafy(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;name | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> // 变大写字母</span><br></pre></td></tr></table></figure>\n<p>自定义过滤器，可直接在全局使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.filter(<span class=\"string\">'format'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"directive\"><a href=\"#directive\" class=\"headerlink\" title=\"directive\"></a>directive</h3><p>太复杂，不讲了…</p>\n<p>反正就是提供了类似组件的功能，还可以通过 directive 实现操作 DOM 等共用方法。</p>\n<h3 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h3><p>首页一个总的 <code>angular.module(&#39;app&#39;, [...])</code> <code>[]</code> 里放导入的外部 js。</p>\n<p>路由使用自带的 ngRoute，比较复杂的建议用 ui-route。</p>\n<p>页面一个 html 对应一个 controller。</p>\n<p>复杂逻辑或公共代码写在 factory，需要针对不同情况在 config 阶段进行配置的用 provider，在一个组件里在使用多个方法的用 service。</p>\n<p>filter，constant，value 分 3 个文件，写在一块即可。</p>\n<p>弹窗、密码框等组件用 factory 而不用 directive，用 directive 需要在对应 html 添加配置，不灵活。使用 factory 可以 <code>_tmpl = &#39;&lt;div&gt;&lt;/div&gt;&#39;</code>，然后 <code>angular.element()</code> 动态添加和销毁。这样可以摆脱页面的限制，在任何页面都可以直接调用方法。</p>\n<p>directive 则更多用于监听 DOM 以及需要父子组件双向传值的情况，举个栗子🌰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.directive(<span class=\"string\">'scrollLoading'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      isBottom: <span class=\"string\">'=bind'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">      element[<span class=\"number\">0</span>].addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = e.target</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.scrollTop + target.clientHeight === target.scrollHeight) &#123;</span><br><span class=\"line\">          $scope.isBottom = <span class=\"literal\">true</span></span><br><span class=\"line\">          $scope.$apply()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>一个简单的监听页面滚动底部的 directive，可以直接添加在某个 DOM 的属性上面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">scroll-loading</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在对应页面的 controller 里添加监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"string\">'isBottom'</span>, (val) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">      getData()</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>That‘s all</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h3><p>一个页面只能有一个 AngularJS 应用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ng-app</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [])</span><br></pre></td></tr></table></figure>\n<h3 id=\"控制器\"><a href=\"#控制器\" class=\"headerlink\" title=\"控制器\"></a>控制器</h3><p>用于连接页面与数据，定义数据和数据变化，添加页面交互逻辑等</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ng-click</span>=<span class=\"string\">\"goUrl\"</span>&gt;</span>goUrl<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.controller(<span class=\"string\">'mainCtrl'</span>, ($scope, $http, $location) =&gt; &#123;</span><br><span class=\"line\">    $scope.name = <span class=\"string\">'Virgil'</span>  <span class=\"comment\">// $scope 为当前作用域，页面需要的数据都要在这里添加</span></span><br><span class=\"line\">    <span class=\"comment\">// 一般获取数据也都放控制器里</span></span><br><span class=\"line\">    $http.get(<span class=\"string\">'url'</span>, (res) =&gt; &#123;</span><br><span class=\"line\">        $scope.data = res.data</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    $scope.goUrl = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        $location.path(<span class=\"string\">'url'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"数据绑定\"><a href=\"#数据绑定\" class=\"headerlink\" title=\"数据绑定\"></a>数据绑定</h3><p>AngularJS 采用的是脏检测方式，当数据更新时，会隐式的调用 <code>$watch()</code> 方法，该方法会遍历当前作用域所有绑定的数据，即 $scope 上的数据。这就是为什么 AngularJS 要重写 $http 等方法，这些方法源码都是调用了 <code>$watch()</code>。</p>\n<p>所以在使用 directive 时，需要显示的调用 <code>$watch()</code> 和 <code>$apply()</code> ，apply 作用全局， watch 作用当前。</p>\n<p>以及对于一些不更新的数据进行绑定时，采用 <code>::val</code> 的绑定方式，只进行一次绑定，性能上会略微提高。</p>\n<h3 id=\"服务\"><a href=\"#服务\" class=\"headerlink\" title=\"服务\"></a>服务</h3><p>服务（$provider）逻辑代码，用于存放公共代码或某个页面比较重的逻辑，以及公用变量，以便 controller 层尽可能的薄。</p>\n<p>AngularJS 自带了 30 多个自建服务，如 $scope $http 等。通过注入机制（$inject）可以在任何页面中直接调用。</p>\n<p>创建服务有 3 种方法和 2 个定义变量方法</p>\n<ul>\n<li>factory</li>\n<li>provider</li>\n<li>service</li>\n<li>value（定义变量）</li>\n<li>constant（定义常量）</li>\n</ul>\n<p>factory、provider、service 其实在源码里是一个函数的三种不同调用方式，区别不大。</p>\n<h5 id=\"service\"><a href=\"#service\" class=\"headerlink\" title=\"service\"></a>service</h5><p>service 是用 new 关键字实例化的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.service(<span class=\"string\">'hexafy'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.myFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, hexafy) =&gt; &#123;</span><br><span class=\"line\">    $scope.hex = hexafy.myFunc(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h5 id=\"provider\"><a href=\"#provider\" class=\"headerlink\" title=\"provider\"></a>provider</h5><p>如果要在使用服务之前，先对服务进行一些配置操作，该怎么做？这时候就可以用上 provider ，provider 可以返回 $get 方法的内容。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.provider(<span class=\"string\">'getMsg'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">''</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.setName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        name = val</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name + <span class=\"string\">'is '</span> + val + <span class=\"string\">' age'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.config(<span class=\"string\">'getMsgProvider'</span>, () =&gt; &#123;</span><br><span class=\"line\">    getMsgProvider.setName = <span class=\"string\">'Virgil'</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, getMsg) &#123;</span><br><span class=\"line\">    getMsg.setName()   <span class=\"comment\">// Error</span></span><br><span class=\"line\">    $scope.msg = getMsg(<span class=\"number\">18</span>) <span class=\"comment\">// Virgil is 18 age</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这里需要提一下 config，AngularJS 执行分为 config 和 run 两个阶段，服务里只有 provider 可以在 config 阶段中进行配置，通过 xx + Provider 调用 provider 里的方法，而到了 run 步骤，注入器只返回 $get 内的函数内容。</p>\n<p>用过 AngularJS 路由的话应该就很好理解了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=<span class=\"string\">\"angular-route\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">var</span> app = angular.module(<span class=\"string\">'app'</span>, [<span class=\"string\">'ngRoute'</span>])    <span class=\"comment\">// 添加 route 方法</span></span><br><span class=\"line\">app.config(<span class=\"string\">'routeProvider'</span>, () =&gt; &#123;</span><br><span class=\"line\">    $routeProvider</span><br><span class=\"line\">        .when(<span class=\"string\">'/user'</span>, &#123;</span><br><span class=\"line\">            templateUrl: <span class=\"string\">'user.html'</span>,</span><br><span class=\"line\">            controller: <span class=\"string\">'userCtrl'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        .when(<span class=\"string\">'/about'</span>, &#123;</span><br><span class=\"line\">            template: <span class=\"string\">'&lt;p&gt;about&lt;/p&gt;'</span>,</span><br><span class=\"line\">            controller: <span class=\"string\">'aboutCtrl'</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>ngRoute 定义了 provider 方法，让用户可以在 config 阶段进行配置。</p>\n<h5 id=\"factory\"><a href=\"#factory\" class=\"headerlink\" title=\"factory\"></a>factory</h5><p>factory 为 provider 的简写方式，源码里会把 factory return 的函数添加到 provider 的 $get 方法内。如果只是某个页面的复杂逻辑，不需要其他额外配置，建议使用 factory。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.factory(<span class=\"string\">'hexafy'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x.toString(<span class=\"number\">16</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">app.controller(<span class=\"string\">'myCtrl'</span>, ($scope, hexafy) =&gt; &#123;</span><br><span class=\"line\">    $scope.hex = hexafy(<span class=\"number\">255</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;name | uppercase&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span> // 变大写字母</span><br></pre></td></tr></table></figure>\n<p>自定义过滤器，可直接在全局使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.filter(<span class=\"string\">'format'</span>, () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"directive\"><a href=\"#directive\" class=\"headerlink\" title=\"directive\"></a>directive</h3><p>太复杂，不讲了…</p>\n<p>反正就是提供了类似组件的功能，还可以通过 directive 实现操作 DOM 等共用方法。</p>\n<h3 id=\"项目架构\"><a href=\"#项目架构\" class=\"headerlink\" title=\"项目架构\"></a>项目架构</h3><p>首页一个总的 <code>angular.module(&#39;app&#39;, [...])</code> <code>[]</code> 里放导入的外部 js。</p>\n<p>路由使用自带的 ngRoute，比较复杂的建议用 ui-route。</p>\n<p>页面一个 html 对应一个 controller。</p>\n<p>复杂逻辑或公共代码写在 factory，需要针对不同情况在 config 阶段进行配置的用 provider，在一个组件里在使用多个方法的用 service。</p>\n<p>filter，constant，value 分 3 个文件，写在一块即可。</p>\n<p>弹窗、密码框等组件用 factory 而不用 directive，用 directive 需要在对应 html 添加配置，不灵活。使用 factory 可以 <code>_tmpl = &#39;&lt;div&gt;&lt;/div&gt;&#39;</code>，然后 <code>angular.element()</code> 动态添加和销毁。这样可以摆脱页面的限制，在任何页面都可以直接调用方法。</p>\n<p>directive 则更多用于监听 DOM 以及需要父子组件双向传值的情况，举个栗子🌰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.directive(<span class=\"string\">'scrollLoading'</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    restrict: <span class=\"string\">'A'</span>,</span><br><span class=\"line\">    scope: &#123;</span><br><span class=\"line\">      isBottom: <span class=\"string\">'=bind'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    link: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$scope, element, attrs</span>) </span>&#123;</span><br><span class=\"line\">      element[<span class=\"number\">0</span>].addEventListener(<span class=\"string\">'scroll'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> target = e.target</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target.scrollTop + target.clientHeight === target.scrollHeight) &#123;</span><br><span class=\"line\">          $scope.isBottom = <span class=\"literal\">true</span></span><br><span class=\"line\">          $scope.$apply()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>一个简单的监听页面滚动底部的 directive，可以直接添加在某个 DOM 的属性上面</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">scroll-loading</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后在对应页面的 controller 里添加监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$scope.$watch(<span class=\"string\">'isBottom'</span>, (val) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (val) &#123;</span><br><span class=\"line\">      getData()</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>That‘s all</p>\n"},{"layout":"post","title":"vue-router + vue-resource + webpack 配置","date":"2017-04-09T14:54:00.000Z","_content":"\n# 安装\n\n全局安装 vue-cli  ` npm install vue-cli -g `  \n\n初始化  ` vue init webpack-simple test `  \nwebpack-simple 是官方 webpack 模板的简化版，已经包含大部分基础功能，故选择简化版。test 是文件夹名字  \n接下来就一路回车。\n\n使用 `npm install` 安装， `npm run dev` 使用\n\n### 项目结构\n\n- src 存放工程结构\n- .babelrc 是 ES6 配置\n- .gitignore 是 github 文件，可以让 git 上传时默认忽视某些文件\n- .index.html\n- .package.json node 初始化配置文件\n- README.md\n- webpack.config.js webpack 配置，下面详细讲解\n\n##### package.json\n\n```json\n{\n    ......\n    // 脚本\n    \"scripts\": {\n        \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n        \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n    },\n    \"dependencies\": {\n        \"vue\": \"^2.2.1\"\n    },\n        \"devDependencies\": {\n        \"babel-core\": \"^6.0.0\",             //babel\n        \"babel-loader\": \"^6.0.0\",\n        \"babel-preset-latest\": \"^6.0.0\",\n        \"cross-env\": \"^3.0.0\",              //跨平台环境配置\n        \"css-loader\": \"^0.25.0\",            //loader css、file、vue\n        \"file-loader\": \"^0.9.0\",\n        \"vue-loader\": \"^11.1.4\",\n        \"vue-template-compiler\": \"^2.2.1\",  //vue 模板编译器\n        \"webpack\": \"^2.2.0\",\n        \"webpack-dev-server\": \"^2.2.0\"      //热配置\n    }\n}\n```\n\npackage.json 初始添加了一些模块，包括 babel、文件loader、webpack-dev-server 等功能。 ` npm install ` 就是从这里添加模块\n\n##### webpack.config.js\n\n```js\nmodule.exports = {\n  entry: './src/main.js',   //入口文件\n  output: {\n    path: path.resolve(__dirname, './dist'),    //输出目录\n    publicPath: '/dist/',\n    filename: 'build.js'                        //输出文件名\n  },\n  module: {\n    rules: [\n    //loader 装载\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {\n            }\n          // other vue-loader options go here\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  //vue2.0 别名设置\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.js'\n    }\n  },\n  devServer: {\n    historyApiFallback: true,\n    noInfo: true\n  },\n  performance: {\n    hints: false\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n### 添加 vue-resource mock 数据\n\n使用 ` npm install vue-resource --save-dev` 安装至项目\n\nsrc/main.js \n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)   //vue 2.0\n})\n```\n\n添加 vue-resource\n\n```js\nimport VueResource from 'vue-resource';\nVue.use(VueResource);\n```\n\nsrc/App.vue\n\n```js\n<script>\nimport data from './data.json';\nexport default {\n    data() {\n        return {\n            seller: {}\n        }\n    },\n    created() {\n        this.seller = data.seller;\n    }\n}\n</script>\n```\n\n### 添加 vue-router 功能  \n\n添加 `npm install --save-dev vue-router`\n\n在 src/components 下新建 test.vue\n\ntest.vue\n\n```html\n<template>\n    <div>\n        <p>this is test</p>\n    </div>\n</template>\n\n<script>\n    export default {}\n</script>\n\n<style></style>\n```\n\n所有 vue 模板都要有 template(html) 、 script 、 style 三部分  \n\nsrc/main.js  \n\n```js\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\n\nlet routes = [\n    {\n        path: '/',\n        name: 'index',\n        component: App,\n        children: [\n            {path: '/test',component: test}\n        ]\n    }\n];\nlet router = new VueRouter({\n    'linkActiveClass': 'active',\n    routes\n});\nlet app = new Vue({\n    router\n}).$mount('#app');\n    router.push('/test');  //直接打开 localhost://test\nexport default app;\n```\n\nsrc/App.vue\n\n```html\n<template>\n  <div>\n        <router-view></router-view>\n  </div>\n</template>\n```\n\n打开 `localhost:8080/test` 看看内容是否添加了\n","source":"_posts/VueRouter-VueResource-webpack.markdown","raw":"---\nlayout:     post\ntitle:      \"vue-router + vue-resource + webpack 配置\"\ndate:       2017-04-09 22:54:00\ntags:\n    - Vue\n    - WebPack\n---\n\n# 安装\n\n全局安装 vue-cli  ` npm install vue-cli -g `  \n\n初始化  ` vue init webpack-simple test `  \nwebpack-simple 是官方 webpack 模板的简化版，已经包含大部分基础功能，故选择简化版。test 是文件夹名字  \n接下来就一路回车。\n\n使用 `npm install` 安装， `npm run dev` 使用\n\n### 项目结构\n\n- src 存放工程结构\n- .babelrc 是 ES6 配置\n- .gitignore 是 github 文件，可以让 git 上传时默认忽视某些文件\n- .index.html\n- .package.json node 初始化配置文件\n- README.md\n- webpack.config.js webpack 配置，下面详细讲解\n\n##### package.json\n\n```json\n{\n    ......\n    // 脚本\n    \"scripts\": {\n        \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",\n        \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"\n    },\n    \"dependencies\": {\n        \"vue\": \"^2.2.1\"\n    },\n        \"devDependencies\": {\n        \"babel-core\": \"^6.0.0\",             //babel\n        \"babel-loader\": \"^6.0.0\",\n        \"babel-preset-latest\": \"^6.0.0\",\n        \"cross-env\": \"^3.0.0\",              //跨平台环境配置\n        \"css-loader\": \"^0.25.0\",            //loader css、file、vue\n        \"file-loader\": \"^0.9.0\",\n        \"vue-loader\": \"^11.1.4\",\n        \"vue-template-compiler\": \"^2.2.1\",  //vue 模板编译器\n        \"webpack\": \"^2.2.0\",\n        \"webpack-dev-server\": \"^2.2.0\"      //热配置\n    }\n}\n```\n\npackage.json 初始添加了一些模块，包括 babel、文件loader、webpack-dev-server 等功能。 ` npm install ` 就是从这里添加模块\n\n##### webpack.config.js\n\n```js\nmodule.exports = {\n  entry: './src/main.js',   //入口文件\n  output: {\n    path: path.resolve(__dirname, './dist'),    //输出目录\n    publicPath: '/dist/',\n    filename: 'build.js'                        //输出文件名\n  },\n  module: {\n    rules: [\n    //loader 装载\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: {\n          loaders: {\n            }\n          // other vue-loader options go here\n        }\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        exclude: /node_modules/\n      },\n      {\n        test: /\\.(png|jpg|gif|svg)$/,\n        loader: 'file-loader',\n        options: {\n          name: '[name].[ext]?[hash]'\n        }\n      }\n    ]\n  },\n  //vue2.0 别名设置\n  resolve: {\n    alias: {\n      'vue$': 'vue/dist/vue.js'\n    }\n  },\n  devServer: {\n    historyApiFallback: true,\n    noInfo: true\n  },\n  performance: {\n    hints: false\n  },\n  devtool: '#eval-source-map'\n}\n```\n\n### 添加 vue-resource mock 数据\n\n使用 ` npm install vue-resource --save-dev` 安装至项目\n\nsrc/main.js \n\n```js\nimport Vue from 'vue'\nimport App from './App.vue'\n\nnew Vue({\n  el: '#app',\n  render: h => h(App)   //vue 2.0\n})\n```\n\n添加 vue-resource\n\n```js\nimport VueResource from 'vue-resource';\nVue.use(VueResource);\n```\n\nsrc/App.vue\n\n```js\n<script>\nimport data from './data.json';\nexport default {\n    data() {\n        return {\n            seller: {}\n        }\n    },\n    created() {\n        this.seller = data.seller;\n    }\n}\n</script>\n```\n\n### 添加 vue-router 功能  \n\n添加 `npm install --save-dev vue-router`\n\n在 src/components 下新建 test.vue\n\ntest.vue\n\n```html\n<template>\n    <div>\n        <p>this is test</p>\n    </div>\n</template>\n\n<script>\n    export default {}\n</script>\n\n<style></style>\n```\n\n所有 vue 模板都要有 template(html) 、 script 、 style 三部分  \n\nsrc/main.js  \n\n```js\nimport VueRouter from 'vue-router';\nVue.use(VueRouter);\n\nlet routes = [\n    {\n        path: '/',\n        name: 'index',\n        component: App,\n        children: [\n            {path: '/test',component: test}\n        ]\n    }\n];\nlet router = new VueRouter({\n    'linkActiveClass': 'active',\n    routes\n});\nlet app = new Vue({\n    router\n}).$mount('#app');\n    router.push('/test');  //直接打开 localhost://test\nexport default app;\n```\n\nsrc/App.vue\n\n```html\n<template>\n  <div>\n        <router-view></router-view>\n  </div>\n</template>\n```\n\n打开 `localhost:8080/test` 看看内容是否添加了\n","slug":"VueRouter-VueResource-webpack","published":1,"updated":"2018-05-09T08:31:34.227Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40600042mhs556p5vri","content":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>全局安装 vue-cli  <code>npm install vue-cli -g</code>  </p>\n<p>初始化  <code>vue init webpack-simple test</code><br>webpack-simple 是官方 webpack 模板的简化版，已经包含大部分基础功能，故选择简化版。test 是文件夹名字<br>接下来就一路回车。</p>\n<p>使用 <code>npm install</code> 安装， <code>npm run dev</code> 使用</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li>src 存放工程结构</li>\n<li>.babelrc 是 ES6 配置</li>\n<li>.gitignore 是 github 文件，可以让 git 上传时默认忽视某些文件</li>\n<li>.index.html</li>\n<li>.package.json node 初始化配置文件</li>\n<li>README.md</li>\n<li>webpack.config.js webpack 配置，下面详细讲解</li>\n</ul>\n<h5 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    // 脚本</span><br><span class=\"line\">    \"scripts\": &#123;</span><br><span class=\"line\">        \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",</span><br><span class=\"line\">        \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"dependencies\": &#123;</span><br><span class=\"line\">        \"vue\": \"^2.2.1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        \"devDependencies\": &#123;</span><br><span class=\"line\">        \"babel-core\": \"^6.0.0\",             //babel</span><br><span class=\"line\">        \"babel-loader\": \"^6.0.0\",</span><br><span class=\"line\">        \"babel-preset-latest\": \"^6.0.0\",</span><br><span class=\"line\">        \"cross-env\": \"^3.0.0\",              //跨平台环境配置</span><br><span class=\"line\">        \"css-loader\": \"^0.25.0\",            //loader css、file、vue</span><br><span class=\"line\">        \"file-loader\": \"^0.9.0\",</span><br><span class=\"line\">        \"vue-loader\": \"^11.1.4\",</span><br><span class=\"line\">        \"vue-template-compiler\": \"^2.2.1\",  //vue 模板编译器</span><br><span class=\"line\">        \"webpack\": \"^2.2.0\",</span><br><span class=\"line\">        \"webpack-dev-server\": \"^2.2.0\"      //热配置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>package.json 初始添加了一些模块，包括 babel、文件loader、webpack-dev-server 等功能。 <code>npm install</code> 就是从这里添加模块</p>\n<h5 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,   <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),    <span class=\"comment\">//输出目录</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span>                        <span class=\"comment\">//输出文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">    <span class=\"comment\">//loader 装载</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// other vue-loader options go here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'[name].[ext]?[hash]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//vue2.0 别名设置</span></span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-vue-resource-mock-数据\"><a href=\"#添加-vue-resource-mock-数据\" class=\"headerlink\" title=\"添加 vue-resource mock 数据\"></a>添加 vue-resource mock 数据</h3><p>使用 <code>npm install vue-resource --save-dev</code> 安装至项目</p>\n<p>src/main.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)   <span class=\"comment\">//vue 2.0</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>添加 vue-resource</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueResource <span class=\"keyword\">from</span> <span class=\"string\">'vue-resource'</span>;</span><br><span class=\"line\">Vue.use(VueResource);</span><br></pre></td></tr></table></figure>\n<p>src/App.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            seller: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.seller = data.seller;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-vue-router-功能\"><a href=\"#添加-vue-router-功能\" class=\"headerlink\" title=\"添加 vue-router 功能\"></a>添加 vue-router 功能</h3><p>添加 <code>npm install --save-dev vue-router</code></p>\n<p>在 src/components 下新建 test.vue</p>\n<p>test.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所有 vue 模板都要有 template(html) 、 script 、 style 三部分  </p>\n<p>src/main.js  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'index'</span>,</span><br><span class=\"line\">        component: App,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/test'</span>,<span class=\"attr\">component</span>: test&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    <span class=\"string\">'linkActiveClass'</span>: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">    router.push(<span class=\"string\">'/test'</span>);  <span class=\"comment\">//直接打开 localhost://test</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app;</span><br></pre></td></tr></table></figure>\n<p>src/App.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开 <code>localhost:8080/test</code> 看看内容是否添加了</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>全局安装 vue-cli  <code>npm install vue-cli -g</code>  </p>\n<p>初始化  <code>vue init webpack-simple test</code><br>webpack-simple 是官方 webpack 模板的简化版，已经包含大部分基础功能，故选择简化版。test 是文件夹名字<br>接下来就一路回车。</p>\n<p>使用 <code>npm install</code> 安装， <code>npm run dev</code> 使用</p>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><ul>\n<li>src 存放工程结构</li>\n<li>.babelrc 是 ES6 配置</li>\n<li>.gitignore 是 github 文件，可以让 git 上传时默认忽视某些文件</li>\n<li>.index.html</li>\n<li>.package.json node 初始化配置文件</li>\n<li>README.md</li>\n<li>webpack.config.js webpack 配置，下面详细讲解</li>\n</ul>\n<h5 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a>package.json</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    ......</span><br><span class=\"line\">    // 脚本</span><br><span class=\"line\">    \"scripts\": &#123;</span><br><span class=\"line\">        \"dev\": \"cross-env NODE_ENV=development webpack-dev-server --open --hot\",</span><br><span class=\"line\">        \"build\": \"cross-env NODE_ENV=production webpack --progress --hide-modules\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    \"dependencies\": &#123;</span><br><span class=\"line\">        \"vue\": \"^2.2.1\"</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        \"devDependencies\": &#123;</span><br><span class=\"line\">        \"babel-core\": \"^6.0.0\",             //babel</span><br><span class=\"line\">        \"babel-loader\": \"^6.0.0\",</span><br><span class=\"line\">        \"babel-preset-latest\": \"^6.0.0\",</span><br><span class=\"line\">        \"cross-env\": \"^3.0.0\",              //跨平台环境配置</span><br><span class=\"line\">        \"css-loader\": \"^0.25.0\",            //loader css、file、vue</span><br><span class=\"line\">        \"file-loader\": \"^0.9.0\",</span><br><span class=\"line\">        \"vue-loader\": \"^11.1.4\",</span><br><span class=\"line\">        \"vue-template-compiler\": \"^2.2.1\",  //vue 模板编译器</span><br><span class=\"line\">        \"webpack\": \"^2.2.0\",</span><br><span class=\"line\">        \"webpack-dev-server\": \"^2.2.0\"      //热配置</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>package.json 初始添加了一些模块，包括 babel、文件loader、webpack-dev-server 等功能。 <code>npm install</code> 就是从这里添加模块</p>\n<h5 id=\"webpack-config-js\"><a href=\"#webpack-config-js\" class=\"headerlink\" title=\"webpack.config.js\"></a>webpack.config.js</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: <span class=\"string\">'./src/main.js'</span>,   <span class=\"comment\">//入口文件</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'./dist'</span>),    <span class=\"comment\">//输出目录</span></span><br><span class=\"line\">    publicPath: <span class=\"string\">'/dist/'</span>,</span><br><span class=\"line\">    filename: <span class=\"string\">'build.js'</span>                        <span class=\"comment\">//输出文件名</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">    <span class=\"comment\">//loader 装载</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          loaders: &#123;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"comment\">// other vue-loader options go here</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(png|jpg|gif|svg)$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'file-loader'</span>,</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'[name].[ext]?[hash]'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//vue2.0 别名设置</span></span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123;</span><br><span class=\"line\">      <span class=\"string\">'vue$'</span>: <span class=\"string\">'vue/dist/vue.js'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    noInfo: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  performance: &#123;</span><br><span class=\"line\">    hints: <span class=\"literal\">false</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devtool: <span class=\"string\">'#eval-source-map'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-vue-resource-mock-数据\"><a href=\"#添加-vue-resource-mock-数据\" class=\"headerlink\" title=\"添加 vue-resource mock 数据\"></a>添加 vue-resource mock 数据</h3><p>使用 <code>npm install vue-resource --save-dev</code> 安装至项目</p>\n<p>src/main.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App.vue'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  el: <span class=\"string\">'#app'</span>,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)   <span class=\"comment\">//vue 2.0</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>添加 vue-resource</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueResource <span class=\"keyword\">from</span> <span class=\"string\">'vue-resource'</span>;</span><br><span class=\"line\">Vue.use(VueResource);</span><br></pre></td></tr></table></figure>\n<p>src/App.vue</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            seller: &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.seller = data.seller;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-vue-router-功能\"><a href=\"#添加-vue-router-功能\" class=\"headerlink\" title=\"添加 vue-router 功能\"></a>添加 vue-router 功能</h3><p>添加 <code>npm install --save-dev vue-router</code></p>\n<p>在 src/components 下新建 test.vue</p>\n<p>test.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>所有 vue 模板都要有 template(html) 、 script 、 style 三部分  </p>\n<p>src/main.js  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> VueRouter <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span>;</span><br><span class=\"line\">Vue.use(VueRouter);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'index'</span>,</span><br><span class=\"line\">        component: App,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">            &#123;<span class=\"attr\">path</span>: <span class=\"string\">'/test'</span>,<span class=\"attr\">component</span>: test&#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">    <span class=\"string\">'linkActiveClass'</span>: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">    routes</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">    router</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">    router.push(<span class=\"string\">'/test'</span>);  <span class=\"comment\">//直接打开 localhost://test</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app;</span><br></pre></td></tr></table></figure>\n<p>src/App.vue</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>打开 <code>localhost:8080/test</code> 看看内容是否添加了</p>\n"},{"layout":"post","title":"关于清除浮动","date":"2016-08-24T01:00:00.000Z","_content":"\n>参考资料：http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html \n\n### 为什么要清除浮动\n\n一般来说，使用浮动流会使元素脱离普通流，当浮动高度超出包含框（父级高度）时，就会出现包含框无法撑开闭合浮动元素（即：高度坍塌现象）。这往往不是合格的布局，所以需要闭合浮动元素，使其包含框表现出正常的高度。也有些文章指出，清除浮动应该称为闭合浮动，这样命名更准确，其实都是一样的。\n\n\n### 如何清除浮动\n\n#### 在浮动元素末尾添加一个空的标签\n\n```html\n<div>\n　　<div style=\"float: left\"></div>\n　　<div style=\"float: right\"></div>\n　　<div style=\"clear:both\"></div>\n</div>\n```\n\n这是最简单易懂的方法，但是这种做法会产生无意义的空标签。\n\n#### 使用:after 伪元素\n\n由于 IE6-7 不支持 :after，使用 zoom:1 触发 hasLayout  \n\n```html\n<style type=”text/css”>\n.clearfix:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n.clearfix {display: inline-block;} /* for IE/Mac */\n</style>\n<!-[if IE]> \n<style type=\"text/css\">\n.clearfix {\n    zoom: 1;/* triggers hasLayout */\n    display: block;/* resets display for IE/Win */\n}\n</style>\n<![endif]->\n```\n\n鉴于现在老版本的浏览器基本上可以淘汰了，精简代码如下  \n\n```css\n.clearfix:after {content:\".\"; display:block; height:0; visibility:hidden; clear:both; }\n.clearfix { *zoom:1; }\n```\n\n代码详解  \n1. display:block 使生成的元素以块级元素显示,占满剩余空间\n2. height:0 避免生成内容破坏原有布局的高度\n3. visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互\n4. 通过 content:\".\" 生成内容作为最后一个元素，至于 content 里面是点还是其他都是可以的，例如 oocss 里面就有经典的 `content:\"XXXXXXXXXXXXXXXXXXXXX\"` 有些版本可能 content 里面内容为空,不推荐这样做的,firefox 直到 7.0 content:\"\" 仍然会产生额外的空隙\n5. zoom：1 触发 IE hasLayout\n","source":"_posts/clear-float.markdown","raw":"---\nlayout:     post\ntitle:      \"关于清除浮动\"\ndate:       2016-08-24 09:00:00\ntags:\n    - CSS\n---\n\n>参考资料：http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html \n\n### 为什么要清除浮动\n\n一般来说，使用浮动流会使元素脱离普通流，当浮动高度超出包含框（父级高度）时，就会出现包含框无法撑开闭合浮动元素（即：高度坍塌现象）。这往往不是合格的布局，所以需要闭合浮动元素，使其包含框表现出正常的高度。也有些文章指出，清除浮动应该称为闭合浮动，这样命名更准确，其实都是一样的。\n\n\n### 如何清除浮动\n\n#### 在浮动元素末尾添加一个空的标签\n\n```html\n<div>\n　　<div style=\"float: left\"></div>\n　　<div style=\"float: right\"></div>\n　　<div style=\"clear:both\"></div>\n</div>\n```\n\n这是最简单易懂的方法，但是这种做法会产生无意义的空标签。\n\n#### 使用:after 伪元素\n\n由于 IE6-7 不支持 :after，使用 zoom:1 触发 hasLayout  \n\n```html\n<style type=”text/css”>\n.clearfix:after {\n    content: \".\";\n    display: block;\n    height: 0;\n    clear: both;\n    visibility: hidden;\n}\n.clearfix {display: inline-block;} /* for IE/Mac */\n</style>\n<!-[if IE]> \n<style type=\"text/css\">\n.clearfix {\n    zoom: 1;/* triggers hasLayout */\n    display: block;/* resets display for IE/Win */\n}\n</style>\n<![endif]->\n```\n\n鉴于现在老版本的浏览器基本上可以淘汰了，精简代码如下  \n\n```css\n.clearfix:after {content:\".\"; display:block; height:0; visibility:hidden; clear:both; }\n.clearfix { *zoom:1; }\n```\n\n代码详解  \n1. display:block 使生成的元素以块级元素显示,占满剩余空间\n2. height:0 避免生成内容破坏原有布局的高度\n3. visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互\n4. 通过 content:\".\" 生成内容作为最后一个元素，至于 content 里面是点还是其他都是可以的，例如 oocss 里面就有经典的 `content:\"XXXXXXXXXXXXXXXXXXXXX\"` 有些版本可能 content 里面内容为空,不推荐这样做的,firefox 直到 7.0 content:\"\" 仍然会产生额外的空隙\n5. zoom：1 触发 IE hasLayout\n","slug":"clear-float","published":1,"updated":"2018-05-09T07:46:41.271Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40700052mhsnwk25eta","content":"<blockquote>\n<p>参考资料：<a href=\"http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html</a> </p>\n</blockquote>\n<h3 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h3><p>一般来说，使用浮动流会使元素脱离普通流，当浮动高度超出包含框（父级高度）时，就会出现包含框无法撑开闭合浮动元素（即：高度坍塌现象）。这往往不是合格的布局，所以需要闭合浮动元素，使其包含框表现出正常的高度。也有些文章指出，清除浮动应该称为闭合浮动，这样命名更准确，其实都是一样的。</p>\n<h3 id=\"如何清除浮动\"><a href=\"#如何清除浮动\" class=\"headerlink\" title=\"如何清除浮动\"></a>如何清除浮动</h3><h4 id=\"在浮动元素末尾添加一个空的标签\"><a href=\"#在浮动元素末尾添加一个空的标签\" class=\"headerlink\" title=\"在浮动元素末尾添加一个空的标签\"></a>在浮动元素末尾添加一个空的标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是最简单易懂的方法，但是这种做法会产生无意义的空标签。</p>\n<h4 id=\"使用-after-伪元素\"><a href=\"#使用-after-伪元素\" class=\"headerlink\" title=\"使用:after 伪元素\"></a>使用:after 伪元素</h4><p>由于 IE6-7 不支持 :after，使用 zoom:1 触发 hasLayout  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/css”</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix:after &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    content: \".\";</span></span><br><span class=\"line\"><span class=\"undefined\">    display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">    visibility: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix &#123;display: inline-block;&#125; /* for IE/Mac */</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!-[if</span> <span class=\"attr\">IE</span>]&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    zoom: 1;/* triggers hasLayout */</span></span><br><span class=\"line\"><span class=\"undefined\">    display: block;/* resets display for IE/Win */</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">![endif]-</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>鉴于现在老版本的浏览器基本上可以淘汰了，精简代码如下  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>; <span class=\"attribute\">display</span>:block; <span class=\"attribute\">height</span>:<span class=\"number\">0</span>; <span class=\"attribute\">visibility</span>:hidden; <span class=\"attribute\">clear</span>:both; &#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;</span><br></pre></td></tr></table></figure>\n<p>代码详解  </p>\n<ol>\n<li>display:block 使生成的元素以块级元素显示,占满剩余空间</li>\n<li>height:0 避免生成内容破坏原有布局的高度</li>\n<li>visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互</li>\n<li>通过 content:”.” 生成内容作为最后一个元素，至于 content 里面是点还是其他都是可以的，例如 oocss 里面就有经典的 <code>content:&quot;XXXXXXXXXXXXXXXXXXXXX&quot;</code> 有些版本可能 content 里面内容为空,不推荐这样做的,firefox 直到 7.0 content:”” 仍然会产生额外的空隙</li>\n<li>zoom：1 触发 IE hasLayout</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>参考资料：<a href=\"http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/mofish/archive/2012/05/14/2499400.html</a> </p>\n</blockquote>\n<h3 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h3><p>一般来说，使用浮动流会使元素脱离普通流，当浮动高度超出包含框（父级高度）时，就会出现包含框无法撑开闭合浮动元素（即：高度坍塌现象）。这往往不是合格的布局，所以需要闭合浮动元素，使其包含框表现出正常的高度。也有些文章指出，清除浮动应该称为闭合浮动，这样命名更准确，其实都是一样的。</p>\n<h3 id=\"如何清除浮动\"><a href=\"#如何清除浮动\" class=\"headerlink\" title=\"如何清除浮动\"></a>如何清除浮动</h3><h4 id=\"在浮动元素末尾添加一个空的标签\"><a href=\"#在浮动元素末尾添加一个空的标签\" class=\"headerlink\" title=\"在浮动元素末尾添加一个空的标签\"></a>在浮动元素末尾添加一个空的标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: left\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"float: right\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">　　<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">\"clear:both\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是最简单易懂的方法，但是这种做法会产生无意义的空标签。</p>\n<h4 id=\"使用-after-伪元素\"><a href=\"#使用-after-伪元素\" class=\"headerlink\" title=\"使用:after 伪元素\"></a>使用:after 伪元素</h4><p>由于 IE6-7 不支持 :after，使用 zoom:1 触发 hasLayout  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">”text/css”</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix:after &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    content: \".\";</span></span><br><span class=\"line\"><span class=\"undefined\">    display: block;</span></span><br><span class=\"line\"><span class=\"undefined\">    height: 0;</span></span><br><span class=\"line\"><span class=\"undefined\">    clear: both;</span></span><br><span class=\"line\"><span class=\"undefined\">    visibility: hidden;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix &#123;display: inline-block;&#125; /* for IE/Mac */</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">!-[if</span> <span class=\"attr\">IE</span>]&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">.clearfix &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    zoom: 1;/* triggers hasLayout */</span></span><br><span class=\"line\"><span class=\"undefined\">    display: block;/* resets display for IE/Win */</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">![endif]-</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>鉴于现在老版本的浏览器基本上可以淘汰了，精简代码如下  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;<span class=\"attribute\">content</span>:<span class=\"string\">\".\"</span>; <span class=\"attribute\">display</span>:block; <span class=\"attribute\">height</span>:<span class=\"number\">0</span>; <span class=\"attribute\">visibility</span>:hidden; <span class=\"attribute\">clear</span>:both; &#125;</span><br><span class=\"line\">.clearfix &#123; *zoom:1; &#125;</span><br></pre></td></tr></table></figure>\n<p>代码详解  </p>\n<ol>\n<li>display:block 使生成的元素以块级元素显示,占满剩余空间</li>\n<li>height:0 避免生成内容破坏原有布局的高度</li>\n<li>visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互</li>\n<li>通过 content:”.” 生成内容作为最后一个元素，至于 content 里面是点还是其他都是可以的，例如 oocss 里面就有经典的 <code>content:&quot;XXXXXXXXXXXXXXXXXXXXX&quot;</code> 有些版本可能 content 里面内容为空,不推荐这样做的,firefox 直到 7.0 content:”” 仍然会产生额外的空隙</li>\n<li>zoom：1 触发 IE hasLayout</li>\n</ol>\n"},{"layout":"post","title":"手工创建 efi,msr 分区","date":"2017-03-19T04:00:00.000Z","_content":"\n昨天在帮同学装 win10 的时候，不小心（~~不知道那是什么东西~~）把原系统的 efi 和 msr 盘删了，用 WinNTsetup 安装时 EFI PART 总显示红叉，安装后也进不去系统，想想应该是找不到引导。  \n\n网上查了下，应该是用了 UEFI+GPT 方式安装的，他那台华硕电脑主板看着也挺奇葩，没办法只好手动重建 efi msr 盘。  \n\n### 方法如下  \n\n- 进入 pe ，把 C 盘分区删除  \n- cmd 进入命令提示符  \n- 创建 EFI 分区\n    + diskpart\n    + list disk (出现两个盘，是硬盘和U盘。其中一个有剩余空间，就是你删除的分区，选择那个盘)  \n    + select disk x (0或1)  \n    + create partition efi size=100  \n    + assign letter=b  (分配盘符)\n    + format quick fs=FAT32  \n- 创建 msr 分区\n    + create partition msr size=16 (win10 默认)\n- 创建 Recovery 分区\n    + create partition primary size=450\n    + format quick fs=ntfs label=\"Recovery\"\n    + assign letter=\"R\" (分配盘符)\n    + set id=\"de94bba4-06d1-4d40-a16a-bfd50179d6ac\"\n    + gpt attributes=0x8000000000000001 ( 8 和 1之间有14个0)\n- 用 diskgenius 软件格式化 C 盘\n  \n打开 WinNTsetup 发现 EFI PART 红叉消失，重装后可进入系统，搞定。\n  \n  \n### 参考文章\n\n- <a href=\"http://bbs.kafan.cn/thread-1845301-1-1.html\" target=\"_blank\">用diskgenius手工创建efi、msr分区问题</a>\n- <a href=\"https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions\" target=\"_blank\">UEFI/GPT-based hard drive partitions</a>\n","source":"_posts/create-efi-msr.markdown","raw":"---\nlayout:     post\ntitle:      \"手工创建 efi,msr 分区\"\ndate:       2017-03-19 12:00:00\ntags:\n    - System\n---\n\n昨天在帮同学装 win10 的时候，不小心（~~不知道那是什么东西~~）把原系统的 efi 和 msr 盘删了，用 WinNTsetup 安装时 EFI PART 总显示红叉，安装后也进不去系统，想想应该是找不到引导。  \n\n网上查了下，应该是用了 UEFI+GPT 方式安装的，他那台华硕电脑主板看着也挺奇葩，没办法只好手动重建 efi msr 盘。  \n\n### 方法如下  \n\n- 进入 pe ，把 C 盘分区删除  \n- cmd 进入命令提示符  \n- 创建 EFI 分区\n    + diskpart\n    + list disk (出现两个盘，是硬盘和U盘。其中一个有剩余空间，就是你删除的分区，选择那个盘)  \n    + select disk x (0或1)  \n    + create partition efi size=100  \n    + assign letter=b  (分配盘符)\n    + format quick fs=FAT32  \n- 创建 msr 分区\n    + create partition msr size=16 (win10 默认)\n- 创建 Recovery 分区\n    + create partition primary size=450\n    + format quick fs=ntfs label=\"Recovery\"\n    + assign letter=\"R\" (分配盘符)\n    + set id=\"de94bba4-06d1-4d40-a16a-bfd50179d6ac\"\n    + gpt attributes=0x8000000000000001 ( 8 和 1之间有14个0)\n- 用 diskgenius 软件格式化 C 盘\n  \n打开 WinNTsetup 发现 EFI PART 红叉消失，重装后可进入系统，搞定。\n  \n  \n### 参考文章\n\n- <a href=\"http://bbs.kafan.cn/thread-1845301-1-1.html\" target=\"_blank\">用diskgenius手工创建efi、msr分区问题</a>\n- <a href=\"https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions\" target=\"_blank\">UEFI/GPT-based hard drive partitions</a>\n","slug":"create-efi-msr","published":1,"updated":"2018-05-09T08:20:39.401Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40800062mhs1xp2i6pn","content":"<p>昨天在帮同学装 win10 的时候，不小心（<del>不知道那是什么东西</del>）把原系统的 efi 和 msr 盘删了，用 WinNTsetup 安装时 EFI PART 总显示红叉，安装后也进不去系统，想想应该是找不到引导。  </p>\n<p>网上查了下，应该是用了 UEFI+GPT 方式安装的，他那台华硕电脑主板看着也挺奇葩，没办法只好手动重建 efi msr 盘。  </p>\n<h3 id=\"方法如下\"><a href=\"#方法如下\" class=\"headerlink\" title=\"方法如下\"></a>方法如下</h3><ul>\n<li>进入 pe ，把 C 盘分区删除  </li>\n<li>cmd 进入命令提示符  </li>\n<li>创建 EFI 分区<ul>\n<li>diskpart</li>\n<li>list disk (出现两个盘，是硬盘和U盘。其中一个有剩余空间，就是你删除的分区，选择那个盘)  </li>\n<li>select disk x (0或1)  </li>\n<li>create partition efi size=100  </li>\n<li>assign letter=b  (分配盘符)</li>\n<li>format quick fs=FAT32  </li>\n</ul>\n</li>\n<li>创建 msr 分区<ul>\n<li>create partition msr size=16 (win10 默认)</li>\n</ul>\n</li>\n<li>创建 Recovery 分区<ul>\n<li>create partition primary size=450</li>\n<li>format quick fs=ntfs label=”Recovery”</li>\n<li>assign letter=”R” (分配盘符)</li>\n<li>set id=”de94bba4-06d1-4d40-a16a-bfd50179d6ac”</li>\n<li>gpt attributes=0x8000000000000001 ( 8 和 1之间有14个0)</li>\n</ul>\n</li>\n<li>用 diskgenius 软件格式化 C 盘</li>\n</ul>\n<p>打开 WinNTsetup 发现 EFI PART 红叉消失，重装后可进入系统，搞定。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://bbs.kafan.cn/thread-1845301-1-1.html\" target=\"_blank\">用diskgenius手工创建efi、msr分区问题</a></li>\n<li><a href=\"https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions\" target=\"_blank\">UEFI/GPT-based hard drive partitions</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天在帮同学装 win10 的时候，不小心（<del>不知道那是什么东西</del>）把原系统的 efi 和 msr 盘删了，用 WinNTsetup 安装时 EFI PART 总显示红叉，安装后也进不去系统，想想应该是找不到引导。  </p>\n<p>网上查了下，应该是用了 UEFI+GPT 方式安装的，他那台华硕电脑主板看着也挺奇葩，没办法只好手动重建 efi msr 盘。  </p>\n<h3 id=\"方法如下\"><a href=\"#方法如下\" class=\"headerlink\" title=\"方法如下\"></a>方法如下</h3><ul>\n<li>进入 pe ，把 C 盘分区删除  </li>\n<li>cmd 进入命令提示符  </li>\n<li>创建 EFI 分区<ul>\n<li>diskpart</li>\n<li>list disk (出现两个盘，是硬盘和U盘。其中一个有剩余空间，就是你删除的分区，选择那个盘)  </li>\n<li>select disk x (0或1)  </li>\n<li>create partition efi size=100  </li>\n<li>assign letter=b  (分配盘符)</li>\n<li>format quick fs=FAT32  </li>\n</ul>\n</li>\n<li>创建 msr 分区<ul>\n<li>create partition msr size=16 (win10 默认)</li>\n</ul>\n</li>\n<li>创建 Recovery 分区<ul>\n<li>create partition primary size=450</li>\n<li>format quick fs=ntfs label=”Recovery”</li>\n<li>assign letter=”R” (分配盘符)</li>\n<li>set id=”de94bba4-06d1-4d40-a16a-bfd50179d6ac”</li>\n<li>gpt attributes=0x8000000000000001 ( 8 和 1之间有14个0)</li>\n</ul>\n</li>\n<li>用 diskgenius 软件格式化 C 盘</li>\n</ul>\n<p>打开 WinNTsetup 发现 EFI PART 红叉消失，重装后可进入系统，搞定。</p>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://bbs.kafan.cn/thread-1845301-1-1.html\" target=\"_blank\">用diskgenius手工创建efi、msr分区问题</a></li>\n<li><a href=\"https://msdn.microsoft.com/windows/hardware/commercialize/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions\" target=\"_blank\">UEFI/GPT-based hard drive partitions</a></li>\n</ul>\n"},{"layout":"post","title":"Raspberry 系统安装及必要配置","date":"2016-08-18T05:00:00.000Z","_content":"\n### 写入系统\n\n安装 `win32diskimager-v0.9-binary` 软件，写入镜像（Img格式）\n\n### 用网线连接电脑\n\n- 打开网络共享中心-更改适配器设置-无线网络连接-共享-允许其他网络用户通过计算机连接-选择本地连接\n- cmd 里输入 `arp -a` 看到 192.168.137.1 下有个动态连接 IP\n- 打开 putty，输入刚才那个动态 IP，端口选 22，连接类型选 SSH。帐号：pi，密码：raspberry\n\n### 扩展可用空间\n输入 `sudo raspi-config` 进入高级系统设置，选择第一项 Expand Filesystem 扩展 SD 卡上可用的空间，不然以后会有很多大软件，不能安装（提示空间不足，例如 mysql）。扩展之后可以通过 `df -h` 命令看到效果\n\n### 设置静态IP\n\n输入 `sudo nano /etc/network/interfaces`  \n\n```vim\nauto lo\niface lo inet loopback\niface eth0 inet static\naddress 192.168.191.2 #我无线网卡连接的 Wifi Ip\nnetmask 255.255.255.0\ngateway 192.168.191.1\nauto wlan0\niface wlan0 inet static\naddress 192.168.191.2\nnetmask 255.255.255.0\ngateway 192.168.191.1\nwpa-ssid 要连接的wlan ssid\nwpa-psk wlan密码\n```\n\nCtrl+X 保存退出\n\n### 使用VNC远程查看桌面\n输入命令\n\n    sudo apt-get update\n    sudo apt-get install tightvncserver\n\n运行命令 `tightvncserver`  \n设置密码  \n之后在电脑上安装 VNC 客户端  \n输入 IP+:1 例如：192.168.191.2:1\n","source":"_posts/Raspberry-Setting.markdown","raw":"---\nlayout:     post\ntitle:      \"Raspberry 系统安装及必要配置\"\ndate:       2016-08-18 13:00:00\ntags:\n    - System\n    - Raspberry\n---\n\n### 写入系统\n\n安装 `win32diskimager-v0.9-binary` 软件，写入镜像（Img格式）\n\n### 用网线连接电脑\n\n- 打开网络共享中心-更改适配器设置-无线网络连接-共享-允许其他网络用户通过计算机连接-选择本地连接\n- cmd 里输入 `arp -a` 看到 192.168.137.1 下有个动态连接 IP\n- 打开 putty，输入刚才那个动态 IP，端口选 22，连接类型选 SSH。帐号：pi，密码：raspberry\n\n### 扩展可用空间\n输入 `sudo raspi-config` 进入高级系统设置，选择第一项 Expand Filesystem 扩展 SD 卡上可用的空间，不然以后会有很多大软件，不能安装（提示空间不足，例如 mysql）。扩展之后可以通过 `df -h` 命令看到效果\n\n### 设置静态IP\n\n输入 `sudo nano /etc/network/interfaces`  \n\n```vim\nauto lo\niface lo inet loopback\niface eth0 inet static\naddress 192.168.191.2 #我无线网卡连接的 Wifi Ip\nnetmask 255.255.255.0\ngateway 192.168.191.1\nauto wlan0\niface wlan0 inet static\naddress 192.168.191.2\nnetmask 255.255.255.0\ngateway 192.168.191.1\nwpa-ssid 要连接的wlan ssid\nwpa-psk wlan密码\n```\n\nCtrl+X 保存退出\n\n### 使用VNC远程查看桌面\n输入命令\n\n    sudo apt-get update\n    sudo apt-get install tightvncserver\n\n运行命令 `tightvncserver`  \n设置密码  \n之后在电脑上安装 VNC 客户端  \n输入 IP+:1 例如：192.168.191.2:1\n","slug":"Raspberry-Setting","published":1,"updated":"2018-05-09T06:46:55.404Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40a00092mhstqazm3lx","content":"<h3 id=\"写入系统\"><a href=\"#写入系统\" class=\"headerlink\" title=\"写入系统\"></a>写入系统</h3><p>安装 <code>win32diskimager-v0.9-binary</code> 软件，写入镜像（Img格式）</p>\n<h3 id=\"用网线连接电脑\"><a href=\"#用网线连接电脑\" class=\"headerlink\" title=\"用网线连接电脑\"></a>用网线连接电脑</h3><ul>\n<li>打开网络共享中心-更改适配器设置-无线网络连接-共享-允许其他网络用户通过计算机连接-选择本地连接</li>\n<li>cmd 里输入 <code>arp -a</code> 看到 192.168.137.1 下有个动态连接 IP</li>\n<li>打开 putty，输入刚才那个动态 IP，端口选 22，连接类型选 SSH。帐号：pi，密码：raspberry</li>\n</ul>\n<h3 id=\"扩展可用空间\"><a href=\"#扩展可用空间\" class=\"headerlink\" title=\"扩展可用空间\"></a>扩展可用空间</h3><p>输入 <code>sudo raspi-config</code> 进入高级系统设置，选择第一项 Expand Filesystem 扩展 SD 卡上可用的空间，不然以后会有很多大软件，不能安装（提示空间不足，例如 mysql）。扩展之后可以通过 <code>df -h</code> 命令看到效果</p>\n<h3 id=\"设置静态IP\"><a href=\"#设置静态IP\" class=\"headerlink\" title=\"设置静态IP\"></a>设置静态IP</h3><p>输入 <code>sudo nano /etc/network/interfaces</code>  </p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto <span class=\"keyword\">lo</span></span><br><span class=\"line\">iface <span class=\"keyword\">lo</span> inet loopback</span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address <span class=\"number\">192.168</span>.<span class=\"number\">191.2</span> #我无线网卡连接的 Wifi Ip</span><br><span class=\"line\">netmask <span class=\"number\">255.255</span>.<span class=\"number\">255.0</span></span><br><span class=\"line\">gateway <span class=\"number\">192.168</span>.<span class=\"number\">191.1</span></span><br><span class=\"line\">auto wlan0</span><br><span class=\"line\">iface wlan0 inet static</span><br><span class=\"line\">address <span class=\"number\">192.168</span>.<span class=\"number\">191.2</span></span><br><span class=\"line\">netmask <span class=\"number\">255.255</span>.<span class=\"number\">255.0</span></span><br><span class=\"line\">gateway <span class=\"number\">192.168</span>.<span class=\"number\">191.1</span></span><br><span class=\"line\">wpa-ssid 要连接的wlan ssid</span><br><span class=\"line\">wpa-psk wlan密码</span><br></pre></td></tr></table></figure>\n<p>Ctrl+X 保存退出</p>\n<h3 id=\"使用VNC远程查看桌面\"><a href=\"#使用VNC远程查看桌面\" class=\"headerlink\" title=\"使用VNC远程查看桌面\"></a>使用VNC远程查看桌面</h3><p>输入命令</p>\n<pre><code>sudo apt-get update\nsudo apt-get install tightvncserver\n</code></pre><p>运行命令 <code>tightvncserver</code><br>设置密码<br>之后在电脑上安装 VNC 客户端<br>输入 IP+:1 例如：192.168.191.2:1</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"写入系统\"><a href=\"#写入系统\" class=\"headerlink\" title=\"写入系统\"></a>写入系统</h3><p>安装 <code>win32diskimager-v0.9-binary</code> 软件，写入镜像（Img格式）</p>\n<h3 id=\"用网线连接电脑\"><a href=\"#用网线连接电脑\" class=\"headerlink\" title=\"用网线连接电脑\"></a>用网线连接电脑</h3><ul>\n<li>打开网络共享中心-更改适配器设置-无线网络连接-共享-允许其他网络用户通过计算机连接-选择本地连接</li>\n<li>cmd 里输入 <code>arp -a</code> 看到 192.168.137.1 下有个动态连接 IP</li>\n<li>打开 putty，输入刚才那个动态 IP，端口选 22，连接类型选 SSH。帐号：pi，密码：raspberry</li>\n</ul>\n<h3 id=\"扩展可用空间\"><a href=\"#扩展可用空间\" class=\"headerlink\" title=\"扩展可用空间\"></a>扩展可用空间</h3><p>输入 <code>sudo raspi-config</code> 进入高级系统设置，选择第一项 Expand Filesystem 扩展 SD 卡上可用的空间，不然以后会有很多大软件，不能安装（提示空间不足，例如 mysql）。扩展之后可以通过 <code>df -h</code> 命令看到效果</p>\n<h3 id=\"设置静态IP\"><a href=\"#设置静态IP\" class=\"headerlink\" title=\"设置静态IP\"></a>设置静态IP</h3><p>输入 <code>sudo nano /etc/network/interfaces</code>  </p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto <span class=\"keyword\">lo</span></span><br><span class=\"line\">iface <span class=\"keyword\">lo</span> inet loopback</span><br><span class=\"line\">iface eth0 inet static</span><br><span class=\"line\">address <span class=\"number\">192.168</span>.<span class=\"number\">191.2</span> #我无线网卡连接的 Wifi Ip</span><br><span class=\"line\">netmask <span class=\"number\">255.255</span>.<span class=\"number\">255.0</span></span><br><span class=\"line\">gateway <span class=\"number\">192.168</span>.<span class=\"number\">191.1</span></span><br><span class=\"line\">auto wlan0</span><br><span class=\"line\">iface wlan0 inet static</span><br><span class=\"line\">address <span class=\"number\">192.168</span>.<span class=\"number\">191.2</span></span><br><span class=\"line\">netmask <span class=\"number\">255.255</span>.<span class=\"number\">255.0</span></span><br><span class=\"line\">gateway <span class=\"number\">192.168</span>.<span class=\"number\">191.1</span></span><br><span class=\"line\">wpa-ssid 要连接的wlan ssid</span><br><span class=\"line\">wpa-psk wlan密码</span><br></pre></td></tr></table></figure>\n<p>Ctrl+X 保存退出</p>\n<h3 id=\"使用VNC远程查看桌面\"><a href=\"#使用VNC远程查看桌面\" class=\"headerlink\" title=\"使用VNC远程查看桌面\"></a>使用VNC远程查看桌面</h3><p>输入命令</p>\n<pre><code>sudo apt-get update\nsudo apt-get install tightvncserver\n</code></pre><p>运行命令 <code>tightvncserver</code><br>设置密码<br>之后在电脑上安装 VNC 客户端<br>输入 IP+:1 例如：192.168.191.2:1</p>\n"},{"layout":"post","title":"Github 笔记","date":"2017-03-24T14:45:00.000Z","_content":"\n<a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\">新手指南</a>\n\n### git 配置\n  \n下载完 git 之后，需要进行一些 SSH，邮箱用户等配置  \n\n##### SSH\n\n什么是 SSH？简单点说，SSH是一种网络协议，用于计算机之间的加密登录。而 Github 就是利用你的 SSH 来对你进行身份验证。所以想在 Github 上提交代码，第一步就是添加 ssh key 配置。  \n\n在 Windows ，安装 Git 后会自动安装 SSH。  \n  \n- cmd 输入 ssh，看是否安装成功\n- `ssh-keygen -t rsa` 指定 rsa 算法生成密匙，然后生成 id_rsa 和 id_rsa.pub  \n- 打开 Github 界面，settings —— SSH and GPG keys —— NEW SSH key  \n- 把 id_rsa.pub 内容添加进来\n- cmd 输入 `ssh -T git@github.com` 进行测试\n\n##### 设置邮箱与用户名  \n\n    git config —global user.name “name”  \n    git config —global user.email “name@gmail.com”\n\n### 术语解释  \n\n##### Repository：仓库\n\n一个仓库包括了所有的版本信息、所有的分支和标记信息  \n\n- git init 新建仓库\n- git clone 克隆分区到本地\n\n##### 工作流\n\n本地仓库由 git 维护的三棵「树」。第一个是工作目录，第二个是暂存区，最后是 HEAD，指向最后一次提交结果。\n\n##### Workspace：工作区 \n\n- 执行 `git add .` 命令相当于把代码改动提交到暂存区  \n- `git pull` 将远程仓库的数据拉到本地仓库并合并    \n\n##### Index：暂存区\n- `git commit -m '说明'` 相当于把改动提交到了当前分支(HEAD)  \n\n##### Branches：分支\n  \n可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。  \n\n    git checkout -b [baranch-name] 创建新分支\n    git checkout master  切换回主分支\n    git branch -d [baranch-name]  删除分支\n    git push origin [branch-name]  上传分支\n\n##### Tags：标记\n\n- 标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。\n- `git tag 1.0.0 1b2e1d63ff`  创建一个叫 1.0.0 的标签\n- 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符，可用 `git log` 获取提交的 ID\n\n### 上传\n\n以 test 项目为例。  \n在本地执行 `git clone https://github.com/pansy-cx/test.git` \n\n这样就把 test 项目 clone 到了本地，这个时候该项目本身就已经是一个git 仓库了，不需要执行 git init 进行初始化，而且甚至都已经关联好了远程仓库，我们只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit 。  \n接下来执行代码：  \n\n    git add .     提出更改 添加到暂存区\n    git commit -m 'commit'  提交到 HEAD\n    git push origin master  将改动提交到远端仓库\n    如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器(test 项目)，你可以使用如下命令添加:\n    git remote add origin https://github.com/pansy-cx/test.git\n\n如果执行 git remote 这步出现错误：\n\n    fatal: remote origin already exists\n\n意思是远程仓库已经存在    \n\n执行以下语句  \n\n    git remote rm origin\n  \n把原来仓库删除  \n再重复执行一次  `git remote add origin https://github.com/pansy-cx/test.git` 即可  \n如果执行 git push 这步出现错误：  \n\n    error:failed to push som refs to.......\n\n先把远程服务器 github 上面的文件 pull(拉) 下来，再 push(推) 上去。  \n\n执行以下语句  \n\n    git pull origin master\n\n再重复执行 `git push origin master`\n","source":"_posts/github-notepad.markdown","raw":"---\nlayout:     post\ntitle:      \"Github 笔记\"\ndate:       2017-03-24 22:45:00\ntags:\n    - Git\n---\n\n<a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\">新手指南</a>\n\n### git 配置\n  \n下载完 git 之后，需要进行一些 SSH，邮箱用户等配置  \n\n##### SSH\n\n什么是 SSH？简单点说，SSH是一种网络协议，用于计算机之间的加密登录。而 Github 就是利用你的 SSH 来对你进行身份验证。所以想在 Github 上提交代码，第一步就是添加 ssh key 配置。  \n\n在 Windows ，安装 Git 后会自动安装 SSH。  \n  \n- cmd 输入 ssh，看是否安装成功\n- `ssh-keygen -t rsa` 指定 rsa 算法生成密匙，然后生成 id_rsa 和 id_rsa.pub  \n- 打开 Github 界面，settings —— SSH and GPG keys —— NEW SSH key  \n- 把 id_rsa.pub 内容添加进来\n- cmd 输入 `ssh -T git@github.com` 进行测试\n\n##### 设置邮箱与用户名  \n\n    git config —global user.name “name”  \n    git config —global user.email “name@gmail.com”\n\n### 术语解释  \n\n##### Repository：仓库\n\n一个仓库包括了所有的版本信息、所有的分支和标记信息  \n\n- git init 新建仓库\n- git clone 克隆分区到本地\n\n##### 工作流\n\n本地仓库由 git 维护的三棵「树」。第一个是工作目录，第二个是暂存区，最后是 HEAD，指向最后一次提交结果。\n\n##### Workspace：工作区 \n\n- 执行 `git add .` 命令相当于把代码改动提交到暂存区  \n- `git pull` 将远程仓库的数据拉到本地仓库并合并    \n\n##### Index：暂存区\n- `git commit -m '说明'` 相当于把改动提交到了当前分支(HEAD)  \n\n##### Branches：分支\n  \n可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。  \n\n    git checkout -b [baranch-name] 创建新分支\n    git checkout master  切换回主分支\n    git branch -d [baranch-name]  删除分支\n    git push origin [branch-name]  上传分支\n\n##### Tags：标记\n\n- 标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。\n- `git tag 1.0.0 1b2e1d63ff`  创建一个叫 1.0.0 的标签\n- 1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符，可用 `git log` 获取提交的 ID\n\n### 上传\n\n以 test 项目为例。  \n在本地执行 `git clone https://github.com/pansy-cx/test.git` \n\n这样就把 test 项目 clone 到了本地，这个时候该项目本身就已经是一个git 仓库了，不需要执行 git init 进行初始化，而且甚至都已经关联好了远程仓库，我们只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit 。  \n接下来执行代码：  \n\n    git add .     提出更改 添加到暂存区\n    git commit -m 'commit'  提交到 HEAD\n    git push origin master  将改动提交到远端仓库\n    如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器(test 项目)，你可以使用如下命令添加:\n    git remote add origin https://github.com/pansy-cx/test.git\n\n如果执行 git remote 这步出现错误：\n\n    fatal: remote origin already exists\n\n意思是远程仓库已经存在    \n\n执行以下语句  \n\n    git remote rm origin\n  \n把原来仓库删除  \n再重复执行一次  `git remote add origin https://github.com/pansy-cx/test.git` 即可  \n如果执行 git push 这步出现错误：  \n\n    error:failed to push som refs to.......\n\n先把远程服务器 github 上面的文件 pull(拉) 下来，再 push(推) 上去。  \n\n执行以下语句  \n\n    git pull origin master\n\n再重复执行 `git push origin master`\n","slug":"github-notepad","published":1,"updated":"2018-05-09T08:28:58.122Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40b000a2mhsv7iif9s4","content":"<p><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\">新手指南</a></p>\n<h3 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h3><p>下载完 git 之后，需要进行一些 SSH，邮箱用户等配置  </p>\n<h5 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h5><p>什么是 SSH？简单点说，SSH是一种网络协议，用于计算机之间的加密登录。而 Github 就是利用你的 SSH 来对你进行身份验证。所以想在 Github 上提交代码，第一步就是添加 ssh key 配置。  </p>\n<p>在 Windows ，安装 Git 后会自动安装 SSH。  </p>\n<ul>\n<li>cmd 输入 ssh，看是否安装成功</li>\n<li><code>ssh-keygen -t rsa</code> 指定 rsa 算法生成密匙，然后生成 id_rsa 和 id_rsa.pub  </li>\n<li>打开 Github 界面，settings —— SSH and GPG keys —— NEW SSH key  </li>\n<li>把 id_rsa.pub 内容添加进来</li>\n<li>cmd 输入 <code>ssh -T git@github.com</code> 进行测试</li>\n</ul>\n<h5 id=\"设置邮箱与用户名\"><a href=\"#设置邮箱与用户名\" class=\"headerlink\" title=\"设置邮箱与用户名\"></a>设置邮箱与用户名</h5><pre><code>git config —global user.name “name”  \ngit config —global user.email “name@gmail.com”\n</code></pre><h3 id=\"术语解释\"><a href=\"#术语解释\" class=\"headerlink\" title=\"术语解释\"></a>术语解释</h3><h5 id=\"Repository：仓库\"><a href=\"#Repository：仓库\" class=\"headerlink\" title=\"Repository：仓库\"></a>Repository：仓库</h5><p>一个仓库包括了所有的版本信息、所有的分支和标记信息  </p>\n<ul>\n<li>git init 新建仓库</li>\n<li>git clone 克隆分区到本地</li>\n</ul>\n<h5 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h5><p>本地仓库由 git 维护的三棵「树」。第一个是工作目录，第二个是暂存区，最后是 HEAD，指向最后一次提交结果。</p>\n<h5 id=\"Workspace：工作区\"><a href=\"#Workspace：工作区\" class=\"headerlink\" title=\"Workspace：工作区\"></a>Workspace：工作区</h5><ul>\n<li>执行 <code>git add .</code> 命令相当于把代码改动提交到暂存区  </li>\n<li><code>git pull</code> 将远程仓库的数据拉到本地仓库并合并    </li>\n</ul>\n<h5 id=\"Index：暂存区\"><a href=\"#Index：暂存区\" class=\"headerlink\" title=\"Index：暂存区\"></a>Index：暂存区</h5><ul>\n<li><code>git commit -m &#39;说明&#39;</code> 相当于把改动提交到了当前分支(HEAD)  </li>\n</ul>\n<h5 id=\"Branches：分支\"><a href=\"#Branches：分支\" class=\"headerlink\" title=\"Branches：分支\"></a>Branches：分支</h5><p>可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。  </p>\n<pre><code>git checkout -b [baranch-name] 创建新分支\ngit checkout master  切换回主分支\ngit branch -d [baranch-name]  删除分支\ngit push origin [branch-name]  上传分支\n</code></pre><h5 id=\"Tags：标记\"><a href=\"#Tags：标记\" class=\"headerlink\" title=\"Tags：标记\"></a>Tags：标记</h5><ul>\n<li>标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。</li>\n<li><code>git tag 1.0.0 1b2e1d63ff</code>  创建一个叫 1.0.0 的标签</li>\n<li>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符，可用 <code>git log</code> 获取提交的 ID</li>\n</ul>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>以 test 项目为例。<br>在本地执行 <code>git clone https://github.com/pansy-cx/test.git</code> </p>\n<p>这样就把 test 项目 clone 到了本地，这个时候该项目本身就已经是一个git 仓库了，不需要执行 git init 进行初始化，而且甚至都已经关联好了远程仓库，我们只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit 。<br>接下来执行代码：  </p>\n<pre><code>git add .     提出更改 添加到暂存区\ngit commit -m &apos;commit&apos;  提交到 HEAD\ngit push origin master  将改动提交到远端仓库\n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器(test 项目)，你可以使用如下命令添加:\ngit remote add origin https://github.com/pansy-cx/test.git\n</code></pre><p>如果执行 git remote 这步出现错误：</p>\n<pre><code>fatal: remote origin already exists\n</code></pre><p>意思是远程仓库已经存在    </p>\n<p>执行以下语句  </p>\n<pre><code>git remote rm origin\n</code></pre><p>把原来仓库删除<br>再重复执行一次  <code>git remote add origin https://github.com/pansy-cx/test.git</code> 即可<br>如果执行 git push 这步出现错误：  </p>\n<pre><code>error:failed to push som refs to.......\n</code></pre><p>先把远程服务器 github 上面的文件 pull(拉) 下来，再 push(推) 上去。  </p>\n<p>执行以下语句  </p>\n<pre><code>git pull origin master\n</code></pre><p>再重复执行 <code>git push origin master</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://rogerdudler.github.io/git-guide/index.zh.html\" target=\"_blank\">新手指南</a></p>\n<h3 id=\"git-配置\"><a href=\"#git-配置\" class=\"headerlink\" title=\"git 配置\"></a>git 配置</h3><p>下载完 git 之后，需要进行一些 SSH，邮箱用户等配置  </p>\n<h5 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h5><p>什么是 SSH？简单点说，SSH是一种网络协议，用于计算机之间的加密登录。而 Github 就是利用你的 SSH 来对你进行身份验证。所以想在 Github 上提交代码，第一步就是添加 ssh key 配置。  </p>\n<p>在 Windows ，安装 Git 后会自动安装 SSH。  </p>\n<ul>\n<li>cmd 输入 ssh，看是否安装成功</li>\n<li><code>ssh-keygen -t rsa</code> 指定 rsa 算法生成密匙，然后生成 id_rsa 和 id_rsa.pub  </li>\n<li>打开 Github 界面，settings —— SSH and GPG keys —— NEW SSH key  </li>\n<li>把 id_rsa.pub 内容添加进来</li>\n<li>cmd 输入 <code>ssh -T git@github.com</code> 进行测试</li>\n</ul>\n<h5 id=\"设置邮箱与用户名\"><a href=\"#设置邮箱与用户名\" class=\"headerlink\" title=\"设置邮箱与用户名\"></a>设置邮箱与用户名</h5><pre><code>git config —global user.name “name”  \ngit config —global user.email “name@gmail.com”\n</code></pre><h3 id=\"术语解释\"><a href=\"#术语解释\" class=\"headerlink\" title=\"术语解释\"></a>术语解释</h3><h5 id=\"Repository：仓库\"><a href=\"#Repository：仓库\" class=\"headerlink\" title=\"Repository：仓库\"></a>Repository：仓库</h5><p>一个仓库包括了所有的版本信息、所有的分支和标记信息  </p>\n<ul>\n<li>git init 新建仓库</li>\n<li>git clone 克隆分区到本地</li>\n</ul>\n<h5 id=\"工作流\"><a href=\"#工作流\" class=\"headerlink\" title=\"工作流\"></a>工作流</h5><p>本地仓库由 git 维护的三棵「树」。第一个是工作目录，第二个是暂存区，最后是 HEAD，指向最后一次提交结果。</p>\n<h5 id=\"Workspace：工作区\"><a href=\"#Workspace：工作区\" class=\"headerlink\" title=\"Workspace：工作区\"></a>Workspace：工作区</h5><ul>\n<li>执行 <code>git add .</code> 命令相当于把代码改动提交到暂存区  </li>\n<li><code>git pull</code> 将远程仓库的数据拉到本地仓库并合并    </li>\n</ul>\n<h5 id=\"Index：暂存区\"><a href=\"#Index：暂存区\" class=\"headerlink\" title=\"Index：暂存区\"></a>Index：暂存区</h5><ul>\n<li><code>git commit -m &#39;说明&#39;</code> 相当于把改动提交到了当前分支(HEAD)  </li>\n</ul>\n<h5 id=\"Branches：分支\"><a href=\"#Branches：分支\" class=\"headerlink\" title=\"Branches：分支\"></a>Branches：分支</h5><p>可以从已有的代码中生成一个新的分支，这个分支与剩余的分支完全独立。默认的分支往往是叫master。  </p>\n<pre><code>git checkout -b [baranch-name] 创建新分支\ngit checkout master  切换回主分支\ngit branch -d [baranch-name]  删除分支\ngit push origin [branch-name]  上传分支\n</code></pre><h5 id=\"Tags：标记\"><a href=\"#Tags：标记\" class=\"headerlink\" title=\"Tags：标记\"></a>Tags：标记</h5><ul>\n<li>标记指的是某个分支某个特定时间点的状态。通过标记，可以很方便的切换到标记时的状态。</li>\n<li><code>git tag 1.0.0 1b2e1d63ff</code>  创建一个叫 1.0.0 的标签</li>\n<li>1b2e1d63ff 是你想要标记的提交 ID 的前 10 位字符，可用 <code>git log</code> 获取提交的 ID</li>\n</ul>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>以 test 项目为例。<br>在本地执行 <code>git clone https://github.com/pansy-cx/test.git</code> </p>\n<p>这样就把 test 项目 clone 到了本地，这个时候该项目本身就已经是一个git 仓库了，不需要执行 git init 进行初始化，而且甚至都已经关联好了远程仓库，我们只需要在这个 test 目录下任意修改或者添加文件，然后进行 commit 。<br>接下来执行代码：  </p>\n<pre><code>git add .     提出更改 添加到暂存区\ngit commit -m &apos;commit&apos;  提交到 HEAD\ngit push origin master  将改动提交到远端仓库\n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器(test 项目)，你可以使用如下命令添加:\ngit remote add origin https://github.com/pansy-cx/test.git\n</code></pre><p>如果执行 git remote 这步出现错误：</p>\n<pre><code>fatal: remote origin already exists\n</code></pre><p>意思是远程仓库已经存在    </p>\n<p>执行以下语句  </p>\n<pre><code>git remote rm origin\n</code></pre><p>把原来仓库删除<br>再重复执行一次  <code>git remote add origin https://github.com/pansy-cx/test.git</code> 即可<br>如果执行 git push 这步出现错误：  </p>\n<pre><code>error:failed to push som refs to.......\n</code></pre><p>先把远程服务器 github 上面的文件 pull(拉) 下来，再 push(推) 上去。  </p>\n<p>执行以下语句  </p>\n<pre><code>git pull origin master\n</code></pre><p>再重复执行 <code>git push origin master</code></p>\n"},{"layout":"post","title":"Firefox 下不支持 event 事件的解决方案","date":"2016-08-23T04:30:00.000Z","_content":"\n以前写事件兼容代码。从来都是一句话 `var oEvent = ev || event` 就能解决的事情  \n可是用面向对象写了个事件对象在 Firefox 下却会报错  \nalert 一下 event 发现在 Firefox 下是未定义。兼容代码的写法也不管用了  \n\n解决方案。将兼容性代码改成 `var oEvent = ev || window.event || arguments.callee.caller.arguments[0]` 即可解决问题\n","source":"_posts/firefox-event.markdown","raw":"---\nlayout:     post\ntitle:      \"Firefox 下不支持 event 事件的解决方案\"\ndate:       2016-08-23 12:30:00\ntags:\n    - JavaScript\n---\n\n以前写事件兼容代码。从来都是一句话 `var oEvent = ev || event` 就能解决的事情  \n可是用面向对象写了个事件对象在 Firefox 下却会报错  \nalert 一下 event 发现在 Firefox 下是未定义。兼容代码的写法也不管用了  \n\n解决方案。将兼容性代码改成 `var oEvent = ev || window.event || arguments.callee.caller.arguments[0]` 即可解决问题\n","slug":"firefox-event","published":1,"updated":"2018-05-09T07:00:43.457Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40d000c2mhs43nm3slw","content":"<p>以前写事件兼容代码。从来都是一句话 <code>var oEvent = ev || event</code> 就能解决的事情<br>可是用面向对象写了个事件对象在 Firefox 下却会报错<br>alert 一下 event 发现在 Firefox 下是未定义。兼容代码的写法也不管用了  </p>\n<p>解决方案。将兼容性代码改成 <code>var oEvent = ev || window.event || arguments.callee.caller.arguments[0]</code> 即可解决问题</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以前写事件兼容代码。从来都是一句话 <code>var oEvent = ev || event</code> 就能解决的事情<br>可是用面向对象写了个事件对象在 Firefox 下却会报错<br>alert 一下 event 发现在 Firefox 下是未定义。兼容代码的写法也不管用了  </p>\n<p>解决方案。将兼容性代码改成 <code>var oEvent = ev || window.event || arguments.callee.caller.arguments[0]</code> 即可解决问题</p>\n"},{"layout":"post","title":"Express + mongoose 搭建后台简易配置","date":"2017-02-28T03:38:00.000Z","_content":"\n### 安装工具\n\n- NodeJS\n- MongoDB\n- RoboMongo\n\n### 使用 Express 框架\n\n命令行下输入：\n\n    npm install -g express-generator\n\n使用 Express 初始化项目，在命令行中输入：  \n\n    express -e blog\n    cd blog \n\nexpress -e 会在当前目录下建立一个 blog 文件夹，里面有初始化内容, 在命令行中输入：  \n\n    npm install\n    npm start\n\nnpm install 是用于安装 packages.json 内的框架。  \npackages.json 内容：  \n\n```json\n{\n  \"name\": \"blog\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node ./bin/www\"\n  },\n  \"dependencies\": {\n    \"body-parser\": \"~1.16.0\",\n    \"cookie-parser\": \"~1.4.3\",\n    \"debug\": \"~2.6.0\",\n    \"ejs\": \"~2.5.5\",\n    \"express\": \"~4.14.1\",\n    \"morgan\": \"~1.7.0\",\n    \"serve-favicon\": \"~2.3.2\"\n  }\n}\n```\n\nnpm start 是开启 nodejs 项目，在浏览器中输入 localhost:3000 ，可以看到工程已建立。\n\n### 工程结构  \n \n- app.js：启动文件，或者说入口文件  \n- package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行 npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块  \n- node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下  \n- public：存放 image、css、js 等文件  \n- routes：存放路由文件  \n- views：存放视图文件或者说模版文件  \n- bin：存放可执行文件  \n\n打开 app.js\n\n```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar app = express();\n```\n\nrequire 是用于加载文件调用接口，除原生模块外，引用需要 `./` 加相对地址。  \n`var app = express()` 用于生成 express 实例。\n\n```js\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n```\n\n设置视图模板引擎 ejs ,接下来所用的 html 文件都要改为 ejs 。\n\n```js\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/', index);\napp.use('/users', users);\n```\n\n加载中间件。\n\n```js\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n```\n\n错误处理。  \n\n```js\nmodule.exports = app;\n```\n\n设置模块公开接口。\n\n### 路由控制\n\n打开 routes/index.js\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n```\n\n前两行是 router 初始化设置，router.get 意思是当访问主页是，调用 ejs 引擎，生成静态页面，`title:'express'` 是把标题设置为 express 。\n我们在 index.js 添加代码：\n\n```js\nrouter.get('/hhh', function(req, res, next) {\n  res.render('index', { title: 'hahahaha' });\n});\n```\n\n在浏览器中打开 <a href=\"localhost:3000/hhh\" target=\"_blank\">localhost:3000/hhh</a> 看看效果。  \n\n### 模板引擎\n\n接下来在 views 下添加我们要显示的页面。刚才路由中有一行代码  \n\n```js\nres.render('index',{title: 'express'});\n```\n\nindex 就是 views 目录下的 index.ejs 文件，ejs 标签非常简单，只有三种标签。 \n\n- `<% code %>`：JavaScript 代码。  \n- `<%= code %>`：显示替换过 HTML 特殊字符的内容。  \n- `<%- code %>`：显示原始 HTML 内容。  \n\n其中模块如何构架与 WordPress 相似。  \n\n### MongoDB 开启\n\n接下来要开启 mongodb，在安装的 mongodb 目录下，新建一个名为 data 的目录，我们的数据就要放在这里。  \n打开 mongodb 目录的 bin 文件夹 ，在其目录下使用命令提示符，输入  \n\n    mongod --dbpath ../data\n\n在浏览器中打开 localhost:27017 看看开启是否成功。  \n\n进入 mongodb 后台管理系统。在 bin 目录下在开启一个命令提示符，输入\n\n    mongo\n    use data\n\n打开 robomongo ，点击 create ，地址 localhost:27017 ,  \n一般默认设置即可，点击后就可进入可视化界面的 mongodb 后台系统。\n\n### mongoose 连接 express\n\n在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入  \n\n```js\n// mongoose 链接\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/data');\n\n// Schema 结构\nvar Schema = mongoose.Schema;\nvar userSchema = new Schema({\n    username: String,\n    userimg: String,\n    userspan: String,\n    tag: String,\n    tagimg: String,\n    title: String,\n    article: String,\n    like: Number,\n    class: String\n});\n\n// 现在的 schema 还是没什么用的\n// 我们还需要在它的基础上创建一个模型 (model)\nvar addUser = mongoose.model('addUser', userSchema);\nvar userPost = mongoose.model('userPost', userSchema);\n\n// 导出我们之前定义好的 user model\nmodule.exports = addUser;\n```\n\n其中 userSchema 是要添加的数据内容分类。同目录下，新建 add.js 文件  \n\n```js\nvar Db = require('./db.js');\nvar test = new Db({\n    username: 'mrchan',\n    tag: 'nodejs',\n    title: 'express+mongoose',\n    article: 'test',\n});\ntest.save(function(err){\n    if(err) throw err;\n    console.log('User save successful');\n});\n```\n\n第一行是引用 db.js 的设置,  \n重新执行 npm start 命令，这些内容就会被写入数据库。当然现在还不行,我们要在 app.js 内 `var app = express()` 上添加代码  \n\n```js\n//mongoose 添加方法\nvar add = require('./model/add.js');    //把 add.js 方法添加到 app.js\nglobal.post = require('./model/db.js'); //给全局设置一个 post 方法，用于引用数据库内容\n```\n\n此时修改 routers/index.js 代码  \n\n```js\nrouter.get('/', function(req, res, next) {\n    post.find({}, function(err, docs) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        // docs 是包含了符合条件的多个文档的一个数组\n        console.log(docs);\n        res.render('index', { title: '首页-知乎', content: docs.reverse()});\n    });\n});\n```\n\n然后在 index.view 就可引用数据库数据。用法如下  \n\n```html\n<ul>\n    <% for(var i=0; i<content.length; i++) { %>\n        <li><%- content[i].username %></li>\n        <li><%- content[i].tag %></li>\n        <li><%- content[i].title %></li>\n    <% } %>\n</ul>\n```\n\n### 小节  \n\n这是我第一次接触后台，对后台的构架与使用还是不太熟悉，尤其是数据库这一块内容，每次添加数据都得执行一次 npm start ，十分麻烦。而且我只会建一张表，接下来还要研究如何建立多张表并合理的引用。所以数据库这块仅做我自己参考，并没有试用性。\n\n-----Update--------  \n\n建立多张表的方法看 <a href=\"http://idmrchan.com/2017/02/28/mongoose-population/\" target=\"_blank\">这篇</a>\n\n\n\n","source":"_posts/express-mongoose-test.markdown","raw":"---\nlayout:     post\ntitle:      \"Express + mongoose 搭建后台简易配置\"\ndate:       2017-02-28 11:38:00\ntags:\n    - NodeJS\n    - MongoDB\n---\n\n### 安装工具\n\n- NodeJS\n- MongoDB\n- RoboMongo\n\n### 使用 Express 框架\n\n命令行下输入：\n\n    npm install -g express-generator\n\n使用 Express 初始化项目，在命令行中输入：  \n\n    express -e blog\n    cd blog \n\nexpress -e 会在当前目录下建立一个 blog 文件夹，里面有初始化内容, 在命令行中输入：  \n\n    npm install\n    npm start\n\nnpm install 是用于安装 packages.json 内的框架。  \npackages.json 内容：  \n\n```json\n{\n  \"name\": \"blog\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"start\": \"node ./bin/www\"\n  },\n  \"dependencies\": {\n    \"body-parser\": \"~1.16.0\",\n    \"cookie-parser\": \"~1.4.3\",\n    \"debug\": \"~2.6.0\",\n    \"ejs\": \"~2.5.5\",\n    \"express\": \"~4.14.1\",\n    \"morgan\": \"~1.7.0\",\n    \"serve-favicon\": \"~2.3.2\"\n  }\n}\n```\n\nnpm start 是开启 nodejs 项目，在浏览器中输入 localhost:3000 ，可以看到工程已建立。\n\n### 工程结构  \n \n- app.js：启动文件，或者说入口文件  \n- package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行 npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块  \n- node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下  \n- public：存放 image、css、js 等文件  \n- routes：存放路由文件  \n- views：存放视图文件或者说模版文件  \n- bin：存放可执行文件  \n\n打开 app.js\n\n```js\nvar express = require('express');\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar logger = require('morgan');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\nvar index = require('./routes/index');\nvar users = require('./routes/users');\nvar app = express();\n```\n\nrequire 是用于加载文件调用接口，除原生模块外，引用需要 `./` 加相对地址。  \n`var app = express()` 用于生成 express 实例。\n\n```js\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'ejs');\n```\n\n设置视图模板引擎 ejs ,接下来所用的 html 文件都要改为 ejs 。\n\n```js\n// uncomment after placing your favicon in /public\n//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use('/', index);\napp.use('/users', users);\n```\n\n加载中间件。\n\n```js\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n```\n\n错误处理。  \n\n```js\nmodule.exports = app;\n```\n\n设置模块公开接口。\n\n### 路由控制\n\n打开 routes/index.js\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express' });\n});\n\nmodule.exports = router;\n```\n\n前两行是 router 初始化设置，router.get 意思是当访问主页是，调用 ejs 引擎，生成静态页面，`title:'express'` 是把标题设置为 express 。\n我们在 index.js 添加代码：\n\n```js\nrouter.get('/hhh', function(req, res, next) {\n  res.render('index', { title: 'hahahaha' });\n});\n```\n\n在浏览器中打开 <a href=\"localhost:3000/hhh\" target=\"_blank\">localhost:3000/hhh</a> 看看效果。  \n\n### 模板引擎\n\n接下来在 views 下添加我们要显示的页面。刚才路由中有一行代码  \n\n```js\nres.render('index',{title: 'express'});\n```\n\nindex 就是 views 目录下的 index.ejs 文件，ejs 标签非常简单，只有三种标签。 \n\n- `<% code %>`：JavaScript 代码。  \n- `<%= code %>`：显示替换过 HTML 特殊字符的内容。  \n- `<%- code %>`：显示原始 HTML 内容。  \n\n其中模块如何构架与 WordPress 相似。  \n\n### MongoDB 开启\n\n接下来要开启 mongodb，在安装的 mongodb 目录下，新建一个名为 data 的目录，我们的数据就要放在这里。  \n打开 mongodb 目录的 bin 文件夹 ，在其目录下使用命令提示符，输入  \n\n    mongod --dbpath ../data\n\n在浏览器中打开 localhost:27017 看看开启是否成功。  \n\n进入 mongodb 后台管理系统。在 bin 目录下在开启一个命令提示符，输入\n\n    mongo\n    use data\n\n打开 robomongo ，点击 create ，地址 localhost:27017 ,  \n一般默认设置即可，点击后就可进入可视化界面的 mongodb 后台系统。\n\n### mongoose 连接 express\n\n在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入  \n\n```js\n// mongoose 链接\nvar mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/data');\n\n// Schema 结构\nvar Schema = mongoose.Schema;\nvar userSchema = new Schema({\n    username: String,\n    userimg: String,\n    userspan: String,\n    tag: String,\n    tagimg: String,\n    title: String,\n    article: String,\n    like: Number,\n    class: String\n});\n\n// 现在的 schema 还是没什么用的\n// 我们还需要在它的基础上创建一个模型 (model)\nvar addUser = mongoose.model('addUser', userSchema);\nvar userPost = mongoose.model('userPost', userSchema);\n\n// 导出我们之前定义好的 user model\nmodule.exports = addUser;\n```\n\n其中 userSchema 是要添加的数据内容分类。同目录下，新建 add.js 文件  \n\n```js\nvar Db = require('./db.js');\nvar test = new Db({\n    username: 'mrchan',\n    tag: 'nodejs',\n    title: 'express+mongoose',\n    article: 'test',\n});\ntest.save(function(err){\n    if(err) throw err;\n    console.log('User save successful');\n});\n```\n\n第一行是引用 db.js 的设置,  \n重新执行 npm start 命令，这些内容就会被写入数据库。当然现在还不行,我们要在 app.js 内 `var app = express()` 上添加代码  \n\n```js\n//mongoose 添加方法\nvar add = require('./model/add.js');    //把 add.js 方法添加到 app.js\nglobal.post = require('./model/db.js'); //给全局设置一个 post 方法，用于引用数据库内容\n```\n\n此时修改 routers/index.js 代码  \n\n```js\nrouter.get('/', function(req, res, next) {\n    post.find({}, function(err, docs) {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        // docs 是包含了符合条件的多个文档的一个数组\n        console.log(docs);\n        res.render('index', { title: '首页-知乎', content: docs.reverse()});\n    });\n});\n```\n\n然后在 index.view 就可引用数据库数据。用法如下  \n\n```html\n<ul>\n    <% for(var i=0; i<content.length; i++) { %>\n        <li><%- content[i].username %></li>\n        <li><%- content[i].tag %></li>\n        <li><%- content[i].title %></li>\n    <% } %>\n</ul>\n```\n\n### 小节  \n\n这是我第一次接触后台，对后台的构架与使用还是不太熟悉，尤其是数据库这一块内容，每次添加数据都得执行一次 npm start ，十分麻烦。而且我只会建一张表，接下来还要研究如何建立多张表并合理的引用。所以数据库这块仅做我自己参考，并没有试用性。\n\n-----Update--------  \n\n建立多张表的方法看 <a href=\"http://idmrchan.com/2017/02/28/mongoose-population/\" target=\"_blank\">这篇</a>\n\n\n\n","slug":"express-mongoose-test","published":1,"updated":"2018-05-09T08:12:23.672Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40f000e2mhswm0tsig1","content":"<h3 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><ul>\n<li>NodeJS</li>\n<li>MongoDB</li>\n<li>RoboMongo</li>\n</ul>\n<h3 id=\"使用-Express-框架\"><a href=\"#使用-Express-框架\" class=\"headerlink\" title=\"使用 Express 框架\"></a>使用 Express 框架</h3><p>命令行下输入：</p>\n<pre><code>npm install -g express-generator\n</code></pre><p>使用 Express 初始化项目，在命令行中输入：  </p>\n<pre><code>express -e blog\ncd blog \n</code></pre><p>express -e 会在当前目录下建立一个 blog 文件夹，里面有初始化内容, 在命令行中输入：  </p>\n<pre><code>npm install\nnpm start\n</code></pre><p>npm install 是用于安装 packages.json 内的框架。<br>packages.json 内容：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"blog\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"body-parser\"</span>: <span class=\"string\">\"~1.16.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cookie-parser\"</span>: <span class=\"string\">\"~1.4.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"debug\"</span>: <span class=\"string\">\"~2.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ejs\"</span>: <span class=\"string\">\"~2.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"~4.14.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"morgan\"</span>: <span class=\"string\">\"~1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.3.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm start 是开启 nodejs 项目，在浏览器中输入 localhost:3000 ，可以看到工程已建立。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><ul>\n<li>app.js：启动文件，或者说入口文件  </li>\n<li>package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行 npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块  </li>\n<li>node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下  </li>\n<li>public：存放 image、css、js 等文件  </li>\n<li>routes：存放路由文件  </li>\n<li>views：存放视图文件或者说模版文件  </li>\n<li>bin：存放可执行文件  </li>\n</ul>\n<p>打开 app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br></pre></td></tr></table></figure>\n<p>require 是用于加载文件调用接口，除原生模块外，引用需要 <code>./</code> 加相对地址。<br><code>var app = express()</code> 用于生成 express 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);</span><br></pre></td></tr></table></figure>\n<p>设置视图模板引擎 ejs ,接下来所用的 html 文件都要改为 ejs 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uncomment after placing your favicon in /public</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br></pre></td></tr></table></figure>\n<p>加载中间件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>错误处理。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure>\n<p>设置模块公开接口。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>打开 routes/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Express'</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>前两行是 router 初始化设置，router.get 意思是当访问主页是，调用 ejs 引擎，生成静态页面，<code>title:&#39;express&#39;</code> 是把标题设置为 express 。<br>我们在 index.js 添加代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/hhh'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'hahahaha'</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开 <a href=\"localhost:3000/hhh\" target=\"_blank\">localhost:3000/hhh</a> 看看效果。  </p>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>接下来在 views 下添加我们要显示的页面。刚才路由中有一行代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'index'</span>,&#123;<span class=\"attr\">title</span>: <span class=\"string\">'express'</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>index 就是 views 目录下的 index.ejs 文件，ejs 标签非常简单，只有三种标签。 </p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：JavaScript 代码。  </li>\n<li><code>&lt;%= code %&gt;</code>：显示替换过 HTML 特殊字符的内容。  </li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容。  </li>\n</ul>\n<p>其中模块如何构架与 WordPress 相似。  </p>\n<h3 id=\"MongoDB-开启\"><a href=\"#MongoDB-开启\" class=\"headerlink\" title=\"MongoDB 开启\"></a>MongoDB 开启</h3><p>接下来要开启 mongodb，在安装的 mongodb 目录下，新建一个名为 data 的目录，我们的数据就要放在这里。<br>打开 mongodb 目录的 bin 文件夹 ，在其目录下使用命令提示符，输入  </p>\n<pre><code>mongod --dbpath ../data\n</code></pre><p>在浏览器中打开 localhost:27017 看看开启是否成功。  </p>\n<p>进入 mongodb 后台管理系统。在 bin 目录下在开启一个命令提示符，输入</p>\n<pre><code>mongo\nuse data\n</code></pre><p>打开 robomongo ，点击 create ，地址 localhost:27017 ,<br>一般默认设置即可，点击后就可进入可视化界面的 mongodb 后台系统。</p>\n<h3 id=\"mongoose-连接-express\"><a href=\"#mongoose-连接-express\" class=\"headerlink\" title=\"mongoose 连接 express\"></a>mongoose 连接 express</h3><p>在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mongoose 链接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Schema 结构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    userimg: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    userspan: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    tag: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    tagimg: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    title: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    article: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    like: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    class: String</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在的 schema 还是没什么用的</span></span><br><span class=\"line\"><span class=\"comment\">// 我们还需要在它的基础上创建一个模型 (model)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addUser = mongoose.model(<span class=\"string\">'addUser'</span>, userSchema);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userPost = mongoose.model(<span class=\"string\">'userPost'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出我们之前定义好的 user model</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = addUser;</span><br></pre></td></tr></table></figure>\n<p>其中 userSchema 是要添加的数据内容分类。同目录下，新建 add.js 文件  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Db(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'mrchan'</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">'nodejs'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'express+mongoose'</span>,</span><br><span class=\"line\">    article: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'User save successful'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一行是引用 db.js 的设置,<br>重新执行 npm start 命令，这些内容就会被写入数据库。当然现在还不行,我们要在 app.js 内 <code>var app = express()</code> 上添加代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mongoose 添加方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'./model/add.js'</span>);    <span class=\"comment\">//把 add.js 方法添加到 app.js</span></span><br><span class=\"line\">global.post = <span class=\"built_in\">require</span>(<span class=\"string\">'./model/db.js'</span>); <span class=\"comment\">//给全局设置一个 post 方法，用于引用数据库内容</span></span><br></pre></td></tr></table></figure>\n<p>此时修改 routers/index.js 代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    post.find(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, docs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// docs 是包含了符合条件的多个文档的一个数组</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">        res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'首页-知乎'</span>, <span class=\"attr\">content</span>: docs.reverse()&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后在 index.view 就可引用数据库数据。用法如下  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    &lt;% for(var i=0; i&lt;content.length; i++) &#123; %&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.username</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.tag</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>这是我第一次接触后台，对后台的构架与使用还是不太熟悉，尤其是数据库这一块内容，每次添加数据都得执行一次 npm start ，十分麻烦。而且我只会建一张表，接下来还要研究如何建立多张表并合理的引用。所以数据库这块仅做我自己参考，并没有试用性。</p>\n<p>—–Update——–  </p>\n<p>建立多张表的方法看 <a href=\"http://idmrchan.com/2017/02/28/mongoose-population/\" target=\"_blank\">这篇</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装工具\"><a href=\"#安装工具\" class=\"headerlink\" title=\"安装工具\"></a>安装工具</h3><ul>\n<li>NodeJS</li>\n<li>MongoDB</li>\n<li>RoboMongo</li>\n</ul>\n<h3 id=\"使用-Express-框架\"><a href=\"#使用-Express-框架\" class=\"headerlink\" title=\"使用 Express 框架\"></a>使用 Express 框架</h3><p>命令行下输入：</p>\n<pre><code>npm install -g express-generator\n</code></pre><p>使用 Express 初始化项目，在命令行中输入：  </p>\n<pre><code>express -e blog\ncd blog \n</code></pre><p>express -e 会在当前目录下建立一个 blog 文件夹，里面有初始化内容, 在命令行中输入：  </p>\n<pre><code>npm install\nnpm start\n</code></pre><p>npm install 是用于安装 packages.json 内的框架。<br>packages.json 内容：  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"blog\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"private\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"body-parser\"</span>: <span class=\"string\">\"~1.16.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"cookie-parser\"</span>: <span class=\"string\">\"~1.4.3\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"debug\"</span>: <span class=\"string\">\"~2.6.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"ejs\"</span>: <span class=\"string\">\"~2.5.5\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"~4.14.1\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"morgan\"</span>: <span class=\"string\">\"~1.7.0\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.3.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>npm start 是开启 nodejs 项目，在浏览器中输入 localhost:3000 ，可以看到工程已建立。</p>\n<h3 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h3><ul>\n<li>app.js：启动文件，或者说入口文件  </li>\n<li>package.json：存储着工程的信息及模块依赖，当在 dependencies 中添加依赖的模块时，运行 npm install，npm 会检查当前目录下的 package.json，并自动安装所有指定的模块  </li>\n<li>node_modules：存放 package.json 中安装的模块，当你在 package.json 添加依赖的模块并安装后，存放在这个文件夹下  </li>\n<li>public：存放 image、css、js 等文件  </li>\n<li>routes：存放路由文件  </li>\n<li>views：存放视图文件或者说模版文件  </li>\n<li>bin：存放可执行文件  </li>\n</ul>\n<p>打开 app.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> favicon = <span class=\"built_in\">require</span>(<span class=\"string\">'serve-favicon'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> logger = <span class=\"built_in\">require</span>(<span class=\"string\">'morgan'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> bodyParser = <span class=\"built_in\">require</span>(<span class=\"string\">'body-parser'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> index = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> users = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/users'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> app = express();</span><br></pre></td></tr></table></figure>\n<p>require 是用于加载文件调用接口，除原生模块外，引用需要 <code>./</code> 加相对地址。<br><code>var app = express()</code> 用于生成 express 实例。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// view engine setup</span></span><br><span class=\"line\">app.set(<span class=\"string\">'views'</span>, path.join(__dirname, <span class=\"string\">'views'</span>));</span><br><span class=\"line\">app.set(<span class=\"string\">'view engine'</span>, <span class=\"string\">'ejs'</span>);</span><br></pre></td></tr></table></figure>\n<p>设置视图模板引擎 ejs ,接下来所用的 html 文件都要改为 ejs 。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// uncomment after placing your favicon in /public</span></span><br><span class=\"line\"><span class=\"comment\">//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));</span></span><br><span class=\"line\">app.use(logger(<span class=\"string\">'dev'</span>));</span><br><span class=\"line\">app.use(bodyParser.json());</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; <span class=\"attr\">extended</span>: <span class=\"literal\">false</span> &#125;));</span><br><span class=\"line\">app.use(cookieParser());</span><br><span class=\"line\">app.use(express.static(path.join(__dirname, <span class=\"string\">'public'</span>)));</span><br><span class=\"line\">app.use(<span class=\"string\">'/'</span>, index);</span><br><span class=\"line\">app.use(<span class=\"string\">'/users'</span>, users);</span><br></pre></td></tr></table></figure>\n<p>加载中间件。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// catch 404 and forward to error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> err = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not Found'</span>);</span><br><span class=\"line\">  err.status = <span class=\"number\">404</span>;</span><br><span class=\"line\">  next(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error handler</span></span><br><span class=\"line\">app.use(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// set locals, only providing error in development</span></span><br><span class=\"line\">  res.locals.message = err.message;</span><br><span class=\"line\">  res.locals.error = req.app.get(<span class=\"string\">'env'</span>) === <span class=\"string\">'development'</span> ? err : &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// render the error page</span></span><br><span class=\"line\">  res.status(err.status || <span class=\"number\">500</span>);</span><br><span class=\"line\">  res.render(<span class=\"string\">'error'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>错误处理。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = app;</span><br></pre></td></tr></table></figure>\n<p>设置模块公开接口。</p>\n<h3 id=\"路由控制\"><a href=\"#路由控制\" class=\"headerlink\" title=\"路由控制\"></a>路由控制</h3><p>打开 routes/index.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Express'</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>前两行是 router 初始化设置，router.get 意思是当访问主页是，调用 ejs 引擎，生成静态页面，<code>title:&#39;express&#39;</code> 是把标题设置为 express 。<br>我们在 index.js 添加代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/hhh'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'hahahaha'</span> &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在浏览器中打开 <a href=\"localhost:3000/hhh\" target=\"_blank\">localhost:3000/hhh</a> 看看效果。  </p>\n<h3 id=\"模板引擎\"><a href=\"#模板引擎\" class=\"headerlink\" title=\"模板引擎\"></a>模板引擎</h3><p>接下来在 views 下添加我们要显示的页面。刚才路由中有一行代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.render(<span class=\"string\">'index'</span>,&#123;<span class=\"attr\">title</span>: <span class=\"string\">'express'</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>index 就是 views 目录下的 index.ejs 文件，ejs 标签非常简单，只有三种标签。 </p>\n<ul>\n<li><code>&lt;% code %&gt;</code>：JavaScript 代码。  </li>\n<li><code>&lt;%= code %&gt;</code>：显示替换过 HTML 特殊字符的内容。  </li>\n<li><code>&lt;%- code %&gt;</code>：显示原始 HTML 内容。  </li>\n</ul>\n<p>其中模块如何构架与 WordPress 相似。  </p>\n<h3 id=\"MongoDB-开启\"><a href=\"#MongoDB-开启\" class=\"headerlink\" title=\"MongoDB 开启\"></a>MongoDB 开启</h3><p>接下来要开启 mongodb，在安装的 mongodb 目录下，新建一个名为 data 的目录，我们的数据就要放在这里。<br>打开 mongodb 目录的 bin 文件夹 ，在其目录下使用命令提示符，输入  </p>\n<pre><code>mongod --dbpath ../data\n</code></pre><p>在浏览器中打开 localhost:27017 看看开启是否成功。  </p>\n<p>进入 mongodb 后台管理系统。在 bin 目录下在开启一个命令提示符，输入</p>\n<pre><code>mongo\nuse data\n</code></pre><p>打开 robomongo ，点击 create ，地址 localhost:27017 ,<br>一般默认设置即可，点击后就可进入可视化界面的 mongodb 后台系统。</p>\n<h3 id=\"mongoose-连接-express\"><a href=\"#mongoose-连接-express\" class=\"headerlink\" title=\"mongoose 连接 express\"></a>mongoose 连接 express</h3><p>在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mongoose 链接</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/data'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Schema 结构</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Schema = mongoose.Schema;</span><br><span class=\"line\"><span class=\"keyword\">var</span> userSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">    username: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    userimg: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    userspan: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    tag: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    tagimg: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    title: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    article: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    like: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">    class: String</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在的 schema 还是没什么用的</span></span><br><span class=\"line\"><span class=\"comment\">// 我们还需要在它的基础上创建一个模型 (model)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> addUser = mongoose.model(<span class=\"string\">'addUser'</span>, userSchema);</span><br><span class=\"line\"><span class=\"keyword\">var</span> userPost = mongoose.model(<span class=\"string\">'userPost'</span>, userSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出我们之前定义好的 user model</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = addUser;</span><br></pre></td></tr></table></figure>\n<p>其中 userSchema 是要添加的数据内容分类。同目录下，新建 add.js 文件  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"keyword\">new</span> Db(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">'mrchan'</span>,</span><br><span class=\"line\">    tag: <span class=\"string\">'nodejs'</span>,</span><br><span class=\"line\">    title: <span class=\"string\">'express+mongoose'</span>,</span><br><span class=\"line\">    article: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">test.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'User save successful'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>第一行是引用 db.js 的设置,<br>重新执行 npm start 命令，这些内容就会被写入数据库。当然现在还不行,我们要在 app.js 内 <code>var app = express()</code> 上添加代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//mongoose 添加方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">'./model/add.js'</span>);    <span class=\"comment\">//把 add.js 方法添加到 app.js</span></span><br><span class=\"line\">global.post = <span class=\"built_in\">require</span>(<span class=\"string\">'./model/db.js'</span>); <span class=\"comment\">//给全局设置一个 post 方法，用于引用数据库内容</span></span><br></pre></td></tr></table></figure>\n<p>此时修改 routers/index.js 代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">    post.find(&#123;&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, docs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.error(err);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// docs 是包含了符合条件的多个文档的一个数组</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(docs);</span><br><span class=\"line\">        res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'首页-知乎'</span>, <span class=\"attr\">content</span>: docs.reverse()&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>然后在 index.view 就可引用数据库数据。用法如下  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    &lt;% for(var i=0; i&lt;content.length; i++) &#123; %&gt;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.username</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.tag</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">content</span>[<span class=\"attr\">i</span>]<span class=\"attr\">.title</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">%</span> &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"小节\"><a href=\"#小节\" class=\"headerlink\" title=\"小节\"></a>小节</h3><p>这是我第一次接触后台，对后台的构架与使用还是不太熟悉，尤其是数据库这一块内容，每次添加数据都得执行一次 npm start ，十分麻烦。而且我只会建一张表，接下来还要研究如何建立多张表并合理的引用。所以数据库这块仅做我自己参考，并没有试用性。</p>\n<p>—–Update——–  </p>\n<p>建立多张表的方法看 <a href=\"http://idmrchan.com/2017/02/28/mongoose-population/\" target=\"_blank\">这篇</a></p>\n"},{"layout":"post","title":"搭建 Git 服务器及配置 Hook","date":"2018-02-02T15:25:00.000Z","_content":"\n首先在服务器上配置 Git，这里用的是 Ubuntu\n\n    sudo apt-get install git     安装 Git\n    sudo adduser git         添加一个 git 用户\n\n将 `id_rsa.pub` 公钥添加到到服务器 `/home/git/.ssh/authorized_keys`\n\n选择一个文件夹作为 Git 仓库，假定在 `/home/git` 里\n\n    sudo git init --bare sample.git\n    sudo chown -R git:git sample.git    修改为 Git 的权限，否则会禁止访问\n\nbare 是裸仓库，<a href=\"https://segmentfault.com/a/1190000007686496\" target=\"_blank\">裸仓库与普通仓库的区别</a>简单的理解，裸仓库用于远程服务器的上传，保存历史记录等各种信息，但不能操作 Git，不能保存文件，纯粹是为了共享。\n\n然后客户端\n\n    git clone git@server:/home/git/sample.git\n    // 往里面添加内容\n    git add .\n    git commit -m '修改内容'\n    git push origin master\n    // 跟 GitHub 更新没什么差别\n\n那么问题来了，裸仓库只用于共享，并没有保存文件，我要在服务器上获取文件，假定要 `/home/virgil/blog` 放本地上传的代码\n\n    cd /home/virgil/blog\n    git clone /home/git/blog.git\n    // 之后在修改代码\n    cd blog\n    git pull\n\n但是每次本地 push 完后还要在到服务器 pull 一次，很麻烦，幸好 Git 提供了 Hook 操作。\n\nHook 就是钩子的意思，比如说提交前触发，更新时触发，提交后触发之类。\n\n在远程服务器，及裸仓库中，可以看到有一个 hooks 文件夹，里面放着各种各样钩子用法的例子，文件名去掉 .sample 就可以用，这里我用的是 post-receive，当我们在本地执行 push 命令到 git 服务器的时候，服务器会自动触发 post-receive 钩子。\n\n    vim /home/git/sample.git/hooks/post-receive\n\n里面内容\n\n```vim\n#!/bin/sh\ncd /home/virgil/blog || exit\nunset GIT_DIR # 还原环境变量，不加会报错\ngit pull origin master\n```\n\n保存后修改权限\n\n    chmod +x /home/git/sample.git/hooks/post-receive\n\n这里需要注意， `/home/virgil/blog` 也需要修改权限，修改为 git 权限，否则 `git pull` 时会访问不到权限\n\n    chown -R git:git /home/virgil/blog\n\n这样就 Ok 了，可以测试一下，在本地 push 之后服务器是否会自动 pull 代码下来。\n\n\n","source":"_posts/git-server-create.markdown","raw":"---\nlayout:     post\ntitle:      \"搭建 Git 服务器及配置 Hook\"\ndate:       2018-02-02 23:25:00\ntags:\n    - Git\n---\n\n首先在服务器上配置 Git，这里用的是 Ubuntu\n\n    sudo apt-get install git     安装 Git\n    sudo adduser git         添加一个 git 用户\n\n将 `id_rsa.pub` 公钥添加到到服务器 `/home/git/.ssh/authorized_keys`\n\n选择一个文件夹作为 Git 仓库，假定在 `/home/git` 里\n\n    sudo git init --bare sample.git\n    sudo chown -R git:git sample.git    修改为 Git 的权限，否则会禁止访问\n\nbare 是裸仓库，<a href=\"https://segmentfault.com/a/1190000007686496\" target=\"_blank\">裸仓库与普通仓库的区别</a>简单的理解，裸仓库用于远程服务器的上传，保存历史记录等各种信息，但不能操作 Git，不能保存文件，纯粹是为了共享。\n\n然后客户端\n\n    git clone git@server:/home/git/sample.git\n    // 往里面添加内容\n    git add .\n    git commit -m '修改内容'\n    git push origin master\n    // 跟 GitHub 更新没什么差别\n\n那么问题来了，裸仓库只用于共享，并没有保存文件，我要在服务器上获取文件，假定要 `/home/virgil/blog` 放本地上传的代码\n\n    cd /home/virgil/blog\n    git clone /home/git/blog.git\n    // 之后在修改代码\n    cd blog\n    git pull\n\n但是每次本地 push 完后还要在到服务器 pull 一次，很麻烦，幸好 Git 提供了 Hook 操作。\n\nHook 就是钩子的意思，比如说提交前触发，更新时触发，提交后触发之类。\n\n在远程服务器，及裸仓库中，可以看到有一个 hooks 文件夹，里面放着各种各样钩子用法的例子，文件名去掉 .sample 就可以用，这里我用的是 post-receive，当我们在本地执行 push 命令到 git 服务器的时候，服务器会自动触发 post-receive 钩子。\n\n    vim /home/git/sample.git/hooks/post-receive\n\n里面内容\n\n```vim\n#!/bin/sh\ncd /home/virgil/blog || exit\nunset GIT_DIR # 还原环境变量，不加会报错\ngit pull origin master\n```\n\n保存后修改权限\n\n    chmod +x /home/git/sample.git/hooks/post-receive\n\n这里需要注意， `/home/virgil/blog` 也需要修改权限，修改为 git 权限，否则 `git pull` 时会访问不到权限\n\n    chown -R git:git /home/virgil/blog\n\n这样就 Ok 了，可以测试一下，在本地 push 之后服务器是否会自动 pull 代码下来。\n\n\n","slug":"git-server-create","published":1,"updated":"2018-05-09T09:51:12.828Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40h000h2mhsisc5e9yf","content":"<p>首先在服务器上配置 Git，这里用的是 Ubuntu</p>\n<pre><code>sudo apt-get install git     安装 Git\nsudo adduser git         添加一个 git 用户\n</code></pre><p>将 <code>id_rsa.pub</code> 公钥添加到到服务器 <code>/home/git/.ssh/authorized_keys</code></p>\n<p>选择一个文件夹作为 Git 仓库，假定在 <code>/home/git</code> 里</p>\n<pre><code>sudo git init --bare sample.git\nsudo chown -R git:git sample.git    修改为 Git 的权限，否则会禁止访问\n</code></pre><p>bare 是裸仓库，<a href=\"https://segmentfault.com/a/1190000007686496\" target=\"_blank\">裸仓库与普通仓库的区别</a>简单的理解，裸仓库用于远程服务器的上传，保存历史记录等各种信息，但不能操作 Git，不能保存文件，纯粹是为了共享。</p>\n<p>然后客户端</p>\n<pre><code>git clone git@server:/home/git/sample.git\n// 往里面添加内容\ngit add .\ngit commit -m &apos;修改内容&apos;\ngit push origin master\n// 跟 GitHub 更新没什么差别\n</code></pre><p>那么问题来了，裸仓库只用于共享，并没有保存文件，我要在服务器上获取文件，假定要 <code>/home/virgil/blog</code> 放本地上传的代码</p>\n<pre><code>cd /home/virgil/blog\ngit clone /home/git/blog.git\n// 之后在修改代码\ncd blog\ngit pull\n</code></pre><p>但是每次本地 push 完后还要在到服务器 pull 一次，很麻烦，幸好 Git 提供了 Hook 操作。</p>\n<p>Hook 就是钩子的意思，比如说提交前触发，更新时触发，提交后触发之类。</p>\n<p>在远程服务器，及裸仓库中，可以看到有一个 hooks 文件夹，里面放着各种各样钩子用法的例子，文件名去掉 .sample 就可以用，这里我用的是 post-receive，当我们在本地执行 push 命令到 git 服务器的时候，服务器会自动触发 post-receive 钩子。</p>\n<pre><code>vim /home/git/sample.git/hooks/post-receive\n</code></pre><p>里面内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/<span class=\"keyword\">sh</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> /home/virgil/blog || <span class=\"keyword\">exit</span></span><br><span class=\"line\">unset GIT_DIR # 还原环境变量，不加会报错</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>保存后修改权限</p>\n<pre><code>chmod +x /home/git/sample.git/hooks/post-receive\n</code></pre><p>这里需要注意， <code>/home/virgil/blog</code> 也需要修改权限，修改为 git 权限，否则 <code>git pull</code> 时会访问不到权限</p>\n<pre><code>chown -R git:git /home/virgil/blog\n</code></pre><p>这样就 Ok 了，可以测试一下，在本地 push 之后服务器是否会自动 pull 代码下来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先在服务器上配置 Git，这里用的是 Ubuntu</p>\n<pre><code>sudo apt-get install git     安装 Git\nsudo adduser git         添加一个 git 用户\n</code></pre><p>将 <code>id_rsa.pub</code> 公钥添加到到服务器 <code>/home/git/.ssh/authorized_keys</code></p>\n<p>选择一个文件夹作为 Git 仓库，假定在 <code>/home/git</code> 里</p>\n<pre><code>sudo git init --bare sample.git\nsudo chown -R git:git sample.git    修改为 Git 的权限，否则会禁止访问\n</code></pre><p>bare 是裸仓库，<a href=\"https://segmentfault.com/a/1190000007686496\" target=\"_blank\">裸仓库与普通仓库的区别</a>简单的理解，裸仓库用于远程服务器的上传，保存历史记录等各种信息，但不能操作 Git，不能保存文件，纯粹是为了共享。</p>\n<p>然后客户端</p>\n<pre><code>git clone git@server:/home/git/sample.git\n// 往里面添加内容\ngit add .\ngit commit -m &apos;修改内容&apos;\ngit push origin master\n// 跟 GitHub 更新没什么差别\n</code></pre><p>那么问题来了，裸仓库只用于共享，并没有保存文件，我要在服务器上获取文件，假定要 <code>/home/virgil/blog</code> 放本地上传的代码</p>\n<pre><code>cd /home/virgil/blog\ngit clone /home/git/blog.git\n// 之后在修改代码\ncd blog\ngit pull\n</code></pre><p>但是每次本地 push 完后还要在到服务器 pull 一次，很麻烦，幸好 Git 提供了 Hook 操作。</p>\n<p>Hook 就是钩子的意思，比如说提交前触发，更新时触发，提交后触发之类。</p>\n<p>在远程服务器，及裸仓库中，可以看到有一个 hooks 文件夹，里面放着各种各样钩子用法的例子，文件名去掉 .sample 就可以用，这里我用的是 post-receive，当我们在本地执行 push 命令到 git 服务器的时候，服务器会自动触发 post-receive 钩子。</p>\n<pre><code>vim /home/git/sample.git/hooks/post-receive\n</code></pre><p>里面内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/<span class=\"keyword\">sh</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> /home/virgil/blog || <span class=\"keyword\">exit</span></span><br><span class=\"line\">unset GIT_DIR # 还原环境变量，不加会报错</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<p>保存后修改权限</p>\n<pre><code>chmod +x /home/git/sample.git/hooks/post-receive\n</code></pre><p>这里需要注意， <code>/home/virgil/blog</code> 也需要修改权限，修改为 git 权限，否则 <code>git pull</code> 时会访问不到权限</p>\n<pre><code>chown -R git:git /home/virgil/blog\n</code></pre><p>这样就 Ok 了，可以测试一下，在本地 push 之后服务器是否会自动 pull 代码下来。</p>\n"},{"layout":"post","title":"从输入URL到页面呈现内容发生了什么","date":"2017-07-23T13:32:00.000Z","_content":"\n### DNS 解析\nDNS 解析就是将 URL 转化为 IP 的过程，电脑会不断地在域名服务器中查询 IP 地址，直到找到为止，所以当我们输入网址到浏览器找到 IP 时会有 10～50 ms 的延迟。  \nDNS 会将查询过的 DNS 进行缓存，分为浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。浏览器缓存如 chrome 在 chrome://dns/ 内可以看到，系统缓存在 hosts 文件内。  \n\n### TCP 连接\n浏览器得到 IP 后，就像服务器发送 TCP 请求，TCP 是传输层的一种可靠的请求，HTTP 就是基于 TCP 的连接方式。\n##### TCP 标志位\n\n- SYN 建立连接\n- ACK 确认\n- PSH push 传送\n- FIN 结束\n- RST 重置\n- URG 紧急\n\n##### 三次握手\n当客户端要与服务端通信时，需要三次握手：\n- 第一次握手，客户端发送 SYN 包到 服务器，并进入 SYN_SEND 状态等待确认\n- 第二次握手，服务器接收到 SYN 包后，也发送给客户端一个 SYN+ACK 包，并进入 SYN_RECV 状态\n- 第三次握手， 客户端收到 SYN+ACK 包，向服务端发送一个 ACK 包，双方都进入 ESTABLISHED 状态，代表可以互相通信。\n\n为什么要三次握手，因为通信双方不能保证对方一定能收到信息，网络在信道中传输是具有不稳定性的。用通俗的话来将三次握手就是：\n>A：喂你听到了吗，B：喂我听到了你听得到吗，A：嗯我也听得到\n\n##### 四次挥手\nTCP 连接时全双工的，就是互相都可收发信息，所以当断开连接时，需要互相确认对方是否断开连接了，否则当信号发送不稳定时会出现一方已断开另一方还在连接的情况。  \n例如当客户端要断开连接\n- 客户端发送一个 FIN 包\n- 服务器收到 FIN，发送一个 ACK 包\n- 服务器关闭连接，并发送一个 FIN 包后进入关闭状态\n- 客户端回 ACK 包确认，并进入关闭状态，一段时间后无反应就断开连接，服务器端收到后也关闭连接\n\n### HTTP 请求\nTCP 连接建立成功后，可以互相通信，HTTP 就发送请求下载服务器资源。HTTP 请求分为三部分组成：请求行、消息报头、请求正文\n- 请求行\n请求行格式如下：Method Request-URI HTTP-Version CRLF  \nMethod 为请求方法，Request-URI 为请求的资源路径 HTTP-Version 为版本，CRLF 表示回车或换行结尾。  \nMethod 各个方法解释如下：\n\n  + GET     请求获取Request-URI所标识的资源  \n  + POST    在Request-URI所标识的资源后附加新的数据  \n  + HEAD    请求获取由Request-URI所标识的资源的响应消息报头  \n  + PUT     请求服务器存储一个资源，并用Request-URI作为其标识  \n  + DELETE  请求服务器删除Request-URI所标识的资源  \n  + TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断  \n  + CONNECT 保留将来使用  \n  + OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求  \n\n所以，一个 GET 请求格式如下：eg:GET/index.html HTTP/1.1(CRLF)\n- 消息报头\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。\n- 请求正文\n当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，请求的数据格式一般为json。\n\n### HTTP 响应\n服务器接收请求后，会返回相应，分为是：状态行、消息报头、响应正文。这里主要看状态行。  \n状态行格式如下：HTTP-Version Status-Code Reason-Phrase CRLF  \nHTTP-Version 表示服务器HTTP协议的版本；Status-Code 表示服务器发回的响应状态代码；Reason-Phrase 表示状态代码的文本描述。\nStatus-Code 分为 5 类：\n- 1xx：指示信息 -- 表示请求已接收，继续处理\n- 2xx：成功--表示请求已被成功接收、理解、接受\n- 3xx：重定向--要完成请求必须进行更进一步的操作\n- 4xx：客户端错误--请求有语法错误或请求无法实现\n- 5xx：服务器端错误--服务器未能实现合法的请求\n\n常见的有如下：\n- 200 OK：请求成功\n- 400 Bad Request：客户端请求有语法错误\n- 401 Unauthorized：请求未经授权\n- 403 Forbidden：服务器收到请求，但是拒绝提供服务\n- 404 Not Found：请求资源不存在\n- 500 Internal Server Error：服务器发生不可预期的错误\n- 503 Server Unavailable：服务器当前不能处理客户端的请求\n\n如一个成功的响应状态行如下：eg:HTTP/1.1 200 OK\n\n### 渲染页面\n获取服务器代码后，浏览器开始下载并解析 HTML、SVG、CSS、JavaScript 等脚本。  \n解析后会生成两个内部数据结构，DOM 树和 渲染树，DOM 树表示页面结构，渲染树表示 DOM 节点如何显示。一旦两棵树构建完成，浏览器就开始绘制页面元素。    \n可以看出，DOM 树和渲染树主要由 HTML 和 CSS 解析得来，当浏览器遇到 ```<script>``` 脚本时，会停止 DOM 树的构建，先下载和解析 JS 脚本，所以最好将 JS 放页面底部，CSS 放 head 内，这样可以让浏览器最优先绘制出页面。\n\n##### 重排(reflow)与重绘(repaint)\n当 DOM 变化影响到元素的几何属性，如宽高的变化，增加段落等，这时浏览器需要重新计算元素的几何属性，并重新构造渲染树，这个过程称为重排，重排完成后，浏览器将所有受影响的部分重绘到屏幕上。  \n当然不是所有的情况都需要重排，例如修改某个元素的背景颜色，元素位置不发生变化，就只需要执行一次重绘。  \n重排和重绘都是需要耗费昂贵的代价，所以要尽可能避免。\n\n- 当修改元素位置或大小时，尽可能不要使整个页面都发生变化，而是只变化一小部分。如使用 `display:none` 先将其脱离文档流\n- 批量的修改 DOM,使其一次性渲染\n- 使用事件委托，减少被绑定的事件处理器。<a href=\"http://idmrchan.com/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a>  \n","source":"_posts/http-detailed.markdown","raw":"---\nlayout:     post\ntitle:      \"从输入URL到页面呈现内容发生了什么\"\ndate:       2017-07-23 21:32:00\ntags:\n    - HTTP\n---\n\n### DNS 解析\nDNS 解析就是将 URL 转化为 IP 的过程，电脑会不断地在域名服务器中查询 IP 地址，直到找到为止，所以当我们输入网址到浏览器找到 IP 时会有 10～50 ms 的延迟。  \nDNS 会将查询过的 DNS 进行缓存，分为浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。浏览器缓存如 chrome 在 chrome://dns/ 内可以看到，系统缓存在 hosts 文件内。  \n\n### TCP 连接\n浏览器得到 IP 后，就像服务器发送 TCP 请求，TCP 是传输层的一种可靠的请求，HTTP 就是基于 TCP 的连接方式。\n##### TCP 标志位\n\n- SYN 建立连接\n- ACK 确认\n- PSH push 传送\n- FIN 结束\n- RST 重置\n- URG 紧急\n\n##### 三次握手\n当客户端要与服务端通信时，需要三次握手：\n- 第一次握手，客户端发送 SYN 包到 服务器，并进入 SYN_SEND 状态等待确认\n- 第二次握手，服务器接收到 SYN 包后，也发送给客户端一个 SYN+ACK 包，并进入 SYN_RECV 状态\n- 第三次握手， 客户端收到 SYN+ACK 包，向服务端发送一个 ACK 包，双方都进入 ESTABLISHED 状态，代表可以互相通信。\n\n为什么要三次握手，因为通信双方不能保证对方一定能收到信息，网络在信道中传输是具有不稳定性的。用通俗的话来将三次握手就是：\n>A：喂你听到了吗，B：喂我听到了你听得到吗，A：嗯我也听得到\n\n##### 四次挥手\nTCP 连接时全双工的，就是互相都可收发信息，所以当断开连接时，需要互相确认对方是否断开连接了，否则当信号发送不稳定时会出现一方已断开另一方还在连接的情况。  \n例如当客户端要断开连接\n- 客户端发送一个 FIN 包\n- 服务器收到 FIN，发送一个 ACK 包\n- 服务器关闭连接，并发送一个 FIN 包后进入关闭状态\n- 客户端回 ACK 包确认，并进入关闭状态，一段时间后无反应就断开连接，服务器端收到后也关闭连接\n\n### HTTP 请求\nTCP 连接建立成功后，可以互相通信，HTTP 就发送请求下载服务器资源。HTTP 请求分为三部分组成：请求行、消息报头、请求正文\n- 请求行\n请求行格式如下：Method Request-URI HTTP-Version CRLF  \nMethod 为请求方法，Request-URI 为请求的资源路径 HTTP-Version 为版本，CRLF 表示回车或换行结尾。  \nMethod 各个方法解释如下：\n\n  + GET     请求获取Request-URI所标识的资源  \n  + POST    在Request-URI所标识的资源后附加新的数据  \n  + HEAD    请求获取由Request-URI所标识的资源的响应消息报头  \n  + PUT     请求服务器存储一个资源，并用Request-URI作为其标识  \n  + DELETE  请求服务器删除Request-URI所标识的资源  \n  + TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断  \n  + CONNECT 保留将来使用  \n  + OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求  \n\n所以，一个 GET 请求格式如下：eg:GET/index.html HTTP/1.1(CRLF)\n- 消息报头\n请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。\n- 请求正文\n当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，请求的数据格式一般为json。\n\n### HTTP 响应\n服务器接收请求后，会返回相应，分为是：状态行、消息报头、响应正文。这里主要看状态行。  \n状态行格式如下：HTTP-Version Status-Code Reason-Phrase CRLF  \nHTTP-Version 表示服务器HTTP协议的版本；Status-Code 表示服务器发回的响应状态代码；Reason-Phrase 表示状态代码的文本描述。\nStatus-Code 分为 5 类：\n- 1xx：指示信息 -- 表示请求已接收，继续处理\n- 2xx：成功--表示请求已被成功接收、理解、接受\n- 3xx：重定向--要完成请求必须进行更进一步的操作\n- 4xx：客户端错误--请求有语法错误或请求无法实现\n- 5xx：服务器端错误--服务器未能实现合法的请求\n\n常见的有如下：\n- 200 OK：请求成功\n- 400 Bad Request：客户端请求有语法错误\n- 401 Unauthorized：请求未经授权\n- 403 Forbidden：服务器收到请求，但是拒绝提供服务\n- 404 Not Found：请求资源不存在\n- 500 Internal Server Error：服务器发生不可预期的错误\n- 503 Server Unavailable：服务器当前不能处理客户端的请求\n\n如一个成功的响应状态行如下：eg:HTTP/1.1 200 OK\n\n### 渲染页面\n获取服务器代码后，浏览器开始下载并解析 HTML、SVG、CSS、JavaScript 等脚本。  \n解析后会生成两个内部数据结构，DOM 树和 渲染树，DOM 树表示页面结构，渲染树表示 DOM 节点如何显示。一旦两棵树构建完成，浏览器就开始绘制页面元素。    \n可以看出，DOM 树和渲染树主要由 HTML 和 CSS 解析得来，当浏览器遇到 ```<script>``` 脚本时，会停止 DOM 树的构建，先下载和解析 JS 脚本，所以最好将 JS 放页面底部，CSS 放 head 内，这样可以让浏览器最优先绘制出页面。\n\n##### 重排(reflow)与重绘(repaint)\n当 DOM 变化影响到元素的几何属性，如宽高的变化，增加段落等，这时浏览器需要重新计算元素的几何属性，并重新构造渲染树，这个过程称为重排，重排完成后，浏览器将所有受影响的部分重绘到屏幕上。  \n当然不是所有的情况都需要重排，例如修改某个元素的背景颜色，元素位置不发生变化，就只需要执行一次重绘。  \n重排和重绘都是需要耗费昂贵的代价，所以要尽可能避免。\n\n- 当修改元素位置或大小时，尽可能不要使整个页面都发生变化，而是只变化一小部分。如使用 `display:none` 先将其脱离文档流\n- 批量的修改 DOM,使其一次性渲染\n- 使用事件委托，减少被绑定的事件处理器。<a href=\"http://idmrchan.com/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a>  \n","slug":"http-detailed","published":1,"updated":"2018-05-09T09:18:57.207Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40i000i2mhswf71ph7b","content":"<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>DNS 解析就是将 URL 转化为 IP 的过程，电脑会不断地在域名服务器中查询 IP 地址，直到找到为止，所以当我们输入网址到浏览器找到 IP 时会有 10～50 ms 的延迟。<br>DNS 会将查询过的 DNS 进行缓存，分为浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。浏览器缓存如 chrome 在 chrome://dns/ 内可以看到，系统缓存在 hosts 文件内。  </p>\n<h3 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h3><p>浏览器得到 IP 后，就像服务器发送 TCP 请求，TCP 是传输层的一种可靠的请求，HTTP 就是基于 TCP 的连接方式。</p>\n<h5 id=\"TCP-标志位\"><a href=\"#TCP-标志位\" class=\"headerlink\" title=\"TCP 标志位\"></a>TCP 标志位</h5><ul>\n<li>SYN 建立连接</li>\n<li>ACK 确认</li>\n<li>PSH push 传送</li>\n<li>FIN 结束</li>\n<li>RST 重置</li>\n<li>URG 紧急</li>\n</ul>\n<h5 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h5><p>当客户端要与服务端通信时，需要三次握手：</p>\n<ul>\n<li>第一次握手，客户端发送 SYN 包到 服务器，并进入 SYN_SEND 状态等待确认</li>\n<li>第二次握手，服务器接收到 SYN 包后，也发送给客户端一个 SYN+ACK 包，并进入 SYN_RECV 状态</li>\n<li>第三次握手， 客户端收到 SYN+ACK 包，向服务端发送一个 ACK 包，双方都进入 ESTABLISHED 状态，代表可以互相通信。</li>\n</ul>\n<p>为什么要三次握手，因为通信双方不能保证对方一定能收到信息，网络在信道中传输是具有不稳定性的。用通俗的话来将三次握手就是：</p>\n<blockquote>\n<p>A：喂你听到了吗，B：喂我听到了你听得到吗，A：嗯我也听得到</p>\n</blockquote>\n<h5 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h5><p>TCP 连接时全双工的，就是互相都可收发信息，所以当断开连接时，需要互相确认对方是否断开连接了，否则当信号发送不稳定时会出现一方已断开另一方还在连接的情况。<br>例如当客户端要断开连接</p>\n<ul>\n<li>客户端发送一个 FIN 包</li>\n<li>服务器收到 FIN，发送一个 ACK 包</li>\n<li>服务器关闭连接，并发送一个 FIN 包后进入关闭状态</li>\n<li>客户端回 ACK 包确认，并进入关闭状态，一段时间后无反应就断开连接，服务器端收到后也关闭连接</li>\n</ul>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><p>TCP 连接建立成功后，可以互相通信，HTTP 就发送请求下载服务器资源。HTTP 请求分为三部分组成：请求行、消息报头、请求正文</p>\n<ul>\n<li><p>请求行<br>请求行格式如下：Method Request-URI HTTP-Version CRLF<br>Method 为请求方法，Request-URI 为请求的资源路径 HTTP-Version 为版本，CRLF 表示回车或换行结尾。<br>Method 各个方法解释如下：</p>\n<ul>\n<li>GET     请求获取Request-URI所标识的资源  </li>\n<li>POST    在Request-URI所标识的资源后附加新的数据  </li>\n<li>HEAD    请求获取由Request-URI所标识的资源的响应消息报头  </li>\n<li>PUT     请求服务器存储一个资源，并用Request-URI作为其标识  </li>\n<li>DELETE  请求服务器删除Request-URI所标识的资源  </li>\n<li>TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断  </li>\n<li>CONNECT 保留将来使用  </li>\n<li>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求  </li>\n</ul>\n</li>\n</ul>\n<p>所以，一个 GET 请求格式如下：eg:GET/index.html HTTP/1.1(CRLF)</p>\n<ul>\n<li>消息报头<br>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</li>\n<li>请求正文<br>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，请求的数据格式一般为json。</li>\n</ul>\n<h3 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a>HTTP 响应</h3><p>服务器接收请求后，会返回相应，分为是：状态行、消息报头、响应正文。这里主要看状态行。<br>状态行格式如下：HTTP-Version Status-Code Reason-Phrase CRLF<br>HTTP-Version 表示服务器HTTP协议的版本；Status-Code 表示服务器发回的响应状态代码；Reason-Phrase 表示状态代码的文本描述。<br>Status-Code 分为 5 类：</p>\n<ul>\n<li>1xx：指示信息 – 表示请求已接收，继续处理</li>\n<li>2xx：成功–表示请求已被成功接收、理解、接受</li>\n<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>\n<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>\n<li>5xx：服务器端错误–服务器未能实现合法的请求</li>\n</ul>\n<p>常见的有如下：</p>\n<ul>\n<li>200 OK：请求成功</li>\n<li>400 Bad Request：客户端请求有语法错误</li>\n<li>401 Unauthorized：请求未经授权</li>\n<li>403 Forbidden：服务器收到请求，但是拒绝提供服务</li>\n<li>404 Not Found：请求资源不存在</li>\n<li>500 Internal Server Error：服务器发生不可预期的错误</li>\n<li>503 Server Unavailable：服务器当前不能处理客户端的请求</li>\n</ul>\n<p>如一个成功的响应状态行如下：eg:HTTP/1.1 200 OK</p>\n<h3 id=\"渲染页面\"><a href=\"#渲染页面\" class=\"headerlink\" title=\"渲染页面\"></a>渲染页面</h3><p>获取服务器代码后，浏览器开始下载并解析 HTML、SVG、CSS、JavaScript 等脚本。<br>解析后会生成两个内部数据结构，DOM 树和 渲染树，DOM 树表示页面结构，渲染树表示 DOM 节点如何显示。一旦两棵树构建完成，浏览器就开始绘制页面元素。<br>可以看出，DOM 树和渲染树主要由 HTML 和 CSS 解析得来，当浏览器遇到 <code>&lt;script&gt;</code> 脚本时，会停止 DOM 树的构建，先下载和解析 JS 脚本，所以最好将 JS 放页面底部，CSS 放 head 内，这样可以让浏览器最优先绘制出页面。</p>\n<h5 id=\"重排-reflow-与重绘-repaint\"><a href=\"#重排-reflow-与重绘-repaint\" class=\"headerlink\" title=\"重排(reflow)与重绘(repaint)\"></a>重排(reflow)与重绘(repaint)</h5><p>当 DOM 变化影响到元素的几何属性，如宽高的变化，增加段落等，这时浏览器需要重新计算元素的几何属性，并重新构造渲染树，这个过程称为重排，重排完成后，浏览器将所有受影响的部分重绘到屏幕上。<br>当然不是所有的情况都需要重排，例如修改某个元素的背景颜色，元素位置不发生变化，就只需要执行一次重绘。<br>重排和重绘都是需要耗费昂贵的代价，所以要尽可能避免。</p>\n<ul>\n<li>当修改元素位置或大小时，尽可能不要使整个页面都发生变化，而是只变化一小部分。如使用 <code>display:none</code> 先将其脱离文档流</li>\n<li>批量的修改 DOM,使其一次性渲染</li>\n<li>使用事件委托，减少被绑定的事件处理器。<a href=\"http://idmrchan.com/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a>  </li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"DNS-解析\"><a href=\"#DNS-解析\" class=\"headerlink\" title=\"DNS 解析\"></a>DNS 解析</h3><p>DNS 解析就是将 URL 转化为 IP 的过程，电脑会不断地在域名服务器中查询 IP 地址，直到找到为止，所以当我们输入网址到浏览器找到 IP 时会有 10～50 ms 的延迟。<br>DNS 会将查询过的 DNS 进行缓存，分为浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。浏览器缓存如 chrome 在 chrome://dns/ 内可以看到，系统缓存在 hosts 文件内。  </p>\n<h3 id=\"TCP-连接\"><a href=\"#TCP-连接\" class=\"headerlink\" title=\"TCP 连接\"></a>TCP 连接</h3><p>浏览器得到 IP 后，就像服务器发送 TCP 请求，TCP 是传输层的一种可靠的请求，HTTP 就是基于 TCP 的连接方式。</p>\n<h5 id=\"TCP-标志位\"><a href=\"#TCP-标志位\" class=\"headerlink\" title=\"TCP 标志位\"></a>TCP 标志位</h5><ul>\n<li>SYN 建立连接</li>\n<li>ACK 确认</li>\n<li>PSH push 传送</li>\n<li>FIN 结束</li>\n<li>RST 重置</li>\n<li>URG 紧急</li>\n</ul>\n<h5 id=\"三次握手\"><a href=\"#三次握手\" class=\"headerlink\" title=\"三次握手\"></a>三次握手</h5><p>当客户端要与服务端通信时，需要三次握手：</p>\n<ul>\n<li>第一次握手，客户端发送 SYN 包到 服务器，并进入 SYN_SEND 状态等待确认</li>\n<li>第二次握手，服务器接收到 SYN 包后，也发送给客户端一个 SYN+ACK 包，并进入 SYN_RECV 状态</li>\n<li>第三次握手， 客户端收到 SYN+ACK 包，向服务端发送一个 ACK 包，双方都进入 ESTABLISHED 状态，代表可以互相通信。</li>\n</ul>\n<p>为什么要三次握手，因为通信双方不能保证对方一定能收到信息，网络在信道中传输是具有不稳定性的。用通俗的话来将三次握手就是：</p>\n<blockquote>\n<p>A：喂你听到了吗，B：喂我听到了你听得到吗，A：嗯我也听得到</p>\n</blockquote>\n<h5 id=\"四次挥手\"><a href=\"#四次挥手\" class=\"headerlink\" title=\"四次挥手\"></a>四次挥手</h5><p>TCP 连接时全双工的，就是互相都可收发信息，所以当断开连接时，需要互相确认对方是否断开连接了，否则当信号发送不稳定时会出现一方已断开另一方还在连接的情况。<br>例如当客户端要断开连接</p>\n<ul>\n<li>客户端发送一个 FIN 包</li>\n<li>服务器收到 FIN，发送一个 ACK 包</li>\n<li>服务器关闭连接，并发送一个 FIN 包后进入关闭状态</li>\n<li>客户端回 ACK 包确认，并进入关闭状态，一段时间后无反应就断开连接，服务器端收到后也关闭连接</li>\n</ul>\n<h3 id=\"HTTP-请求\"><a href=\"#HTTP-请求\" class=\"headerlink\" title=\"HTTP 请求\"></a>HTTP 请求</h3><p>TCP 连接建立成功后，可以互相通信，HTTP 就发送请求下载服务器资源。HTTP 请求分为三部分组成：请求行、消息报头、请求正文</p>\n<ul>\n<li><p>请求行<br>请求行格式如下：Method Request-URI HTTP-Version CRLF<br>Method 为请求方法，Request-URI 为请求的资源路径 HTTP-Version 为版本，CRLF 表示回车或换行结尾。<br>Method 各个方法解释如下：</p>\n<ul>\n<li>GET     请求获取Request-URI所标识的资源  </li>\n<li>POST    在Request-URI所标识的资源后附加新的数据  </li>\n<li>HEAD    请求获取由Request-URI所标识的资源的响应消息报头  </li>\n<li>PUT     请求服务器存储一个资源，并用Request-URI作为其标识  </li>\n<li>DELETE  请求服务器删除Request-URI所标识的资源  </li>\n<li>TRACE   请求服务器回送收到的请求信息，主要用于测试或诊断  </li>\n<li>CONNECT 保留将来使用  </li>\n<li>OPTIONS 请求查询服务器的性能，或者查询与资源相关的选项和需求  </li>\n</ul>\n</li>\n</ul>\n<p>所以，一个 GET 请求格式如下：eg:GET/index.html HTTP/1.1(CRLF)</p>\n<ul>\n<li>消息报头<br>请求报头允许客户端向服务器传递请求的附加信息和客户端自身的信息。常见的请求报头有: Accept, Accept-Charset, Accept-Encoding, Accept-Language, Content-Type, Authorization, Cookie, User-Agent等。</li>\n<li>请求正文<br>当使用POST, PUT等方法时，通常需要客户端向服务器传递数据。这些数据就储存在请求正文中。在请求包头中有一些与请求正文相关的信息，请求的数据格式一般为json。</li>\n</ul>\n<h3 id=\"HTTP-响应\"><a href=\"#HTTP-响应\" class=\"headerlink\" title=\"HTTP 响应\"></a>HTTP 响应</h3><p>服务器接收请求后，会返回相应，分为是：状态行、消息报头、响应正文。这里主要看状态行。<br>状态行格式如下：HTTP-Version Status-Code Reason-Phrase CRLF<br>HTTP-Version 表示服务器HTTP协议的版本；Status-Code 表示服务器发回的响应状态代码；Reason-Phrase 表示状态代码的文本描述。<br>Status-Code 分为 5 类：</p>\n<ul>\n<li>1xx：指示信息 – 表示请求已接收，继续处理</li>\n<li>2xx：成功–表示请求已被成功接收、理解、接受</li>\n<li>3xx：重定向–要完成请求必须进行更进一步的操作</li>\n<li>4xx：客户端错误–请求有语法错误或请求无法实现</li>\n<li>5xx：服务器端错误–服务器未能实现合法的请求</li>\n</ul>\n<p>常见的有如下：</p>\n<ul>\n<li>200 OK：请求成功</li>\n<li>400 Bad Request：客户端请求有语法错误</li>\n<li>401 Unauthorized：请求未经授权</li>\n<li>403 Forbidden：服务器收到请求，但是拒绝提供服务</li>\n<li>404 Not Found：请求资源不存在</li>\n<li>500 Internal Server Error：服务器发生不可预期的错误</li>\n<li>503 Server Unavailable：服务器当前不能处理客户端的请求</li>\n</ul>\n<p>如一个成功的响应状态行如下：eg:HTTP/1.1 200 OK</p>\n<h3 id=\"渲染页面\"><a href=\"#渲染页面\" class=\"headerlink\" title=\"渲染页面\"></a>渲染页面</h3><p>获取服务器代码后，浏览器开始下载并解析 HTML、SVG、CSS、JavaScript 等脚本。<br>解析后会生成两个内部数据结构，DOM 树和 渲染树，DOM 树表示页面结构，渲染树表示 DOM 节点如何显示。一旦两棵树构建完成，浏览器就开始绘制页面元素。<br>可以看出，DOM 树和渲染树主要由 HTML 和 CSS 解析得来，当浏览器遇到 <code>&lt;script&gt;</code> 脚本时，会停止 DOM 树的构建，先下载和解析 JS 脚本，所以最好将 JS 放页面底部，CSS 放 head 内，这样可以让浏览器最优先绘制出页面。</p>\n<h5 id=\"重排-reflow-与重绘-repaint\"><a href=\"#重排-reflow-与重绘-repaint\" class=\"headerlink\" title=\"重排(reflow)与重绘(repaint)\"></a>重排(reflow)与重绘(repaint)</h5><p>当 DOM 变化影响到元素的几何属性，如宽高的变化，增加段落等，这时浏览器需要重新计算元素的几何属性，并重新构造渲染树，这个过程称为重排，重排完成后，浏览器将所有受影响的部分重绘到屏幕上。<br>当然不是所有的情况都需要重排，例如修改某个元素的背景颜色，元素位置不发生变化，就只需要执行一次重绘。<br>重排和重绘都是需要耗费昂贵的代价，所以要尽可能避免。</p>\n<ul>\n<li>当修改元素位置或大小时，尽可能不要使整个页面都发生变化，而是只变化一小部分。如使用 <code>display:none</code> 先将其脱离文档流</li>\n<li>批量的修改 DOM,使其一次性渲染</li>\n<li>使用事件委托，减少被绑定的事件处理器。<a href=\"http://idmrchan.com/2017/05/10/javascript-event/\" target=\"_blank\">事件委托</a>  </li>\n</ul>\n"},{"layout":"post","title":"iOS 浏览器和 WKWebView 跨域 Cookie 的问题","date":"2019-02-13T13:09:00.000Z","_content":"\n#### 问题：\n\n今天遇到了一个问题，一个跨域的请求，在 WKWebView 下始终获取不到 Cookie。然后我在浏览器里试了一下， Chrome 能带上 Cookie，而 Safari 拿不到 Cookie。\n\n如图所示，第一个请求，后台种了 Cookie\n\n![safari-first-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-first-cookie.png)\n\n发起第二个请求时，Cookie 丢失\n\n![safari-second-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-second-cookie.png)\n\n#### 原因：\n\n原因是 Safari 开启了 `Prevent corss-site tracking`，在 `Safari - Preferences - Private - Prevent cross-site tracking` 里关闭设置，重启 Safari。\n\n![safari-has-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-has-cookie.png)\n\n好的带上了，若要在 WKWebView 开启这个方法，需要在 webview 里设置：\n\n```objective-c\n[self.webView.configuration.processPool performSelector:@selector(_setCookieAcceptPolicy:) withObject:NSHTTPCookieAcceptPolicyAlways afterDelay:0];\n```\n\n然而这是个私有方法，意味着苹果是不允许开发者开启 corss-site tracking 的。\n\n当然我们不能要求用户为了兼容你的页面去设置该选项，或者将页面和后台放同一个接口下？明显也不现实。\n\n用 Safari 看了一下淘宝和京东的 Cookie，都是在同一个域名下写入的。\n\n在 Google 下可以看到淘宝在同源域名和非同源域名下都写入了 Cookie\n\n![taobao google1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google1.png)\n\n![taobao google1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google2.png)\n\n在 Safari 下只有同源域名下写入了 Cookie\n\n![taobao safari1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari1.png)\n\n![taobao safari1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari2.png)\n\n#### 解决方案：\n\n1. 使用 Nginx 来解决跨域问题，粘一下这个[帖子](http://chenkuan.cc/2017/08/27/1/)的解决思路。\n\n> **是的，也只能用nginx来解决了，其实我反而觉得这更简单，现在大部分公司的主域名绑定的也的确是nginx。**\n>\n> 1. 在主域名下，要么以下级域名的形式，要么以path的形式来组织静态页\n> 2. 然后以REST的形式组织web api的地址。\n> 3. 静态页对接口的访问全部都通过nginx。\n>\n> 这样一来，因为静态页本身就在nginx下，其对接口的访问也就相当于在同域了，其他接口也不过是通过nginx做了下透传。但完成了同域。\n>\n> 其实说这么多，提到的也都是一些老的东西，无非也就是对Safari这项设置的不满，因为我记得以前还不是这样的，莫名奇妙就来了这项设置。\n\n2. 后端通过其他方案来保存 Cookie，微信公众平台也给出如下思路，在 [iOS WKWebview 网页开发适配指南](<https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1483682025_enmey>) 中：\n\n> 变化1：跨域存取Cookie\n> 问题说明：在访问一个页面A时，如果页面A引用了另一个页面B的资源（页面A和B为不同的域名），这时页面B就被认为是第三方页面。若在页面B中设置Cookie，就会命中WKWebview下阻止第三方跨域设置Cookie的安全策略，导致问题出现。\n> 适配建议：\n> 在WKWebview中是默认阻止跨域的第三方设置Cookie。所有通过Cookie传递的信息，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间的信息传递。\n>\n> 变化2：微信原生层面的网络请求读取不到WKWebview中设置的cookie，即使域名是相同的。\n> 问题说明：如果页面的资源或图片存储的服务器依赖校验Cookie来返回数据的情况，在切换到WKWebview后，在微信内长按保存，或者点击预览大图时，原生层面发起的网络请求将不会完整地带上所设置的Cookie，会导致图片保存失败或预览失败。\n> 适配建议：\n> 建议静态资源cookie free。如果确实有信息需要传递，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间信息传递。\n\n3. 换回 UIWebView，不建议这么做，因为 iOS12 UIWebView 已经是 Deprecated，很可能 iOS13 之后就被废弃了。\n4. Native 自己写一个网络请求供 Web 调用，优点是可以完美解决 Cookie 问题，不会有跨域，缺点是可自定义程度较低，如果后台有变动，可能需要涉及到修改 Native，不能直接通过 Web 实现热更新。","source":"_posts/ios-wkwebview-cookie.markdown","raw":"---\nlayout:     post\ntitle:      \"iOS 浏览器和 WKWebView 跨域 Cookie 的问题\"\ndate:       2019-02-13 21:09:00\ntags:\n    - iOS\n    - WKWebView\n---\n\n#### 问题：\n\n今天遇到了一个问题，一个跨域的请求，在 WKWebView 下始终获取不到 Cookie。然后我在浏览器里试了一下， Chrome 能带上 Cookie，而 Safari 拿不到 Cookie。\n\n如图所示，第一个请求，后台种了 Cookie\n\n![safari-first-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-first-cookie.png)\n\n发起第二个请求时，Cookie 丢失\n\n![safari-second-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-second-cookie.png)\n\n#### 原因：\n\n原因是 Safari 开启了 `Prevent corss-site tracking`，在 `Safari - Preferences - Private - Prevent cross-site tracking` 里关闭设置，重启 Safari。\n\n![safari-has-cookie](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-has-cookie.png)\n\n好的带上了，若要在 WKWebView 开启这个方法，需要在 webview 里设置：\n\n```objective-c\n[self.webView.configuration.processPool performSelector:@selector(_setCookieAcceptPolicy:) withObject:NSHTTPCookieAcceptPolicyAlways afterDelay:0];\n```\n\n然而这是个私有方法，意味着苹果是不允许开发者开启 corss-site tracking 的。\n\n当然我们不能要求用户为了兼容你的页面去设置该选项，或者将页面和后台放同一个接口下？明显也不现实。\n\n用 Safari 看了一下淘宝和京东的 Cookie，都是在同一个域名下写入的。\n\n在 Google 下可以看到淘宝在同源域名和非同源域名下都写入了 Cookie\n\n![taobao google1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google1.png)\n\n![taobao google1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google2.png)\n\n在 Safari 下只有同源域名下写入了 Cookie\n\n![taobao safari1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari1.png)\n\n![taobao safari1](https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari2.png)\n\n#### 解决方案：\n\n1. 使用 Nginx 来解决跨域问题，粘一下这个[帖子](http://chenkuan.cc/2017/08/27/1/)的解决思路。\n\n> **是的，也只能用nginx来解决了，其实我反而觉得这更简单，现在大部分公司的主域名绑定的也的确是nginx。**\n>\n> 1. 在主域名下，要么以下级域名的形式，要么以path的形式来组织静态页\n> 2. 然后以REST的形式组织web api的地址。\n> 3. 静态页对接口的访问全部都通过nginx。\n>\n> 这样一来，因为静态页本身就在nginx下，其对接口的访问也就相当于在同域了，其他接口也不过是通过nginx做了下透传。但完成了同域。\n>\n> 其实说这么多，提到的也都是一些老的东西，无非也就是对Safari这项设置的不满，因为我记得以前还不是这样的，莫名奇妙就来了这项设置。\n\n2. 后端通过其他方案来保存 Cookie，微信公众平台也给出如下思路，在 [iOS WKWebview 网页开发适配指南](<https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1483682025_enmey>) 中：\n\n> 变化1：跨域存取Cookie\n> 问题说明：在访问一个页面A时，如果页面A引用了另一个页面B的资源（页面A和B为不同的域名），这时页面B就被认为是第三方页面。若在页面B中设置Cookie，就会命中WKWebview下阻止第三方跨域设置Cookie的安全策略，导致问题出现。\n> 适配建议：\n> 在WKWebview中是默认阻止跨域的第三方设置Cookie。所有通过Cookie传递的信息，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间的信息传递。\n>\n> 变化2：微信原生层面的网络请求读取不到WKWebview中设置的cookie，即使域名是相同的。\n> 问题说明：如果页面的资源或图片存储的服务器依赖校验Cookie来返回数据的情况，在切换到WKWebview后，在微信内长按保存，或者点击预览大图时，原生层面发起的网络请求将不会完整地带上所设置的Cookie，会导致图片保存失败或预览失败。\n> 适配建议：\n> 建议静态资源cookie free。如果确实有信息需要传递，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间信息传递。\n\n3. 换回 UIWebView，不建议这么做，因为 iOS12 UIWebView 已经是 Deprecated，很可能 iOS13 之后就被废弃了。\n4. Native 自己写一个网络请求供 Web 调用，优点是可以完美解决 Cookie 问题，不会有跨域，缺点是可自定义程度较低，如果后台有变动，可能需要涉及到修改 Native，不能直接通过 Web 实现热更新。","slug":"ios-wkwebview-cookie","published":1,"updated":"2019-05-03T06:57:10.794Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40k000k2mhsng9ebfgn","content":"<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><p>今天遇到了一个问题，一个跨域的请求，在 WKWebView 下始终获取不到 Cookie。然后我在浏览器里试了一下， Chrome 能带上 Cookie，而 Safari 拿不到 Cookie。</p>\n<p>如图所示，第一个请求，后台种了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-first-cookie.png\" alt=\"safari-first-cookie\"></p>\n<p>发起第二个请求时，Cookie 丢失</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-second-cookie.png\" alt=\"safari-second-cookie\"></p>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p>原因是 Safari 开启了 <code>Prevent corss-site tracking</code>，在 <code>Safari - Preferences - Private - Prevent cross-site tracking</code> 里关闭设置，重启 Safari。</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-has-cookie.png\" alt=\"safari-has-cookie\"></p>\n<p>好的带上了，若要在 WKWebView 开启这个方法，需要在 webview 里设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView.configuration.processPool performSelector:@selector(_setCookieAcceptPolicy:) withObject:NSHTTPCookieAcceptPolicyAlways afterDelay:0];</span><br></pre></td></tr></table></figure>\n<p>然而这是个私有方法，意味着苹果是不允许开发者开启 corss-site tracking 的。</p>\n<p>当然我们不能要求用户为了兼容你的页面去设置该选项，或者将页面和后台放同一个接口下？明显也不现实。</p>\n<p>用 Safari 看了一下淘宝和京东的 Cookie，都是在同一个域名下写入的。</p>\n<p>在 Google 下可以看到淘宝在同源域名和非同源域名下都写入了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google1.png\" alt=\"taobao google1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google2.png\" alt=\"taobao google1\"></p>\n<p>在 Safari 下只有同源域名下写入了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari1.png\" alt=\"taobao safari1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari2.png\" alt=\"taobao safari1\"></p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><ol>\n<li>使用 Nginx 来解决跨域问题，粘一下这个<a href=\"http://chenkuan.cc/2017/08/27/1/\" target=\"_blank\" rel=\"noopener\">帖子</a>的解决思路。</li>\n</ol>\n<blockquote>\n<p><strong>是的，也只能用nginx来解决了，其实我反而觉得这更简单，现在大部分公司的主域名绑定的也的确是nginx。</strong></p>\n<ol>\n<li>在主域名下，要么以下级域名的形式，要么以path的形式来组织静态页</li>\n<li>然后以REST的形式组织web api的地址。</li>\n<li>静态页对接口的访问全部都通过nginx。</li>\n</ol>\n<p>这样一来，因为静态页本身就在nginx下，其对接口的访问也就相当于在同域了，其他接口也不过是通过nginx做了下透传。但完成了同域。</p>\n<p>其实说这么多，提到的也都是一些老的东西，无非也就是对Safari这项设置的不满，因为我记得以前还不是这样的，莫名奇妙就来了这项设置。</p>\n</blockquote>\n<ol start=\"2\">\n<li>后端通过其他方案来保存 Cookie，微信公众平台也给出如下思路，在 <a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1483682025_enmey\" target=\"_blank\" rel=\"noopener\">iOS WKWebview 网页开发适配指南</a> 中：</li>\n</ol>\n<blockquote>\n<p>变化1：跨域存取Cookie<br>问题说明：在访问一个页面A时，如果页面A引用了另一个页面B的资源（页面A和B为不同的域名），这时页面B就被认为是第三方页面。若在页面B中设置Cookie，就会命中WKWebview下阻止第三方跨域设置Cookie的安全策略，导致问题出现。<br>适配建议：<br>在WKWebview中是默认阻止跨域的第三方设置Cookie。所有通过Cookie传递的信息，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间的信息传递。</p>\n<p>变化2：微信原生层面的网络请求读取不到WKWebview中设置的cookie，即使域名是相同的。<br>问题说明：如果页面的资源或图片存储的服务器依赖校验Cookie来返回数据的情况，在切换到WKWebview后，在微信内长按保存，或者点击预览大图时，原生层面发起的网络请求将不会完整地带上所设置的Cookie，会导致图片保存失败或预览失败。<br>适配建议：<br>建议静态资源cookie free。如果确实有信息需要传递，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间信息传递。</p>\n</blockquote>\n<ol start=\"3\">\n<li>换回 UIWebView，不建议这么做，因为 iOS12 UIWebView 已经是 Deprecated，很可能 iOS13 之后就被废弃了。</li>\n<li>Native 自己写一个网络请求供 Web 调用，优点是可以完美解决 Cookie 问题，不会有跨域，缺点是可自定义程度较低，如果后台有变动，可能需要涉及到修改 Native，不能直接通过 Web 实现热更新。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h4><p>今天遇到了一个问题，一个跨域的请求，在 WKWebView 下始终获取不到 Cookie。然后我在浏览器里试了一下， Chrome 能带上 Cookie，而 Safari 拿不到 Cookie。</p>\n<p>如图所示，第一个请求，后台种了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-first-cookie.png\" alt=\"safari-first-cookie\"></p>\n<p>发起第二个请求时，Cookie 丢失</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-second-cookie.png\" alt=\"safari-second-cookie\"></p>\n<h4 id=\"原因：\"><a href=\"#原因：\" class=\"headerlink\" title=\"原因：\"></a>原因：</h4><p>原因是 Safari 开启了 <code>Prevent corss-site tracking</code>，在 <code>Safari - Preferences - Private - Prevent cross-site tracking</code> 里关闭设置，重启 Safari。</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/safari-has-cookie.png\" alt=\"safari-has-cookie\"></p>\n<p>好的带上了，若要在 WKWebView 开启这个方法，需要在 webview 里设置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[self.webView.configuration.processPool performSelector:@selector(_setCookieAcceptPolicy:) withObject:NSHTTPCookieAcceptPolicyAlways afterDelay:0];</span><br></pre></td></tr></table></figure>\n<p>然而这是个私有方法，意味着苹果是不允许开发者开启 corss-site tracking 的。</p>\n<p>当然我们不能要求用户为了兼容你的页面去设置该选项，或者将页面和后台放同一个接口下？明显也不现实。</p>\n<p>用 Safari 看了一下淘宝和京东的 Cookie，都是在同一个域名下写入的。</p>\n<p>在 Google 下可以看到淘宝在同源域名和非同源域名下都写入了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google1.png\" alt=\"taobao google1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao google2.png\" alt=\"taobao google1\"></p>\n<p>在 Safari 下只有同源域名下写入了 Cookie</p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari1.png\" alt=\"taobao safari1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/pansy-cx/pansy-cx.github.io/master/images/ios-wkwebview-cookie/taobao safari2.png\" alt=\"taobao safari1\"></p>\n<h4 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h4><ol>\n<li>使用 Nginx 来解决跨域问题，粘一下这个<a href=\"http://chenkuan.cc/2017/08/27/1/\" target=\"_blank\" rel=\"noopener\">帖子</a>的解决思路。</li>\n</ol>\n<blockquote>\n<p><strong>是的，也只能用nginx来解决了，其实我反而觉得这更简单，现在大部分公司的主域名绑定的也的确是nginx。</strong></p>\n<ol>\n<li>在主域名下，要么以下级域名的形式，要么以path的形式来组织静态页</li>\n<li>然后以REST的形式组织web api的地址。</li>\n<li>静态页对接口的访问全部都通过nginx。</li>\n</ol>\n<p>这样一来，因为静态页本身就在nginx下，其对接口的访问也就相当于在同域了，其他接口也不过是通过nginx做了下透传。但完成了同域。</p>\n<p>其实说这么多，提到的也都是一些老的东西，无非也就是对Safari这项设置的不满，因为我记得以前还不是这样的，莫名奇妙就来了这项设置。</p>\n</blockquote>\n<ol start=\"2\">\n<li>后端通过其他方案来保存 Cookie，微信公众平台也给出如下思路，在 <a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1483682025_enmey\" target=\"_blank\" rel=\"noopener\">iOS WKWebview 网页开发适配指南</a> 中：</li>\n</ol>\n<blockquote>\n<p>变化1：跨域存取Cookie<br>问题说明：在访问一个页面A时，如果页面A引用了另一个页面B的资源（页面A和B为不同的域名），这时页面B就被认为是第三方页面。若在页面B中设置Cookie，就会命中WKWebview下阻止第三方跨域设置Cookie的安全策略，导致问题出现。<br>适配建议：<br>在WKWebview中是默认阻止跨域的第三方设置Cookie。所有通过Cookie传递的信息，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间的信息传递。</p>\n<p>变化2：微信原生层面的网络请求读取不到WKWebview中设置的cookie，即使域名是相同的。<br>问题说明：如果页面的资源或图片存储的服务器依赖校验Cookie来返回数据的情况，在切换到WKWebview后，在微信内长按保存，或者点击预览大图时，原生层面发起的网络请求将不会完整地带上所设置的Cookie，会导致图片保存失败或预览失败。<br>适配建议：<br>建议静态资源cookie free。如果确实有信息需要传递，可通过业务后台存储需要传递的信息，然后给页面一个存储信息相对应的access_token加密码，再通过Url中加入自己业务的access_token进行页面间信息传递。</p>\n</blockquote>\n<ol start=\"3\">\n<li>换回 UIWebView，不建议这么做，因为 iOS12 UIWebView 已经是 Deprecated，很可能 iOS13 之后就被废弃了。</li>\n<li>Native 自己写一个网络请求供 Web 调用，优点是可以完美解决 Cookie 问题，不会有跨域，缺点是可自定义程度较低，如果后台有变动，可能需要涉及到修改 Native，不能直接通过 Web 实现热更新。</li>\n</ol>\n"},{"layout":"post","title":"JS 模块化笔记","date":"2017-03-07T09:13:00.000Z","_content":"\n### 什么是 JS 模块化\n\n模块化设计是指在对一定范围内的不同功能或相同功能不同性能、不同规格的产品进行功能分析的基础上，划分并设计出一系列功能模块，通过模块的选择和组合可以构成不同的产品，以满足市场的不同需求的设计方法。  \n\n随着网页变复杂，JS模块化成了必不可少的迫切需求，然而 JS 不是一种模块化的语言，他不支持「类」(class)，更不支持「模块」(module)。（ES6 正在支持）。在 ES6 正式发布之前，Javascript 社区做了很多努力，在现有的运行环境中，实现「模块」的效果。  \n\n##### 最简单的 JS 代码  \n  \n```js\nfunction a(){/* code */};\nfunction b(){/* code */};\n```\n\n全局命名，容易起冲突。  \n\n##### 使用方法来命名函数 (namespace) \n   \n```js\nvar obj1 = {\n  a: function(){};\n  b: funciton(){};\n}\nobj1.a();\n```\n\n稍微减少全局数量，但本质是对象，不安全  \n\n##### 立即执行函数(IIFE) 写法  \n  \n```js\nvar Module = (function(){\n    var _count = 0;\n    var a = function(){\n      console.log(_count);\n    };\n\n    return {\n      a: a\n    };\n  })()\n```\n\n使用闭包，可使外部无法直接读取内部 _count 变量_\n\n##### 引入依赖  \n\n如果一个模块过大，或需要继承另一个模块，则需要引入模块。  \n\n```js\nvar module = (function($){\n    var _$body = $('body');   //jQuery 方法\n    var a = function(){}\n  })(jQuery)\n```\n\n这就是所谓的模块模式。\n  \n### 加载 `<script>`\n\n```html\n<script src=\"module1.js\"></script>\n<script src=\"module2.js\"></script>\n<script src=\"libraryA.js\"></script>\n<script src=\"module3.js\"></script>\n```\n\n这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的接口调用都是在一个作用域中。\n\n这种原始的加载方式暴露了一些显而易见的弊端：\n\n- 全局作用域下容易造成变量冲突  \n- 文件只能按照 `<script>` 的书写顺序进行加载  \n- 开发人员必须主观解决模块和代码库的依赖关系  \n- 在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪  \n\n一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 YUI 库。  \n因为 YUI 以不再维护，我就不看了。。。\n\n### 模块化使用  \n\n##### CommonJS \n\nCommonJS 是一套规范，为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，通过 require() 来导入其他模块的输出到当前模块作用域中。  \n\nNodeJs 就采用了这么一种规范，他是这么在加载模块的。  \n  \n```js\n//module1.js\nmodule.exports = function(){\n  return 'hello world';\n}\n```\n\n```js\n//module2.js\nvar mod = require('./module1');\nconsole.log(mod);\n```\n\n这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现「假死」状况。必须的等一个加载完毕后才能执行下一个。如何异步加载？ \n\n##### AMD  \n\n「Asynchronous Module Definition」，这种规范是异步的加载模块， requireJs 应用了这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行：  \n  \n```js\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好    \n  a.doSomething()  \n  b.doSomething()    \n  //...\n})\n```\n\n优点：  \n- 适合在浏览器异步加载  \n\n缺点：\n- 代码阅读顺序困难，需提前加载所有模块  \n- 不符合通用模块化思维方式，使一种妥协的实现  \n\n实现：\n- require.js  \n- curl  \n\n##### CMD \n  \n「Common Module Definition」，CMD 也是异步加载，依赖就近，需要时在进行 require \n  \n```js\ndefine(function(require, exports, module) {   \n  var a = require('./a')   // 依赖可以就近书写\n  a.doSomething()   \n  var b = require('./b')    \n  b.doSomething()  \n  // ...\n}\n```\n\n优点：  \n- 依赖就近，延迟执行   \n\n缺点：\n- 依赖 SPM 打包，模块的加载逻辑偏重  \n\n实现：\n- sea.js  \n- coolie  \n\n##### CommonJS、AMD、CMD 区别：\n  \n- AMD/CMD 都是异步模块定义  \n- AMD是提前加载，CMD是按需加载  \n- 二者都是 CommonJS 的一种规范实现定义\n\n##### ES6 module  \n  \nEcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。  \n  \n```js\nimport \"jquery\";\nexport function doStuff() {}\nmodule \"localModule\" {}\n```\n\n实现：\n- Babel\n\n### webpack  \n在上面的分析过程中，我们提到的模块仅仅是指 JavaScript 模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。  \nwebpack 就是将他们都视作模块并通过 require 方式加载。  \n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 `<style>` 标签中执行。  \n\n### webpack、AMD/CMD、Gulp/Grunp 关系  \n\n- Gulp/Grunt 是一种工具，能够优化前端工作流程。使用 Gulp/Grunt，然后配置需要的插件，就可以实现如自动刷新页面、combo、压缩 css、js、编译 less 等等。  \n- AMD/CMD 则是一种模块化的概念，他的具体实现使 requirejs/seajs 。通过在页面上加载一个 CMD/AMD 解释器，让浏览器识别 define、Module 等东西，属于在线「编译」模块的方案  \n- 而 webpack 同类还有 browserify，则是预编译模块，现在本地编写 JS，不管是 AMD/CMD 都可以，并编译成浏览器认识的 JS  \n\n### 参考文章  \n\n- <a href=\"http://huangxuan.me/js-module-7day/#/\" target=\"_blank\">黄玄-JavaScript 模块化七日谈</a>\n- <a href=\"http://zhaoda.net/webpack-handbook/module-system.html\" target=\"_blank\">WebPack中文指南</a>\n- <a href=\"https://www.zhihu.com/question/37020798\" target=\"_blank\">知乎问题</a>\n\n\n\n","source":"_posts/javascript-module.markdown","raw":"---\nlayout:     post\ntitle:      \"JS 模块化笔记\"\ndate:       2017-03-07 17:13:00\ntags:\n    - JavaScript\n---\n\n### 什么是 JS 模块化\n\n模块化设计是指在对一定范围内的不同功能或相同功能不同性能、不同规格的产品进行功能分析的基础上，划分并设计出一系列功能模块，通过模块的选择和组合可以构成不同的产品，以满足市场的不同需求的设计方法。  \n\n随着网页变复杂，JS模块化成了必不可少的迫切需求，然而 JS 不是一种模块化的语言，他不支持「类」(class)，更不支持「模块」(module)。（ES6 正在支持）。在 ES6 正式发布之前，Javascript 社区做了很多努力，在现有的运行环境中，实现「模块」的效果。  \n\n##### 最简单的 JS 代码  \n  \n```js\nfunction a(){/* code */};\nfunction b(){/* code */};\n```\n\n全局命名，容易起冲突。  \n\n##### 使用方法来命名函数 (namespace) \n   \n```js\nvar obj1 = {\n  a: function(){};\n  b: funciton(){};\n}\nobj1.a();\n```\n\n稍微减少全局数量，但本质是对象，不安全  \n\n##### 立即执行函数(IIFE) 写法  \n  \n```js\nvar Module = (function(){\n    var _count = 0;\n    var a = function(){\n      console.log(_count);\n    };\n\n    return {\n      a: a\n    };\n  })()\n```\n\n使用闭包，可使外部无法直接读取内部 _count 变量_\n\n##### 引入依赖  \n\n如果一个模块过大，或需要继承另一个模块，则需要引入模块。  \n\n```js\nvar module = (function($){\n    var _$body = $('body');   //jQuery 方法\n    var a = function(){}\n  })(jQuery)\n```\n\n这就是所谓的模块模式。\n  \n### 加载 `<script>`\n\n```html\n<script src=\"module1.js\"></script>\n<script src=\"module2.js\"></script>\n<script src=\"libraryA.js\"></script>\n<script src=\"module3.js\"></script>\n```\n\n这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的接口调用都是在一个作用域中。\n\n这种原始的加载方式暴露了一些显而易见的弊端：\n\n- 全局作用域下容易造成变量冲突  \n- 文件只能按照 `<script>` 的书写顺序进行加载  \n- 开发人员必须主观解决模块和代码库的依赖关系  \n- 在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪  \n\n一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 YUI 库。  \n因为 YUI 以不再维护，我就不看了。。。\n\n### 模块化使用  \n\n##### CommonJS \n\nCommonJS 是一套规范，为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，通过 require() 来导入其他模块的输出到当前模块作用域中。  \n\nNodeJs 就采用了这么一种规范，他是这么在加载模块的。  \n  \n```js\n//module1.js\nmodule.exports = function(){\n  return 'hello world';\n}\n```\n\n```js\n//module2.js\nvar mod = require('./module1');\nconsole.log(mod);\n```\n\n这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现「假死」状况。必须的等一个加载完毕后才能执行下一个。如何异步加载？ \n\n##### AMD  \n\n「Asynchronous Module Definition」，这种规范是异步的加载模块， requireJs 应用了这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行：  \n  \n```js\n// AMD 默认推荐的是\ndefine(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好    \n  a.doSomething()  \n  b.doSomething()    \n  //...\n})\n```\n\n优点：  \n- 适合在浏览器异步加载  \n\n缺点：\n- 代码阅读顺序困难，需提前加载所有模块  \n- 不符合通用模块化思维方式，使一种妥协的实现  \n\n实现：\n- require.js  \n- curl  \n\n##### CMD \n  \n「Common Module Definition」，CMD 也是异步加载，依赖就近，需要时在进行 require \n  \n```js\ndefine(function(require, exports, module) {   \n  var a = require('./a')   // 依赖可以就近书写\n  a.doSomething()   \n  var b = require('./b')    \n  b.doSomething()  \n  // ...\n}\n```\n\n优点：  \n- 依赖就近，延迟执行   \n\n缺点：\n- 依赖 SPM 打包，模块的加载逻辑偏重  \n\n实现：\n- sea.js  \n- coolie  \n\n##### CommonJS、AMD、CMD 区别：\n  \n- AMD/CMD 都是异步模块定义  \n- AMD是提前加载，CMD是按需加载  \n- 二者都是 CommonJS 的一种规范实现定义\n\n##### ES6 module  \n  \nEcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。  \n  \n```js\nimport \"jquery\";\nexport function doStuff() {}\nmodule \"localModule\" {}\n```\n\n实现：\n- Babel\n\n### webpack  \n在上面的分析过程中，我们提到的模块仅仅是指 JavaScript 模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。  \nwebpack 就是将他们都视作模块并通过 require 方式加载。  \n在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 `<style>` 标签中执行。  \n\n### webpack、AMD/CMD、Gulp/Grunp 关系  \n\n- Gulp/Grunt 是一种工具，能够优化前端工作流程。使用 Gulp/Grunt，然后配置需要的插件，就可以实现如自动刷新页面、combo、压缩 css、js、编译 less 等等。  \n- AMD/CMD 则是一种模块化的概念，他的具体实现使 requirejs/seajs 。通过在页面上加载一个 CMD/AMD 解释器，让浏览器识别 define、Module 等东西，属于在线「编译」模块的方案  \n- 而 webpack 同类还有 browserify，则是预编译模块，现在本地编写 JS，不管是 AMD/CMD 都可以，并编译成浏览器认识的 JS  \n\n### 参考文章  \n\n- <a href=\"http://huangxuan.me/js-module-7day/#/\" target=\"_blank\">黄玄-JavaScript 模块化七日谈</a>\n- <a href=\"http://zhaoda.net/webpack-handbook/module-system.html\" target=\"_blank\">WebPack中文指南</a>\n- <a href=\"https://www.zhihu.com/question/37020798\" target=\"_blank\">知乎问题</a>\n\n\n\n","slug":"javascript-module","published":1,"updated":"2018-05-09T08:18:54.598Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40l000m2mhsc03m802w","content":"<h3 id=\"什么是-JS-模块化\"><a href=\"#什么是-JS-模块化\" class=\"headerlink\" title=\"什么是 JS 模块化\"></a>什么是 JS 模块化</h3><p>模块化设计是指在对一定范围内的不同功能或相同功能不同性能、不同规格的产品进行功能分析的基础上，划分并设计出一系列功能模块，通过模块的选择和组合可以构成不同的产品，以满足市场的不同需求的设计方法。  </p>\n<p>随着网页变复杂，JS模块化成了必不可少的迫切需求，然而 JS 不是一种模块化的语言，他不支持「类」(class)，更不支持「模块」(module)。（ES6 正在支持）。在 ES6 正式发布之前，Javascript 社区做了很多努力，在现有的运行环境中，实现「模块」的效果。  </p>\n<h5 id=\"最简单的-JS-代码\"><a href=\"#最简单的-JS-代码\" class=\"headerlink\" title=\"最简单的 JS 代码\"></a>最简单的 JS 代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* code */</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* code */</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>全局命名，容易起冲突。  </p>\n<h5 id=\"使用方法来命名函数-namespace\"><a href=\"#使用方法来命名函数-namespace\" class=\"headerlink\" title=\"使用方法来命名函数 (namespace)\"></a>使用方法来命名函数 (namespace)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">  b: funciton()&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.a();</span><br></pre></td></tr></table></figure>\n<p>稍微减少全局数量，但本质是对象，不安全  </p>\n<h5 id=\"立即执行函数-IIFE-写法\"><a href=\"#立即执行函数-IIFE-写法\" class=\"headerlink\" title=\"立即执行函数(IIFE) 写法\"></a>立即执行函数(IIFE) 写法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Module = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(_count);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      a: a</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<p>使用闭包，可使外部无法直接读取内部 <em>count 变量</em></p>\n<h5 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h5><p>如果一个模块过大，或需要继承另一个模块，则需要引入模块。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _$body = $(<span class=\"string\">'body'</span>);   <span class=\"comment\">//jQuery 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  &#125;)(jQuery)</span><br></pre></td></tr></table></figure>\n<p>这就是所谓的模块模式。</p>\n<h3 id=\"加载-lt-script-gt\"><a href=\"#加载-lt-script-gt\" class=\"headerlink\" title=\"加载 &lt;script&gt;\"></a>加载 <code>&lt;script&gt;</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"libraryA.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的接口调用都是在一个作用域中。</p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：</p>\n<ul>\n<li>全局作用域下容易造成变量冲突  </li>\n<li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载  </li>\n<li>开发人员必须主观解决模块和代码库的依赖关系  </li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪  </li>\n</ul>\n<p>一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 YUI 库。<br>因为 YUI 以不再维护，我就不看了。。。</p>\n<h3 id=\"模块化使用\"><a href=\"#模块化使用\" class=\"headerlink\" title=\"模块化使用\"></a>模块化使用</h3><h5 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h5><p>CommonJS 是一套规范，为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，通过 require() 来导入其他模块的输出到当前模块作用域中。  </p>\n<p>NodeJs 就采用了这么一种规范，他是这么在加载模块的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module1.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module2.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./module1'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mod);</span><br></pre></td></tr></table></figure>\n<p>这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现「假死」状况。必须的等一个加载完毕后才能执行下一个。如何异步加载？ </p>\n<h5 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h5><p>「Asynchronous Module Definition」，这种规范是异步的加载模块， requireJs 应用了这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐的是</span></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖必须一开始就写好    </span></span><br><span class=\"line\">  a.doSomething()  </span><br><span class=\"line\">  b.doSomething()    </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>优点：  </p>\n<ul>\n<li>适合在浏览器异步加载  </li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>代码阅读顺序困难，需提前加载所有模块  </li>\n<li>不符合通用模块化思维方式，使一种妥协的实现  </li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>require.js  </li>\n<li>curl  </li>\n</ul>\n<h5 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h5><p>「Common Module Definition」，CMD 也是异步加载，依赖就近，需要时在进行 require </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)   <span class=\"comment\">// 依赖可以就近书写</span></span><br><span class=\"line\">  a.doSomething()   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)    </span><br><span class=\"line\">  b.doSomething()  </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：  </p>\n<ul>\n<li>依赖就近，延迟执行   </li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>依赖 SPM 打包，模块的加载逻辑偏重  </li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>sea.js  </li>\n<li>coolie  </li>\n</ul>\n<h5 id=\"CommonJS、AMD、CMD-区别：\"><a href=\"#CommonJS、AMD、CMD-区别：\" class=\"headerlink\" title=\"CommonJS、AMD、CMD 区别：\"></a>CommonJS、AMD、CMD 区别：</h5><ul>\n<li>AMD/CMD 都是异步模块定义  </li>\n<li>AMD是提前加载，CMD是按需加载  </li>\n<li>二者都是 CommonJS 的一种规范实现定义</li>\n</ul>\n<h5 id=\"ES6-module\"><a href=\"#ES6-module\" class=\"headerlink\" title=\"ES6 module\"></a>ES6 module</h5><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>实现：</p>\n<ul>\n<li>Babel</li>\n</ul>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><p>在上面的分析过程中，我们提到的模块仅仅是指 JavaScript 模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。<br>webpack 就是将他们都视作模块并通过 require 方式加载。<br>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。  </p>\n<h3 id=\"webpack、AMD-CMD、Gulp-Grunp-关系\"><a href=\"#webpack、AMD-CMD、Gulp-Grunp-关系\" class=\"headerlink\" title=\"webpack、AMD/CMD、Gulp/Grunp 关系\"></a>webpack、AMD/CMD、Gulp/Grunp 关系</h3><ul>\n<li>Gulp/Grunt 是一种工具，能够优化前端工作流程。使用 Gulp/Grunt，然后配置需要的插件，就可以实现如自动刷新页面、combo、压缩 css、js、编译 less 等等。  </li>\n<li>AMD/CMD 则是一种模块化的概念，他的具体实现使 requirejs/seajs 。通过在页面上加载一个 CMD/AMD 解释器，让浏览器识别 define、Module 等东西，属于在线「编译」模块的方案  </li>\n<li>而 webpack 同类还有 browserify，则是预编译模块，现在本地编写 JS，不管是 AMD/CMD 都可以，并编译成浏览器认识的 JS  </li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://huangxuan.me/js-module-7day/#/\" target=\"_blank\">黄玄-JavaScript 模块化七日谈</a></li>\n<li><a href=\"http://zhaoda.net/webpack-handbook/module-system.html\" target=\"_blank\">WebPack中文指南</a></li>\n<li><a href=\"https://www.zhihu.com/question/37020798\" target=\"_blank\">知乎问题</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"什么是-JS-模块化\"><a href=\"#什么是-JS-模块化\" class=\"headerlink\" title=\"什么是 JS 模块化\"></a>什么是 JS 模块化</h3><p>模块化设计是指在对一定范围内的不同功能或相同功能不同性能、不同规格的产品进行功能分析的基础上，划分并设计出一系列功能模块，通过模块的选择和组合可以构成不同的产品，以满足市场的不同需求的设计方法。  </p>\n<p>随着网页变复杂，JS模块化成了必不可少的迫切需求，然而 JS 不是一种模块化的语言，他不支持「类」(class)，更不支持「模块」(module)。（ES6 正在支持）。在 ES6 正式发布之前，Javascript 社区做了很多努力，在现有的运行环境中，实现「模块」的效果。  </p>\n<h5 id=\"最简单的-JS-代码\"><a href=\"#最简单的-JS-代码\" class=\"headerlink\" title=\"最简单的 JS 代码\"></a>最简单的 JS 代码</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* code */</span>&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"comment\">/* code */</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>全局命名，容易起冲突。  </p>\n<h5 id=\"使用方法来命名函数-namespace\"><a href=\"#使用方法来命名函数-namespace\" class=\"headerlink\" title=\"使用方法来命名函数 (namespace)\"></a>使用方法来命名函数 (namespace)</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  a: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">  b: funciton()&#123;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj1.a();</span><br></pre></td></tr></table></figure>\n<p>稍微减少全局数量，但本质是对象，不安全  </p>\n<h5 id=\"立即执行函数-IIFE-写法\"><a href=\"#立即执行函数-IIFE-写法\" class=\"headerlink\" title=\"立即执行函数(IIFE) 写法\"></a>立即执行函数(IIFE) 写法</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Module = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(_count);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      a: a</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;)()</span><br></pre></td></tr></table></figure>\n<p>使用闭包，可使外部无法直接读取内部 <em>count 变量</em></p>\n<h5 id=\"引入依赖\"><a href=\"#引入依赖\" class=\"headerlink\" title=\"引入依赖\"></a>引入依赖</h5><p>如果一个模块过大，或需要继承另一个模块，则需要引入模块。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"built_in\">module</span> = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> _$body = $(<span class=\"string\">'body'</span>);   <span class=\"comment\">//jQuery 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  &#125;)(jQuery)</span><br></pre></td></tr></table></figure>\n<p>这就是所谓的模块模式。</p>\n<h3 id=\"加载-lt-script-gt\"><a href=\"#加载-lt-script-gt\" class=\"headerlink\" title=\"加载 &lt;script&gt;\"></a>加载 <code>&lt;script&gt;</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module1.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module2.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"libraryA.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"module3.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这是最原始的 JavaScript 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 window 对象中，不同模块的接口调用都是在一个作用域中。</p>\n<p>这种原始的加载方式暴露了一些显而易见的弊端：</p>\n<ul>\n<li>全局作用域下容易造成变量冲突  </li>\n<li>文件只能按照 <code>&lt;script&gt;</code> 的书写顺序进行加载  </li>\n<li>开发人员必须主观解决模块和代码库的依赖关系  </li>\n<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪  </li>\n</ul>\n<p>一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 YUI 库。<br>因为 YUI 以不再维护，我就不看了。。。</p>\n<h3 id=\"模块化使用\"><a href=\"#模块化使用\" class=\"headerlink\" title=\"模块化使用\"></a>模块化使用</h3><h5 id=\"CommonJS\"><a href=\"#CommonJS\" class=\"headerlink\" title=\"CommonJS\"></a>CommonJS</h5><p>CommonJS 是一套规范，为了解决 JavaScript 的作用域问题而定义的模块形式，可以使每个模块它自身的命名空间中执行。该规范的主要内容是，模块必须通过 module.exports 导出对外的变量或接口，通过 require() 来导入其他模块的输出到当前模块作用域中。  </p>\n<p>NodeJs 就采用了这么一种规范，他是这么在加载模块的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module1.js</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'hello world'</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//module2.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> mod = <span class=\"built_in\">require</span>(<span class=\"string\">'./module1'</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mod);</span><br></pre></td></tr></table></figure>\n<p>这种写法适合服务端，因为在服务器读取模块都是在本地磁盘，加载速度很快。但是如果在客户端，加载模块的时候有可能出现「假死」状况。必须的等一个加载完毕后才能执行下一个。如何异步加载？ </p>\n<h5 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h5><p>「Asynchronous Module Definition」，这种规范是异步的加载模块， requireJs 应用了这一规范。先定义所有依赖，然后在加载完成后的回调函数中执行：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// AMD 默认推荐的是</span></span><br><span class=\"line\">define([<span class=\"string\">'./a'</span>, <span class=\"string\">'./b'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;  <span class=\"comment\">// 依赖必须一开始就写好    </span></span><br><span class=\"line\">  a.doSomething()  </span><br><span class=\"line\">  b.doSomething()    </span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>优点：  </p>\n<ul>\n<li>适合在浏览器异步加载  </li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>代码阅读顺序困难，需提前加载所有模块  </li>\n<li>不符合通用模块化思维方式，使一种妥协的实现  </li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>require.js  </li>\n<li>curl  </li>\n</ul>\n<h5 id=\"CMD\"><a href=\"#CMD\" class=\"headerlink\" title=\"CMD\"></a>CMD</h5><p>「Common Module Definition」，CMD 也是异步加载，依赖就近，需要时在进行 require </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require, exports, module</span>) </span>&#123;   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">'./a'</span>)   <span class=\"comment\">// 依赖可以就近书写</span></span><br><span class=\"line\">  a.doSomething()   </span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">'./b'</span>)    </span><br><span class=\"line\">  b.doSomething()  </span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>优点：  </p>\n<ul>\n<li>依赖就近，延迟执行   </li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>依赖 SPM 打包，模块的加载逻辑偏重  </li>\n</ul>\n<p>实现：</p>\n<ul>\n<li>sea.js  </li>\n<li>coolie  </li>\n</ul>\n<h5 id=\"CommonJS、AMD、CMD-区别：\"><a href=\"#CommonJS、AMD、CMD-区别：\" class=\"headerlink\" title=\"CommonJS、AMD、CMD 区别：\"></a>CommonJS、AMD、CMD 区别：</h5><ul>\n<li>AMD/CMD 都是异步模块定义  </li>\n<li>AMD是提前加载，CMD是按需加载  </li>\n<li>二者都是 CommonJS 的一种规范实现定义</li>\n</ul>\n<h5 id=\"ES6-module\"><a href=\"#ES6-module\" class=\"headerlink\" title=\"ES6 module\"></a>ES6 module</h5><p>EcmaScript6 标准增加了 JavaScript 语言层面的模块体系定义。ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS 和 AMD 模块，都只能在运行时确定这些东西。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"jquery\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">doStuff</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span> <span class=\"string\">\"localModule\"</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>实现：</p>\n<ul>\n<li>Babel</li>\n</ul>\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><p>在上面的分析过程中，我们提到的模块仅仅是指 JavaScript 模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、HTML 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 coffeescript、 less、 sass、众多的模板库、多语言系统（i18n）等等。<br>webpack 就是将他们都视作模块并通过 require 方式加载。<br>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用 LESS 写的样式模块，可以先用 LESS 加载器将它转成一个CSS 模块，在通过 CSS 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。  </p>\n<h3 id=\"webpack、AMD-CMD、Gulp-Grunp-关系\"><a href=\"#webpack、AMD-CMD、Gulp-Grunp-关系\" class=\"headerlink\" title=\"webpack、AMD/CMD、Gulp/Grunp 关系\"></a>webpack、AMD/CMD、Gulp/Grunp 关系</h3><ul>\n<li>Gulp/Grunt 是一种工具，能够优化前端工作流程。使用 Gulp/Grunt，然后配置需要的插件，就可以实现如自动刷新页面、combo、压缩 css、js、编译 less 等等。  </li>\n<li>AMD/CMD 则是一种模块化的概念，他的具体实现使 requirejs/seajs 。通过在页面上加载一个 CMD/AMD 解释器，让浏览器识别 define、Module 等东西，属于在线「编译」模块的方案  </li>\n<li>而 webpack 同类还有 browserify，则是预编译模块，现在本地编写 JS，不管是 AMD/CMD 都可以，并编译成浏览器认识的 JS  </li>\n</ul>\n<h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><ul>\n<li><a href=\"http://huangxuan.me/js-module-7day/#/\" target=\"_blank\">黄玄-JavaScript 模块化七日谈</a></li>\n<li><a href=\"http://zhaoda.net/webpack-handbook/module-system.html\" target=\"_blank\">WebPack中文指南</a></li>\n<li><a href=\"https://www.zhihu.com/question/37020798\" target=\"_blank\">知乎问题</a></li>\n</ul>\n"},{"layout":"post","title":"JS 事件委托","date":"2017-05-10T03:27:00.000Z","_content":"\n### 事件派发\n\n页面的哪一部分拥有特定的事件？在此问题是，浏览器开发厂家还是一致的，如果你单击某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。  \n事件流描述的是页面中的接收事件顺序，在此上有两种不同的方案，事件冒泡（event bubbling）和事件捕获（event capturing）\n\n##### 事件冒泡\n\n事件开始时由最具体的元素（文档嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）  \n简单的说就是从 child -> parent\n\n##### 事件捕获\n\n事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。  \n从 parent -> child\n\n选择哪种？  \n由于老版本的原因，很少有人用捕获，建议使用事件冒泡。 addEventListener (事件监听) 也提供了选择的方法。false（执行冒泡）或者true（执行捕获），默认 false\n\n### 事件监听\n\n```js\nvar id = document.getElementById('id');\n\nvar fn = function(e) {\n    e = e || window.event;\n    // ...\n}\nif(id.addEventListener) {\n    id.addEventListener('click', fn, false);\n}else if(id.attachEvent){               // IE8\n    id.attachEvent('onclick', fn);\n}\n```\n\n### 事件委托\n\n举个例子  \n\n```html\n<ul id=\"list\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n</ul>\n```\n\n```js\nvar list = document.querySelector('#list')\nlist.addEventListener('click',function (e){\n    e = e || window.event;\n    var t = e.target || e.srcElement;   // IE8\n    if(t.tagName === 'LI'){\n        console.log('当前元素事件触发成功')\n    }\n},false)\n```\n\n通过事件委托，我们可以  \n\n- 减少监听器\n- 监听动态内容\n\n\n","source":"_posts/javascript-event.markdown","raw":"---\nlayout:     post\ntitle:      \"JS 事件委托\"\ndate:       2017-05-10 11:27:00\ntags:\n    - JavaScript\n---\n\n### 事件派发\n\n页面的哪一部分拥有特定的事件？在此问题是，浏览器开发厂家还是一致的，如果你单击某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。  \n事件流描述的是页面中的接收事件顺序，在此上有两种不同的方案，事件冒泡（event bubbling）和事件捕获（event capturing）\n\n##### 事件冒泡\n\n事件开始时由最具体的元素（文档嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）  \n简单的说就是从 child -> parent\n\n##### 事件捕获\n\n事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。  \n从 parent -> child\n\n选择哪种？  \n由于老版本的原因，很少有人用捕获，建议使用事件冒泡。 addEventListener (事件监听) 也提供了选择的方法。false（执行冒泡）或者true（执行捕获），默认 false\n\n### 事件监听\n\n```js\nvar id = document.getElementById('id');\n\nvar fn = function(e) {\n    e = e || window.event;\n    // ...\n}\nif(id.addEventListener) {\n    id.addEventListener('click', fn, false);\n}else if(id.attachEvent){               // IE8\n    id.attachEvent('onclick', fn);\n}\n```\n\n### 事件委托\n\n举个例子  \n\n```html\n<ul id=\"list\">\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n</ul>\n```\n\n```js\nvar list = document.querySelector('#list')\nlist.addEventListener('click',function (e){\n    e = e || window.event;\n    var t = e.target || e.srcElement;   // IE8\n    if(t.tagName === 'LI'){\n        console.log('当前元素事件触发成功')\n    }\n},false)\n```\n\n通过事件委托，我们可以  \n\n- 减少监听器\n- 监听动态内容\n\n\n","slug":"javascript-event","published":1,"updated":"2018-05-09T08:42:26.983Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40m000o2mhsq9074br2","content":"<h3 id=\"事件派发\"><a href=\"#事件派发\" class=\"headerlink\" title=\"事件派发\"></a>事件派发</h3><p>页面的哪一部分拥有特定的事件？在此问题是，浏览器开发厂家还是一致的，如果你单击某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。<br>事件流描述的是页面中的接收事件顺序，在此上有两种不同的方案，事件冒泡（event bubbling）和事件捕获（event capturing）</p>\n<h5 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h5><p>事件开始时由最具体的元素（文档嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）<br>简单的说就是从 child -&gt; parent</p>\n<h5 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h5><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。<br>从 parent -&gt; child</p>\n<p>选择哪种？<br>由于老版本的原因，很少有人用捕获，建议使用事件冒泡。 addEventListener (事件监听) 也提供了选择的方法。false（执行冒泡）或者true（执行捕获），默认 false</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(id.addEventListener) &#123;</span><br><span class=\"line\">    id.addEventListener(<span class=\"string\">'click'</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(id.attachEvent)&#123;               <span class=\"comment\">// IE8</span></span><br><span class=\"line\">    id.attachEvent(<span class=\"string\">'onclick'</span>, fn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>举个例子  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#list'</span>)</span><br><span class=\"line\">list.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = e.target || e.srcElement;   <span class=\"comment\">// IE8</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t.tagName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前元素事件触发成功'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>通过事件委托，我们可以  </p>\n<ul>\n<li>减少监听器</li>\n<li>监听动态内容</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"事件派发\"><a href=\"#事件派发\" class=\"headerlink\" title=\"事件派发\"></a>事件派发</h3><p>页面的哪一部分拥有特定的事件？在此问题是，浏览器开发厂家还是一致的，如果你单击某个按钮，他们都认为单击事件不仅仅发生在按钮上。换句话说，在单击按钮的同时，你也单击了按钮的容器元素，甚至单击了整个页面。<br>事件流描述的是页面中的接收事件顺序，在此上有两种不同的方案，事件冒泡（event bubbling）和事件捕获（event capturing）</p>\n<h5 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h5><p>事件开始时由最具体的元素（文档嵌套层次最深的那个节点）接收，然后逐级向上传播到较为不具体的节点（文档）<br>简单的说就是从 child -&gt; parent</p>\n<h5 id=\"事件捕获\"><a href=\"#事件捕获\" class=\"headerlink\" title=\"事件捕获\"></a>事件捕获</h5><p>事件捕获的思想是不太具体的节点应该更早接收到事件，而具体的节点应该最后接收到事件。事件捕获的用意在于在事件到达预定目标之前捕获它。<br>从 parent -&gt; child</p>\n<p>选择哪种？<br>由于老版本的原因，很少有人用捕获，建议使用事件冒泡。 addEventListener (事件监听) 也提供了选择的方法。false（执行冒泡）或者true（执行捕获），默认 false</p>\n<h3 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> id = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'id'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(id.addEventListener) &#123;</span><br><span class=\"line\">    id.addEventListener(<span class=\"string\">'click'</span>, fn, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(id.attachEvent)&#123;               <span class=\"comment\">// IE8</span></span><br><span class=\"line\">    id.attachEvent(<span class=\"string\">'onclick'</span>, fn);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"事件委托\"><a href=\"#事件委托\" class=\"headerlink\" title=\"事件委托\"></a>事件委托</h3><p>举个例子  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"list\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> list = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#list'</span>)</span><br><span class=\"line\">list.addEventListener(<span class=\"string\">'click'</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e = e || <span class=\"built_in\">window</span>.event;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> t = e.target || e.srcElement;   <span class=\"comment\">// IE8</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t.tagName === <span class=\"string\">'LI'</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'当前元素事件触发成功'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,<span class=\"literal\">false</span>)</span><br></pre></td></tr></table></figure>\n<p>通过事件委托，我们可以  </p>\n<ul>\n<li>减少监听器</li>\n<li>监听动态内容</li>\n</ul>\n"},{"layout":"post","title":"JavaScript MVC 简单实现","date":"2017-06-21T03:32:00.000Z","_content":"\n原代码地址：<a href=\"http://www.cnblogs.com/tugenhua0707/p/5156179.html\" target=\"_blank\">理解javascript中实现MVC的原理</a>，侵删，我只是用自己的话复述一遍。  \n\n- M(Model) 模型用于封装数据及数据处理方法\n- V(View) 视图实时更新数据，包括事件注册\n- C(ontroller) 控制器接收用户的操作，最主要是订阅视图层的事件\n- Event 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知\n\n把原帖 jQuery 部分用 JS 重写了，代码如下：\n\nHMTL：\n```hmtl\n<select id=\"list\" size=\"10\" style=\"width: 10rem\"></select><br/>\n<button id=\"plusBtn\">  +  </button>\n<button id=\"minusBtn\">  -  </button>\n```\n\nJS:\n```js\n// 模型：用于封装数据及数据处理方法\nfunction Mode(elems) {\n    this._elems = elems;\n    this._selectedIndex = -1;\n\n    // 模型监听 Event\n    this.itemAdd = new Event(this);\n    this.itemRemove = new Event(this);\n    this.selectedIndexChange = new Event(this);\n};\nMode.prototype = {\n    constructor: 'Mode',\n    getItem: function() {\n        return [].concat(this._elems);\n    },\n    addItem: function(elem) {\n        this._elems.push(elem);\n        // 改变时让 Event 得到通知\n        this.itemAdd.notify({elem: elem});\n    },\n    removeItem: function(index) {\n        this._elems.splice(index, 1);\n        this.itemRemove.notify({elem: index});\n    },\n    getSelectedItem: function() {\n        return this._selectedIndex;\n    },\n    setSelectedItem: function(index) {\n        var previousIndex = this._selectedIndex;\n        this._selectedIndex = index;\n        this.selectedIndexChange.notify({previous: previousIndex});\n    }\n};\n\n// 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知\nfunction Event(observer) {\n    this._observer = observer;\n    this._listeners = [];\n};\nEvent.prototype = {\n    constructor: 'Event',\n    attach: function(listeners) {\n        this._listeners.push(listeners);\n    },\n    notify: function(objs) {\n        for(var i = 0, len = this._listeners.length; i < len; i++) {\n            this._listeners[i](this._observer, objs);\n        }\n    }\n};\n\n// 视图：实时更新数据，包括事件注册\nfunction View(model, elements) {\n    this._model = model;\n    this._elements = elements;\n    this.listModified = new Event(this);\n    this.addButtonClicked = new Event(this);\n    this.delButtonClicked = new Event(this);\n    var that = this;\n    this._model.itemAdd.attach(function() {\n        that.rebuildList();\n    });\n    this._model.itemRemove.attach(function() {\n        that.rebuildList();\n    });\n    this._elements.list.addEventListener('change', function(e) {\n        that.listModified.notify({index: e.target.selectedIndex});\n    });\n    this._elements.addButton.addEventListener('click', function(e) {\n        that.addButtonClicked.notify();\n    });\n    this._elements.delButton.addEventListener('click', function(e) {\n        that.delButtonClicked.notify();\n    });\n};\nView.prototype = {\n    constructor: 'View',\n    show: function() {\n        this.rebuildList();\n    },\n    rebuildList: function() {\n        var list = this._elements.list,\n            items,\n            key,\n            value = '';\n        items = this._model.getItem();\n\n        for (key in items) {\n            if (items.hasOwnProperty(key)) {\n                value += '<option value =\"' + items[key] + '\">' + \n                        items[key] + '</option>';\n            }\n        }\n        list.innerHTML = value;\n        this._model.setSelectedItem(-1);\n    }\n};\n\n// 控制器：控制器接收用户的操作，最主要是订阅视图层的事件\nfunction Controller(model, view) {\n    this._model = model;\n    this._view = view;\n    var that = this;\n\n    this._view.listModified.attach(function(sender, args) {\n        that.updateItem(args.index);\n    });\n    this._view.addButtonClicked.attach(function() {\n        that.addItem();\n    });\n    this._view.delButtonClicked.attach(function() {\n        that.delItem();\n    })\n};\nController.prototype = {\n    constructor: 'Controller',\n    addItem: function() {\n        var item = window.prompt('Add item', '');\n\n        if (item) {\n            this._model.addItem(item);\n        }\n    },\n    delItem: function() {\n        var index = this._model.getSelectedItem();\n\n        if (index !== -1) {\n            this._model.removeItem(index);\n        }\n    },\n    updateItem: function(index) {\n        this._model.setSelectedItem(index);\n    }\n};\n```\n\n调用方式\n\n```js\n(function () {\n    var model = new Mode(['PHP', 'JavaScript']),\n        view = new View(model, {\n          'list' : document.getElementById('list'),\n          'addButton' : document.getElementById('plusBtn'),\n          'delButton' : document.getElementById('minusBtn'),\n         }),\n        controller = new Controller(model, view);        \n    view.show();\n})();\n```\n\n这里不讲抽象的东西，讲具体的实现。  \nMVC 三层都以观察者模式监听 Event() 方法，当有改变时，告诉 Event()，让所有观察 Event() 的方法都得到通知。\n\n```js\nfunction Mode(elems) {\n    // ...\n    \n    // 模型监听 Event\n    this.itemAdd = new Event(this);\n    this.itemRemove = new Event(this);\n    this.selectedIndexChange = new Event(this);\n};\nMode.prototype = {\n    // ...\n    addItem: function(elem) {\n        this._elems.push(elem);\n        // 改变时让 Event 得到通知\n        this.itemAdd.notify({elem: elem});\n    },\n    // ...\n}\n```\n\n当 addItem 改变时，通知 Event。  \n\n举个例子：添加按钮  \n点击添加按钮时  \n```js\nthis.addButtonClicked = new Event(this);\nthis._elements.addButton.addEventListener('click', function(e) {\n    that.addButtonClicked.notify();\n});\n```\n\n其中 `this._elements.addButton` 是传入的 Button DOM，调用了 Event 的 notify 方法  \n\n```js\nattach: function(listeners) {\n    this._listeners.push(listeners);\n},\nnotify: function(objs) {\n    for(var i = 0, len = this._listeners.length; i < len; i++) {\n        this._listeners[i](this._observer, objs);\n    }\n}\n```\n\nthis._listeners 从 attach 这添加，attach 在哪添加的，是在 Controller 层中，因为当某一个主题对象发生改变的时候，所有依赖它的对象都会得到通知。  \n\n```js\nthis._view.addButtonClicked.attach(function() {\n    that.addItem();\n});\n```\n\n调用 controller 自身的 addITem() 方法\n\n```js\naddItem: function() {\n    var item = window.prompt('Add item', '');\n\n    if (item) {\n        this._model.addItem(item);\n    }\n}\n```\n用户输入添加的内容，又调用了视图层的 addItem 方法\n\n```js\naddItem: function(elem) {\n    this._elems.push(elem);\n    // 改变时让 Event 得到通知\n    this.itemAdd.notify({elem: elem});\n}\n```\nEvent 得到通知后，View 也监听这个消息\n\n```js\nthis._model.itemAdd.attach(function() {\n    that.rebuildList();\n});\n```\n\nrebuildList 为具体事件\n","source":"_posts/javascript-mvc-simple-relize.markdown","raw":"---\nlayout:     post\ntitle:      \"JavaScript MVC 简单实现\"\ndate:       2017-06-21 11:32:00\ntags:\n    - JavaScript\n---\n\n原代码地址：<a href=\"http://www.cnblogs.com/tugenhua0707/p/5156179.html\" target=\"_blank\">理解javascript中实现MVC的原理</a>，侵删，我只是用自己的话复述一遍。  \n\n- M(Model) 模型用于封装数据及数据处理方法\n- V(View) 视图实时更新数据，包括事件注册\n- C(ontroller) 控制器接收用户的操作，最主要是订阅视图层的事件\n- Event 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知\n\n把原帖 jQuery 部分用 JS 重写了，代码如下：\n\nHMTL：\n```hmtl\n<select id=\"list\" size=\"10\" style=\"width: 10rem\"></select><br/>\n<button id=\"plusBtn\">  +  </button>\n<button id=\"minusBtn\">  -  </button>\n```\n\nJS:\n```js\n// 模型：用于封装数据及数据处理方法\nfunction Mode(elems) {\n    this._elems = elems;\n    this._selectedIndex = -1;\n\n    // 模型监听 Event\n    this.itemAdd = new Event(this);\n    this.itemRemove = new Event(this);\n    this.selectedIndexChange = new Event(this);\n};\nMode.prototype = {\n    constructor: 'Mode',\n    getItem: function() {\n        return [].concat(this._elems);\n    },\n    addItem: function(elem) {\n        this._elems.push(elem);\n        // 改变时让 Event 得到通知\n        this.itemAdd.notify({elem: elem});\n    },\n    removeItem: function(index) {\n        this._elems.splice(index, 1);\n        this.itemRemove.notify({elem: index});\n    },\n    getSelectedItem: function() {\n        return this._selectedIndex;\n    },\n    setSelectedItem: function(index) {\n        var previousIndex = this._selectedIndex;\n        this._selectedIndex = index;\n        this.selectedIndexChange.notify({previous: previousIndex});\n    }\n};\n\n// 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知\nfunction Event(observer) {\n    this._observer = observer;\n    this._listeners = [];\n};\nEvent.prototype = {\n    constructor: 'Event',\n    attach: function(listeners) {\n        this._listeners.push(listeners);\n    },\n    notify: function(objs) {\n        for(var i = 0, len = this._listeners.length; i < len; i++) {\n            this._listeners[i](this._observer, objs);\n        }\n    }\n};\n\n// 视图：实时更新数据，包括事件注册\nfunction View(model, elements) {\n    this._model = model;\n    this._elements = elements;\n    this.listModified = new Event(this);\n    this.addButtonClicked = new Event(this);\n    this.delButtonClicked = new Event(this);\n    var that = this;\n    this._model.itemAdd.attach(function() {\n        that.rebuildList();\n    });\n    this._model.itemRemove.attach(function() {\n        that.rebuildList();\n    });\n    this._elements.list.addEventListener('change', function(e) {\n        that.listModified.notify({index: e.target.selectedIndex});\n    });\n    this._elements.addButton.addEventListener('click', function(e) {\n        that.addButtonClicked.notify();\n    });\n    this._elements.delButton.addEventListener('click', function(e) {\n        that.delButtonClicked.notify();\n    });\n};\nView.prototype = {\n    constructor: 'View',\n    show: function() {\n        this.rebuildList();\n    },\n    rebuildList: function() {\n        var list = this._elements.list,\n            items,\n            key,\n            value = '';\n        items = this._model.getItem();\n\n        for (key in items) {\n            if (items.hasOwnProperty(key)) {\n                value += '<option value =\"' + items[key] + '\">' + \n                        items[key] + '</option>';\n            }\n        }\n        list.innerHTML = value;\n        this._model.setSelectedItem(-1);\n    }\n};\n\n// 控制器：控制器接收用户的操作，最主要是订阅视图层的事件\nfunction Controller(model, view) {\n    this._model = model;\n    this._view = view;\n    var that = this;\n\n    this._view.listModified.attach(function(sender, args) {\n        that.updateItem(args.index);\n    });\n    this._view.addButtonClicked.attach(function() {\n        that.addItem();\n    });\n    this._view.delButtonClicked.attach(function() {\n        that.delItem();\n    })\n};\nController.prototype = {\n    constructor: 'Controller',\n    addItem: function() {\n        var item = window.prompt('Add item', '');\n\n        if (item) {\n            this._model.addItem(item);\n        }\n    },\n    delItem: function() {\n        var index = this._model.getSelectedItem();\n\n        if (index !== -1) {\n            this._model.removeItem(index);\n        }\n    },\n    updateItem: function(index) {\n        this._model.setSelectedItem(index);\n    }\n};\n```\n\n调用方式\n\n```js\n(function () {\n    var model = new Mode(['PHP', 'JavaScript']),\n        view = new View(model, {\n          'list' : document.getElementById('list'),\n          'addButton' : document.getElementById('plusBtn'),\n          'delButton' : document.getElementById('minusBtn'),\n         }),\n        controller = new Controller(model, view);        \n    view.show();\n})();\n```\n\n这里不讲抽象的东西，讲具体的实现。  \nMVC 三层都以观察者模式监听 Event() 方法，当有改变时，告诉 Event()，让所有观察 Event() 的方法都得到通知。\n\n```js\nfunction Mode(elems) {\n    // ...\n    \n    // 模型监听 Event\n    this.itemAdd = new Event(this);\n    this.itemRemove = new Event(this);\n    this.selectedIndexChange = new Event(this);\n};\nMode.prototype = {\n    // ...\n    addItem: function(elem) {\n        this._elems.push(elem);\n        // 改变时让 Event 得到通知\n        this.itemAdd.notify({elem: elem});\n    },\n    // ...\n}\n```\n\n当 addItem 改变时，通知 Event。  \n\n举个例子：添加按钮  \n点击添加按钮时  \n```js\nthis.addButtonClicked = new Event(this);\nthis._elements.addButton.addEventListener('click', function(e) {\n    that.addButtonClicked.notify();\n});\n```\n\n其中 `this._elements.addButton` 是传入的 Button DOM，调用了 Event 的 notify 方法  \n\n```js\nattach: function(listeners) {\n    this._listeners.push(listeners);\n},\nnotify: function(objs) {\n    for(var i = 0, len = this._listeners.length; i < len; i++) {\n        this._listeners[i](this._observer, objs);\n    }\n}\n```\n\nthis._listeners 从 attach 这添加，attach 在哪添加的，是在 Controller 层中，因为当某一个主题对象发生改变的时候，所有依赖它的对象都会得到通知。  \n\n```js\nthis._view.addButtonClicked.attach(function() {\n    that.addItem();\n});\n```\n\n调用 controller 自身的 addITem() 方法\n\n```js\naddItem: function() {\n    var item = window.prompt('Add item', '');\n\n    if (item) {\n        this._model.addItem(item);\n    }\n}\n```\n用户输入添加的内容，又调用了视图层的 addItem 方法\n\n```js\naddItem: function(elem) {\n    this._elems.push(elem);\n    // 改变时让 Event 得到通知\n    this.itemAdd.notify({elem: elem});\n}\n```\nEvent 得到通知后，View 也监听这个消息\n\n```js\nthis._model.itemAdd.attach(function() {\n    that.rebuildList();\n});\n```\n\nrebuildList 为具体事件\n","slug":"javascript-mvc-simple-relize","published":1,"updated":"2018-05-09T09:14:23.963Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40o000r2mhs9juqqf2v","content":"<p>原代码地址：<a href=\"http://www.cnblogs.com/tugenhua0707/p/5156179.html\" target=\"_blank\">理解javascript中实现MVC的原理</a>，侵删，我只是用自己的话复述一遍。  </p>\n<ul>\n<li>M(Model) 模型用于封装数据及数据处理方法</li>\n<li>V(View) 视图实时更新数据，包括事件注册</li>\n<li>C(ontroller) 控制器接收用户的操作，最主要是订阅视图层的事件</li>\n<li>Event 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知</li>\n</ul>\n<p>把原帖 jQuery 部分用 JS 重写了，代码如下：</p>\n<p>HMTL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;list&quot; size=&quot;10&quot; style=&quot;width: 10rem&quot;&gt;&lt;/select&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;button id=&quot;plusBtn&quot;&gt;  +  &lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;minusBtn&quot;&gt;  -  &lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模型：用于封装数据及数据处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mode</span>(<span class=\"params\">elems</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elems = elems;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._selectedIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模型监听 Event</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemRemove = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedIndexChange = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Mode.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Mode',</span><br><span class=\"line\">    getItem: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [].concat(<span class=\"keyword\">this</span>._elems);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">        <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemRemove.notify(&#123;<span class=\"attr\">elem</span>: index&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getSelectedItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._selectedIndex;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setSelectedItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> previousIndex = <span class=\"keyword\">this</span>._selectedIndex;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._selectedIndex = index;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selectedIndexChange.notify(&#123;<span class=\"attr\">previous</span>: previousIndex&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Event</span>(<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._observer = observer;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._listeners = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Event.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Event',</span><br><span class=\"line\">    attach: function(listeners) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._listeners.push(listeners);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>._listeners.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._listeners[i](<span class=\"keyword\">this</span>._observer, objs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图：实时更新数据，包括事件注册</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">View</span>(<span class=\"params\">model, elements</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model = model;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements = elements;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listModified = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model.itemAdd.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.rebuildList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model.itemRemove.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.rebuildList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.list.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.listModified.notify(&#123;<span class=\"attr\">index</span>: e.target.selectedIndex&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.addButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.addButtonClicked.notify();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.delButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.delButtonClicked.notify();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">View.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'View',</span><br><span class=\"line\">    show: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rebuildList();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rebuildList: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>._elements.list,</span><br><span class=\"line\">            items,</span><br><span class=\"line\">            key,</span><br><span class=\"line\">            value = <span class=\"string\">''</span>;</span><br><span class=\"line\">        items = <span class=\"keyword\">this</span>._model.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (items.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                value += <span class=\"string\">'&lt;option value =\"'</span> + items[key] + <span class=\"string\">'\"&gt;'</span> + </span><br><span class=\"line\">                        items[key] + <span class=\"string\">'&lt;/option&gt;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.innerHTML = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.setSelectedItem(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制器：控制器接收用户的操作，最主要是订阅视图层的事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Controller</span>(<span class=\"params\">model, view</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model = model;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view = view;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.listModified.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sender, args</span>) </span>&#123;</span><br><span class=\"line\">        that.updateItem(args.index);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.addButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.addItem();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.delButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.delItem();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Controller.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Controller',</span><br><span class=\"line\">    addItem: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">'Add item'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._model.addItem(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>._model.getSelectedItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._model.removeItem(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.setSelectedItem(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>调用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> model = <span class=\"keyword\">new</span> Mode([<span class=\"string\">'PHP'</span>, <span class=\"string\">'JavaScript'</span>]),</span><br><span class=\"line\">        view = <span class=\"keyword\">new</span> View(model, &#123;</span><br><span class=\"line\">          <span class=\"string\">'list'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">          <span class=\"string\">'addButton'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'plusBtn'</span>),</span><br><span class=\"line\">          <span class=\"string\">'delButton'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'minusBtn'</span>),</span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        controller = <span class=\"keyword\">new</span> Controller(model, view);        </span><br><span class=\"line\">    view.show();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这里不讲抽象的东西，讲具体的实现。<br>MVC 三层都以观察者模式监听 Event() 方法，当有改变时，告诉 Event()，让所有观察 Event() 的方法都得到通知。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mode</span>(<span class=\"params\">elems</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 模型监听 Event</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemRemove = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedIndexChange = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Mode.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">        <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 addItem 改变时，通知 Event。  </p>\n<p>举个例子：添加按钮<br>点击添加按钮时<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>._elements.addButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    that.addButtonClicked.notify();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>this._elements.addButton</code> 是传入的 Button DOM，调用了 Event 的 notify 方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">listeners</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._listeners.push(listeners);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>._listeners.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._listeners[i](<span class=\"keyword\">this</span>._observer, objs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this._listeners 从 attach 这添加，attach 在哪添加的，是在 Controller 层中，因为当某一个主题对象发生改变的时候，所有依赖它的对象都会得到通知。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._view.addButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    that.addItem();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>调用 controller 自身的 addITem() 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">'Add item'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.addItem(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户输入添加的内容，又调用了视图层的 addItem 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">    <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Event 得到通知后，View 也监听这个消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._model.itemAdd.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    that.rebuildList();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>rebuildList 为具体事件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原代码地址：<a href=\"http://www.cnblogs.com/tugenhua0707/p/5156179.html\" target=\"_blank\">理解javascript中实现MVC的原理</a>，侵删，我只是用自己的话复述一遍。  </p>\n<ul>\n<li>M(Model) 模型用于封装数据及数据处理方法</li>\n<li>V(View) 视图实时更新数据，包括事件注册</li>\n<li>C(ontroller) 控制器接收用户的操作，最主要是订阅视图层的事件</li>\n<li>Event 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知</li>\n</ul>\n<p>把原帖 jQuery 部分用 JS 重写了，代码如下：</p>\n<p>HMTL：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select id=&quot;list&quot; size=&quot;10&quot; style=&quot;width: 10rem&quot;&gt;&lt;/select&gt;&lt;br/&gt;</span><br><span class=\"line\">&lt;button id=&quot;plusBtn&quot;&gt;  +  &lt;/button&gt;</span><br><span class=\"line\">&lt;button id=&quot;minusBtn&quot;&gt;  -  &lt;/button&gt;</span><br></pre></td></tr></table></figure></p>\n<p>JS:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 模型：用于封装数据及数据处理方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mode</span>(<span class=\"params\">elems</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elems = elems;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._selectedIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 模型监听 Event</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemRemove = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedIndexChange = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Mode.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Mode',</span><br><span class=\"line\">    getItem: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [].concat(<span class=\"keyword\">this</span>._elems);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">        <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    removeItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.splice(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemRemove.notify(&#123;<span class=\"attr\">elem</span>: index&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getSelectedItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._selectedIndex;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    setSelectedItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> previousIndex = <span class=\"keyword\">this</span>._selectedIndex;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._selectedIndex = index;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.selectedIndexChange.notify(&#123;<span class=\"attr\">previous</span>: previousIndex&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发布订阅模式，让多个观察者同时监听，当一个事件发生改变，所有依赖都将得到通知</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Event</span>(<span class=\"params\">observer</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._observer = observer;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._listeners = [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Event.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Event',</span><br><span class=\"line\">    attach: function(listeners) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._listeners.push(listeners);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objs</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>._listeners.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._listeners[i](<span class=\"keyword\">this</span>._observer, objs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 视图：实时更新数据，包括事件注册</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">View</span>(<span class=\"params\">model, elements</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model = model;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements = elements;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.listModified = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.addButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.delButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model.itemAdd.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.rebuildList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model.itemRemove.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.rebuildList();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.list.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.listModified.notify(&#123;<span class=\"attr\">index</span>: e.target.selectedIndex&#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.addButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.addButtonClicked.notify();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elements.delButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        that.delButtonClicked.notify();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">View.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'View',</span><br><span class=\"line\">    show: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rebuildList();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    rebuildList: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>._elements.list,</span><br><span class=\"line\">            items,</span><br><span class=\"line\">            key,</span><br><span class=\"line\">            value = <span class=\"string\">''</span>;</span><br><span class=\"line\">        items = <span class=\"keyword\">this</span>._model.getItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> items) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (items.hasOwnProperty(key)) &#123;</span><br><span class=\"line\">                value += <span class=\"string\">'&lt;option value =\"'</span> + items[key] + <span class=\"string\">'\"&gt;'</span> + </span><br><span class=\"line\">                        items[key] + <span class=\"string\">'&lt;/option&gt;'</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.innerHTML = value;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.setSelectedItem(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制器：控制器接收用户的操作，最主要是订阅视图层的事件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Controller</span>(<span class=\"params\">model, view</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._model = model;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view = view;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.listModified.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sender, args</span>) </span>&#123;</span><br><span class=\"line\">        that.updateItem(args.index);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.addButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.addItem();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._view.delButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        that.delItem();</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Controller.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>: 'Controller',</span><br><span class=\"line\">    addItem: function() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> item = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">'Add item'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._model.addItem(item);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> index = <span class=\"keyword\">this</span>._model.getSelectedItem();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._model.removeItem(index);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    updateItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">index</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.setSelectedItem(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>调用方式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> model = <span class=\"keyword\">new</span> Mode([<span class=\"string\">'PHP'</span>, <span class=\"string\">'JavaScript'</span>]),</span><br><span class=\"line\">        view = <span class=\"keyword\">new</span> View(model, &#123;</span><br><span class=\"line\">          <span class=\"string\">'list'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'list'</span>),</span><br><span class=\"line\">          <span class=\"string\">'addButton'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'plusBtn'</span>),</span><br><span class=\"line\">          <span class=\"string\">'delButton'</span> : <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'minusBtn'</span>),</span><br><span class=\"line\">         &#125;),</span><br><span class=\"line\">        controller = <span class=\"keyword\">new</span> Controller(model, view);        </span><br><span class=\"line\">    view.show();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>这里不讲抽象的东西，讲具体的实现。<br>MVC 三层都以观察者模式监听 Event() 方法，当有改变时，告诉 Event()，让所有观察 Event() 的方法都得到通知。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Mode</span>(<span class=\"params\">elems</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 模型监听 Event</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemRemove = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.selectedIndexChange = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Mode.prototype = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">        <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 addItem 改变时，通知 Event。  </p>\n<p>举个例子：添加按钮<br>点击添加按钮时<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.addButtonClicked = <span class=\"keyword\">new</span> Event(<span class=\"keyword\">this</span>);</span><br><span class=\"line\"><span class=\"keyword\">this</span>._elements.addButton.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    that.addButtonClicked.notify();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>其中 <code>this._elements.addButton</code> 是传入的 Button DOM，调用了 Event 的 notify 方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">attach: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">listeners</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._listeners.push(listeners);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">notify: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">objs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = <span class=\"keyword\">this</span>._listeners.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._listeners[i](<span class=\"keyword\">this</span>._observer, objs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this._listeners 从 attach 这添加，attach 在哪添加的，是在 Controller 层中，因为当某一个主题对象发生改变的时候，所有依赖它的对象都会得到通知。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._view.addButtonClicked.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    that.addItem();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>调用 controller 自身的 addITem() 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = <span class=\"built_in\">window</span>.prompt(<span class=\"string\">'Add item'</span>, <span class=\"string\">''</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>._model.addItem(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用户输入添加的内容，又调用了视图层的 addItem 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addItem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">elem</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>._elems.push(elem);</span><br><span class=\"line\">    <span class=\"comment\">// 改变时让 Event 得到通知</span></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemAdd.notify(&#123;<span class=\"attr\">elem</span>: elem&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Event 得到通知后，View 也监听这个消息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>._model.itemAdd.attach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    that.rebuildList();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>rebuildList 为具体事件</p>\n"},{"layout":"post","title":"Vue 数据绑定与视图更新","date":"2017-08-02T14:32:00.000Z","_content":"\n### 监听数据\n\n众所周知，监听数据是通过 Object.defineProperty 这个属性，为其设置特殊的 getter / setter，并在 setter 中触发监听\n\n```js\nfunction observe(value, vm) {\n    if (!value || typeof value !== 'object') {\n        return\n    }\n    var ob = new Observer(value)\n    return ob\n}\nfunction defineReactive(obj, key, val) {\n    var dep = new Dep()\n    // 对子元素也进行绑定\n    var childOb = observe(val)\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: function() {\n            if (Dep.target) {\n                dep.depend()\n                if (childOb) {\n                    childOb.dep.depend()\n                }\n            }\n            return val\n        },\n        set: function(newVal) {\n            if (newVal === val) {\n                return\n            }\n            val = newVal\n            childOb = observe(newVal)\n            // 更新数据\n            dep.notify()\n        }\n    })\n}\n```\n\n其中用到了 getter 和 setter 都用到了 dep 的方法，dep 是用来和 Watcher 进行双向绑定的  \n\n### 添加 Watcher\n\n```js\n// dep.js\nlet uid = 0\nfunction Dep() {\n    this.id = uid++\n    this.subs = []\n}\nDep.target = null\n// Dep.target 指向 Watcher 时触发，调用 Watcher addDep 方法\nDep.prototype.depend = function() {\n    Dep.target.addDep(this)\n}\n```\n\n```js\n// Watcher.js\nfunction Watcher(vm, exportFn, cb) {\n    this.vm = vm\n    this.cb = cb\n    this.depIds = {}\n    // ...\n}\nWatcher.prototype.addDep = function(dep) {\n    if (!this.depIds.hasOwnProperty(dep.id)) {\n        dep.addSub(this)\n        this.depIds[dep.id] = dep\n    }\n}\nWatcher.prototype.get = function() {\n    Dep.target = this\n    // Dep.target 指向 Watcher 时，get value 触发 dep.depend()    \n    var value = this.getter.call(this.vm, this.vm)\n    Dep.target = null\n    return value\n}\n```\n\n事情是这样的，先看 ` Watcher.prototype.get `，这是 `Watcher` 用来获取数据的方法，获取时，会将 `Dep.target` 指向自身，然后执行 ` this.getter.call(this.vm, this.vm) ` 时获取数据  \n而 `defineProperty` 定义的 `getter` 有这么行代码  \n\n```js\nif (Dep.target) {\n    dep.depend()\n}\n```\n\n当 `Dep.target` 有指向时，调用 `dep.depend()` 方法， `depend()` 方法则是又调用了 `Watcher.addDep()` 方法，如果还没有添加 watch，则添加到 depIds 同时 调用 `dep.addSub()` 方法，addSub() 也将当前 Watcher 添加上去  \n\n画个流程图  \n ![](http://p8hsqsg3r.bkt.clouddn.com/watcher-dep-bind.png)\n\n简单地说，就是当 Watcher 获取元素时，把自己挂载到 dep 上，至于为什么要这样做，看看 setter\n\n### 更新视图\n\n```js\nset: function(newVal) {\n    // 更新数据\n    dep.notify()\n}\n```\n\n```js\nDep.prototype.notify = function() {\n    this.subs.forEach(function(sub) {\n        sub.update()\n    })\n}\n```\n\nthis.subs 是一个数组，放的就是 addSub 时的 Watcher 对象，执行 ` Watcher.update() `\n\n```js\nWatcher.prototype.update = function() {\n    var value = this.value\n    var newVal = this.get()\n\n    this.value = newVal\n    this.cb.call(this.vm, newVal)\n}\n```\n\n\nthis.cb 是什么？这得看 compile 这个函数，在上一篇<a href=\"http://localhost:4000/2017/08/02/javascript-vue-simple-compile/\" target=\"_blank\">JavaScript 仿 Vue 指令</a>有讲到  \n\n```js\n// compile.js\nfunction bind(node, vm, prop, dir) {\n    var updaterFn = updater[dir + 'Updater']\n    var val = vm[prop]\n    updaterFn && updaterFn(node, val)\n\n    new Watcher(vm, prop, function(value) {\n        updaterFn && updaterFn(node, value)\n    })\n}\n```\n\nnew Watcher 里的函数就是 this.cb，updaterFn 是更新视图的函数，比如说 `node.innerHTML = value` 这样的\n\n所以说，当执行 `Watcher.update()` 就将更新后的数据渲染到屏幕是，就达到了实时更新的效果\n\n### 数组\n如果更新的数据是个数组，我们要怎么监听到数组的改变呢？Vue 采取的是对每个可能改变数据的方法进行 prototype 更改\n\n```js\n// observer/array.js\n[\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'splice',\n    'sort',\n    'reverse'\n]\n.forEach(function(method) {\n    var original = arrayMethods[method]\n    def(arrayMethods, method, function() {\n        var i = arguments.length\n        var args = new Array(i)\n        while (i--) {\n            args[i] = arguments[i]\n        }\n        var result = original.apply(this, args)\n        var ob = this.__ob__\n        var inserted\n        switch (method) {\n            case 'push' :\n                inserted = args\n                break\n            case 'unshift' :\n                inserted = args\n                break\n            case splice :\n                inserted = args.slice(2)\n                break\n        }\n        // 如果数据改变了，就触发 dep.notify 方法\n        if (inserted) ob.observeArray(inserted)\n        ob.dep.notify()\n\n        return result\n    })\n})\n```\n\n这个方法有两个问题：\n- 无法监听数组 length 的改变\n- 通过下标法改变的数据无法实时监听，如 `a[2] = 2`\n\n为此 Vue.js 在文档中明确提示不建议直接角标修改数据（其实我看文档时根本没注意到）  \n<a href=\"http://jiongks.name/blog/vue-code-review/\" target=\"_blank\">Vue.js 源码学习笔记</a>  原文在这\n\n\n\n\n\n","source":"_posts/javascript-vue-data-binding.markdown","raw":"---\nlayout:     post\ntitle:      \"Vue 数据绑定与视图更新\"\ndate:       2017-08-02 22:32:00\ntags:\n    - Vue\n---\n\n### 监听数据\n\n众所周知，监听数据是通过 Object.defineProperty 这个属性，为其设置特殊的 getter / setter，并在 setter 中触发监听\n\n```js\nfunction observe(value, vm) {\n    if (!value || typeof value !== 'object') {\n        return\n    }\n    var ob = new Observer(value)\n    return ob\n}\nfunction defineReactive(obj, key, val) {\n    var dep = new Dep()\n    // 对子元素也进行绑定\n    var childOb = observe(val)\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: function() {\n            if (Dep.target) {\n                dep.depend()\n                if (childOb) {\n                    childOb.dep.depend()\n                }\n            }\n            return val\n        },\n        set: function(newVal) {\n            if (newVal === val) {\n                return\n            }\n            val = newVal\n            childOb = observe(newVal)\n            // 更新数据\n            dep.notify()\n        }\n    })\n}\n```\n\n其中用到了 getter 和 setter 都用到了 dep 的方法，dep 是用来和 Watcher 进行双向绑定的  \n\n### 添加 Watcher\n\n```js\n// dep.js\nlet uid = 0\nfunction Dep() {\n    this.id = uid++\n    this.subs = []\n}\nDep.target = null\n// Dep.target 指向 Watcher 时触发，调用 Watcher addDep 方法\nDep.prototype.depend = function() {\n    Dep.target.addDep(this)\n}\n```\n\n```js\n// Watcher.js\nfunction Watcher(vm, exportFn, cb) {\n    this.vm = vm\n    this.cb = cb\n    this.depIds = {}\n    // ...\n}\nWatcher.prototype.addDep = function(dep) {\n    if (!this.depIds.hasOwnProperty(dep.id)) {\n        dep.addSub(this)\n        this.depIds[dep.id] = dep\n    }\n}\nWatcher.prototype.get = function() {\n    Dep.target = this\n    // Dep.target 指向 Watcher 时，get value 触发 dep.depend()    \n    var value = this.getter.call(this.vm, this.vm)\n    Dep.target = null\n    return value\n}\n```\n\n事情是这样的，先看 ` Watcher.prototype.get `，这是 `Watcher` 用来获取数据的方法，获取时，会将 `Dep.target` 指向自身，然后执行 ` this.getter.call(this.vm, this.vm) ` 时获取数据  \n而 `defineProperty` 定义的 `getter` 有这么行代码  \n\n```js\nif (Dep.target) {\n    dep.depend()\n}\n```\n\n当 `Dep.target` 有指向时，调用 `dep.depend()` 方法， `depend()` 方法则是又调用了 `Watcher.addDep()` 方法，如果还没有添加 watch，则添加到 depIds 同时 调用 `dep.addSub()` 方法，addSub() 也将当前 Watcher 添加上去  \n\n画个流程图  \n ![](http://p8hsqsg3r.bkt.clouddn.com/watcher-dep-bind.png)\n\n简单地说，就是当 Watcher 获取元素时，把自己挂载到 dep 上，至于为什么要这样做，看看 setter\n\n### 更新视图\n\n```js\nset: function(newVal) {\n    // 更新数据\n    dep.notify()\n}\n```\n\n```js\nDep.prototype.notify = function() {\n    this.subs.forEach(function(sub) {\n        sub.update()\n    })\n}\n```\n\nthis.subs 是一个数组，放的就是 addSub 时的 Watcher 对象，执行 ` Watcher.update() `\n\n```js\nWatcher.prototype.update = function() {\n    var value = this.value\n    var newVal = this.get()\n\n    this.value = newVal\n    this.cb.call(this.vm, newVal)\n}\n```\n\n\nthis.cb 是什么？这得看 compile 这个函数，在上一篇<a href=\"http://localhost:4000/2017/08/02/javascript-vue-simple-compile/\" target=\"_blank\">JavaScript 仿 Vue 指令</a>有讲到  \n\n```js\n// compile.js\nfunction bind(node, vm, prop, dir) {\n    var updaterFn = updater[dir + 'Updater']\n    var val = vm[prop]\n    updaterFn && updaterFn(node, val)\n\n    new Watcher(vm, prop, function(value) {\n        updaterFn && updaterFn(node, value)\n    })\n}\n```\n\nnew Watcher 里的函数就是 this.cb，updaterFn 是更新视图的函数，比如说 `node.innerHTML = value` 这样的\n\n所以说，当执行 `Watcher.update()` 就将更新后的数据渲染到屏幕是，就达到了实时更新的效果\n\n### 数组\n如果更新的数据是个数组，我们要怎么监听到数组的改变呢？Vue 采取的是对每个可能改变数据的方法进行 prototype 更改\n\n```js\n// observer/array.js\n[\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'splice',\n    'sort',\n    'reverse'\n]\n.forEach(function(method) {\n    var original = arrayMethods[method]\n    def(arrayMethods, method, function() {\n        var i = arguments.length\n        var args = new Array(i)\n        while (i--) {\n            args[i] = arguments[i]\n        }\n        var result = original.apply(this, args)\n        var ob = this.__ob__\n        var inserted\n        switch (method) {\n            case 'push' :\n                inserted = args\n                break\n            case 'unshift' :\n                inserted = args\n                break\n            case splice :\n                inserted = args.slice(2)\n                break\n        }\n        // 如果数据改变了，就触发 dep.notify 方法\n        if (inserted) ob.observeArray(inserted)\n        ob.dep.notify()\n\n        return result\n    })\n})\n```\n\n这个方法有两个问题：\n- 无法监听数组 length 的改变\n- 通过下标法改变的数据无法实时监听，如 `a[2] = 2`\n\n为此 Vue.js 在文档中明确提示不建议直接角标修改数据（其实我看文档时根本没注意到）  \n<a href=\"http://jiongks.name/blog/vue-code-review/\" target=\"_blank\">Vue.js 源码学习笔记</a>  原文在这\n\n\n\n\n\n","slug":"javascript-vue-data-binding","published":1,"updated":"2018-05-10T03:10:33.633Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40r000t2mhsfw7twhiy","content":"<h3 id=\"监听数据\"><a href=\"#监听数据\" class=\"headerlink\" title=\"监听数据\"></a>监听数据</h3><p>众所周知，监听数据是通过 Object.defineProperty 这个属性，为其设置特殊的 getter / setter，并在 setter 中触发监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">value, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || <span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"comment\">// 对子元素也进行绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> childOb = observe(val)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">                dep.depend()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">                    childOb.dep.depend()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            val = newVal</span><br><span class=\"line\">            childOb = observe(newVal)</span><br><span class=\"line\">            <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">            dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中用到了 getter 和 setter 都用到了 dep 的方法，dep 是用来和 Watcher 进行双向绑定的  </p>\n<h3 id=\"添加-Watcher\"><a href=\"#添加-Watcher\" class=\"headerlink\" title=\"添加 Watcher\"></a>添加 Watcher</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dep.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// Dep.target 指向 Watcher 时触发，调用 Watcher addDep 方法</span></span><br><span class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">vm, exportFn, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.depIds = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.addDep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dep</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.hasOwnProperty(dep.id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.depIds[dep.id] = dep</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// Dep.target 指向 Watcher 时，get value 触发 dep.depend()    </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.getter.call(<span class=\"keyword\">this</span>.vm, <span class=\"keyword\">this</span>.vm)</span><br><span class=\"line\">    Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事情是这样的，先看 <code>Watcher.prototype.get</code>，这是 <code>Watcher</code> 用来获取数据的方法，获取时，会将 <code>Dep.target</code> 指向自身，然后执行 <code>this.getter.call(this.vm, this.vm)</code> 时获取数据<br>而 <code>defineProperty</code> 定义的 <code>getter</code> 有这么行代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">    dep.depend()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>Dep.target</code> 有指向时，调用 <code>dep.depend()</code> 方法， <code>depend()</code> 方法则是又调用了 <code>Watcher.addDep()</code> 方法，如果还没有添加 watch，则添加到 depIds 同时 调用 <code>dep.addSub()</code> 方法，addSub() 也将当前 Watcher 添加上去  </p>\n<p>画个流程图<br> <img src=\"http://p8hsqsg3r.bkt.clouddn.com/watcher-dep-bind.png\" alt=\"\"></p>\n<p>简单地说，就是当 Watcher 获取元素时，把自己挂载到 dep 上，至于为什么要这样做，看看 setter</p>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">    dep.notify()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">        sub.update()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.subs 是一个数组，放的就是 addSub 时的 Watcher 对象，执行 <code>Watcher.update()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVal = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = newVal</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, newVal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.cb 是什么？这得看 compile 这个函数，在上一篇<a href=\"http://localhost:4000/2017/08/02/javascript-vue-simple-compile/\" target=\"_blank\">JavaScript 仿 Vue 指令</a>有讲到  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compile.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">node, vm, prop, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm[prop]</span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, prop, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        updaterFn &amp;&amp; updaterFn(node, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new Watcher 里的函数就是 this.cb，updaterFn 是更新视图的函数，比如说 <code>node.innerHTML = value</code> 这样的</p>\n<p>所以说，当执行 <code>Watcher.update()</code> 就将更新后的数据渲染到屏幕是，就达到了实时更新的效果</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>如果更新的数据是个数组，我们要怎么监听到数组的改变呢？Vue 采取的是对每个可能改变数据的方法进行 prototype 更改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/array.js</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"string\">'push'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">    <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">    <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">    <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">    <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> original = arrayMethods[method]</span><br><span class=\"line\">    def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">        <span class=\"keyword\">var</span> inserted</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'push'</span> :</span><br><span class=\"line\">                inserted = args</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span> :</span><br><span class=\"line\">                inserted = args</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> splice :</span><br><span class=\"line\">                inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果数据改变了，就触发 dep.notify 方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">        ob.dep.notify()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个方法有两个问题：</p>\n<ul>\n<li>无法监听数组 length 的改变</li>\n<li>通过下标法改变的数据无法实时监听，如 <code>a[2] = 2</code></li>\n</ul>\n<p>为此 Vue.js 在文档中明确提示不建议直接角标修改数据（其实我看文档时根本没注意到）<br><a href=\"http://jiongks.name/blog/vue-code-review/\" target=\"_blank\">Vue.js 源码学习笔记</a>  原文在这</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"监听数据\"><a href=\"#监听数据\" class=\"headerlink\" title=\"监听数据\"></a>监听数据</h3><p>众所周知，监听数据是通过 Object.defineProperty 这个属性，为其设置特殊的 getter / setter，并在 setter 中触发监听</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">observe</span>(<span class=\"params\">value, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!value || <span class=\"keyword\">typeof</span> value !== <span class=\"string\">'object'</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ob = <span class=\"keyword\">new</span> Observer(value)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ob</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> dep = <span class=\"keyword\">new</span> Dep()</span><br><span class=\"line\">    <span class=\"comment\">// 对子元素也进行绑定</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> childOb = observe(val)</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</span><br><span class=\"line\">        enumerable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        configurable: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        get: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">                dep.depend()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (childOb) &#123;</span><br><span class=\"line\">                    childOb.dep.depend()</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> val</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (newVal === val) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            val = newVal</span><br><span class=\"line\">            childOb = observe(newVal)</span><br><span class=\"line\">            <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">            dep.notify()</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中用到了 getter 和 setter 都用到了 dep 的方法，dep 是用来和 Watcher 进行双向绑定的  </p>\n<h3 id=\"添加-Watcher\"><a href=\"#添加-Watcher\" class=\"headerlink\" title=\"添加 Watcher\"></a>添加 Watcher</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// dep.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Dep</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.id = uid++</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs = []</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"comment\">// Dep.target 指向 Watcher 时触发，调用 Watcher addDep 方法</span></span><br><span class=\"line\">Dep.prototype.depend = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Dep.target.addDep(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Watcher.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Watcher</span>(<span class=\"params\">vm, exportFn, cb</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.vm = vm</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb = cb</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.depIds = &#123;&#125;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.addDep = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dep</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.hasOwnProperty(dep.id)) &#123;</span><br><span class=\"line\">        dep.addSub(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.depIds[dep.id] = dep</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Watcher.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Dep.target = <span class=\"keyword\">this</span></span><br><span class=\"line\">    <span class=\"comment\">// Dep.target 指向 Watcher 时，get value 触发 dep.depend()    </span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.getter.call(<span class=\"keyword\">this</span>.vm, <span class=\"keyword\">this</span>.vm)</span><br><span class=\"line\">    Dep.target = <span class=\"literal\">null</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事情是这样的，先看 <code>Watcher.prototype.get</code>，这是 <code>Watcher</code> 用来获取数据的方法，获取时，会将 <code>Dep.target</code> 指向自身，然后执行 <code>this.getter.call(this.vm, this.vm)</code> 时获取数据<br>而 <code>defineProperty</code> 定义的 <code>getter</code> 有这么行代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (Dep.target) &#123;</span><br><span class=\"line\">    dep.depend()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>当 <code>Dep.target</code> 有指向时，调用 <code>dep.depend()</code> 方法， <code>depend()</code> 方法则是又调用了 <code>Watcher.addDep()</code> 方法，如果还没有添加 watch，则添加到 depIds 同时 调用 <code>dep.addSub()</code> 方法，addSub() 也将当前 Watcher 添加上去  </p>\n<p>画个流程图<br> <img src=\"http://p8hsqsg3r.bkt.clouddn.com/watcher-dep-bind.png\" alt=\"\"></p>\n<p>简单地说，就是当 Watcher 获取元素时，把自己挂载到 dep 上，至于为什么要这样做，看看 setter</p>\n<h3 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newVal</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 更新数据</span></span><br><span class=\"line\">    dep.notify()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dep.prototype.notify = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.subs.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">sub</span>) </span>&#123;</span><br><span class=\"line\">        sub.update()</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.subs 是一个数组，放的就是 addSub 时的 Watcher 对象，执行 <code>Watcher.update()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Watcher.prototype.update = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = <span class=\"keyword\">this</span>.value</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVal = <span class=\"keyword\">this</span>.get()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.value = newVal</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.cb.call(<span class=\"keyword\">this</span>.vm, newVal)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this.cb 是什么？这得看 compile 这个函数，在上一篇<a href=\"http://localhost:4000/2017/08/02/javascript-vue-simple-compile/\" target=\"_blank\">JavaScript 仿 Vue 指令</a>有讲到  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// compile.js</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">node, vm, prop, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm[prop]</span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, prop, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        updaterFn &amp;&amp; updaterFn(node, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>new Watcher 里的函数就是 this.cb，updaterFn 是更新视图的函数，比如说 <code>node.innerHTML = value</code> 这样的</p>\n<p>所以说，当执行 <code>Watcher.update()</code> 就将更新后的数据渲染到屏幕是，就达到了实时更新的效果</p>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>如果更新的数据是个数组，我们要怎么监听到数组的改变呢？Vue 采取的是对每个可能改变数据的方法进行 prototype 更改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// observer/array.js</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    <span class=\"string\">'push'</span>,</span><br><span class=\"line\">    <span class=\"string\">'pop'</span>,</span><br><span class=\"line\">    <span class=\"string\">'shift'</span>,</span><br><span class=\"line\">    <span class=\"string\">'unshift'</span>,</span><br><span class=\"line\">    <span class=\"string\">'splice'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sort'</span>,</span><br><span class=\"line\">    <span class=\"string\">'reverse'</span></span><br><span class=\"line\">]</span><br><span class=\"line\">.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">method</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> original = arrayMethods[method]</span><br><span class=\"line\">    def(arrayMethods, method, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> i = <span class=\"built_in\">arguments</span>.length</span><br><span class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(i)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</span><br><span class=\"line\">            args[i] = <span class=\"built_in\">arguments</span>[i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> result = original.apply(<span class=\"keyword\">this</span>, args)</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ob = <span class=\"keyword\">this</span>.__ob__</span><br><span class=\"line\">        <span class=\"keyword\">var</span> inserted</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (method) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'push'</span> :</span><br><span class=\"line\">                inserted = args</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">'unshift'</span> :</span><br><span class=\"line\">                inserted = args</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">case</span> splice :</span><br><span class=\"line\">                inserted = args.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 如果数据改变了，就触发 dep.notify 方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inserted) ob.observeArray(inserted)</span><br><span class=\"line\">        ob.dep.notify()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>这个方法有两个问题：</p>\n<ul>\n<li>无法监听数组 length 的改变</li>\n<li>通过下标法改变的数据无法实时监听，如 <code>a[2] = 2</code></li>\n</ul>\n<p>为此 Vue.js 在文档中明确提示不建议直接角标修改数据（其实我看文档时根本没注意到）<br><a href=\"http://jiongks.name/blog/vue-code-review/\" target=\"_blank\">Vue.js 源码学习笔记</a>  原文在这</p>\n"},{"layout":"post","title":"JavaScript 仿 vue 指令解析","date":"2017-08-02T08:12:00.000Z","_content":"\n模仿 vue 实现指令解析。\n\n### 效果\n\n```js\nvar compile = new Compile({\n    el: '#compile',\n    data: {\n        a: 'test model',\n        b: 'hello World'\n    },\n    methods: {\n        testToggle: function() {\n            alert('successful');\n        }\n    }\n});\n```\n\n```html\n<div id=\"compile\">\n    <h2>{{ b }}</h2>\n    {{ a }}\n    <p x-html=\"b\"></p>\n    <input type=\"text\" x-model=\"a\">\n    <button x-on:click=\"testToggle\">test</button>\n</div>\n```\n\n### 代码实现\n首先创建一个名为 Compile 的函数，并在原型链上添加实现方法\n\n```js\nexport function compile(vm) {\n    var el = vm.$el\n    // 获取文档碎片\n    var fragment = nodeFragment(el)\n    // 对指令进行解析\n    compileElement(fragment, vm)\n    // 添加 DOM\n    el.appendChild(fragment)\n}\n\n```\n\n##### createDocumentFragment\n\n首先获取文档碎片(片段)  \n\n```js\nfunction nodeFragment(el) {\n    var fragment = document.createDocumentFragment()\n    var child\n\n    while (child = el.firstChild) {\n        fragment.appendChild(child)\n    }\n\n    return fragment\n}\n```\n\n这里创建了一个 DocumentFragment 节点，看看 MDN 对 DocumentFragment 的解释：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment\" target=\"_blank\">Document.createDocumentFragment()</a>\n\n>DocumentFragments are DOM Nodes. They are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children.\n>Since the document fragment is in memory and not part of the main DOM tree, appending children to it does not cause page reflow (computation of element's position and geometry). Consequently, using document fragments often results in better performance.\n\nDocumentFragments 是一个文档节点，用于创建文本片段，文档片段保存在内存里，修改后在添加到 DOM Tree 里，这样避免了直接操作文档节点导致页面不断刷新带来的性能下降。\n\n获取到文本节点之后，在对文本节点进行解析  \n\n```js\nfunction compileElement(frag, vm) {\n    var childNode = frag.childNodes\n    var reg = /\\{\\{((?:.|\\n)+?)\\}\\}/\n\n    // 对每个节点进行判断\n    slice.call(childNode).forEach(function (node) {\n        // 如果是元素节点\n        if (isElement(node)) {\n            compileNode(node, vm)\n        } else if (isTextType(node) && reg.test(node.textContent)) {\n             // 如果是文本节点\n            var exp = RegExp.$1.trim()\n            comopileText(node, vm, exp)\n        }\n\n        // 对子节点进行递归解析指令\n        if (node.childNodes && node.childNodes.length) {\n            compileElement(node, vm)\n        }\n    })\n}\n```\n\n如果是元素节点\n\n```js\nfunction compileNode(node, vm) {\n    // 获取元素属性\n    var nodeAttributes = node.attributes\n    var name, value\n    // 遍历元素属性\n    slice.call(nodeAttributes).forEach(function(attr) {\n        name = attr.name\n        value = attr.value\n        \n        // 判断是否是 x- 指令\n        if (name.indexOf('v-') === 0) {\n            name = name.slice(2)\n\n            if (name.indexOf(':') === -1) {\n                direct[name] && direct[name](node, vm, value)\n            } else if (/(\\D+):(\\D+)/.test(name)) {\n                // v-on:click\n                // dir -> on  exp -> click\n                var dir = RegExp.$1\n                var exp = RegExp.$2\n                switch (dir) {\n                    case 'on' :\n                        direct.eventHandler(node, vm, exp, value)\n                        break\n                    case 'bind' :\n                        direct.bindProp(node, vm, exp, value)\n                }\n            }\n            node.removeAttribute(attr.name)\n        }\n    })\n}\n```\n\n如果是文本节点\n```js\nfunction comopileText(node, vm, exp) {\n    direct.text(node, vm, exp)\n}\n```\n\ndirect 是具体渲染视图步骤的代码，就不贴上来了\n\n其中渲染步骤有个额函数需要注意\n\n```js\nfunction bind(node, vm, prop, dir) {\n    var updaterFn = updater[dir + 'Updater']\n    var val = vm[prop]\n    updaterFn && updaterFn(node, val)\n\n    new Watcher(vm, prop, function(value) {\n        updaterFn && updaterFn(node, value)\n    })\n}\n```\n\n实例化了 Watcher 对象，将修改视图的方法添加给了 Watcher，这点接下来会讲到\n\n对指令解析完后，在添加到 DOM Tree里\n\n```js\nthis.$el.appendChild(this.$fragment);\n```\n\n这样就完成了简单地指令解析啦，当然，Vue本身的指令比这复杂的多，我只是实现了最简单的功能\n\n","source":"_posts/javascript-vue-simple-compile.markdown","raw":"---\nlayout:     post\ntitle:      \"JavaScript 仿 vue 指令解析\"\ndate:       2017-08-02 16:12:00\ntags:\n    - JavaScript\n    - Vue\n---\n\n模仿 vue 实现指令解析。\n\n### 效果\n\n```js\nvar compile = new Compile({\n    el: '#compile',\n    data: {\n        a: 'test model',\n        b: 'hello World'\n    },\n    methods: {\n        testToggle: function() {\n            alert('successful');\n        }\n    }\n});\n```\n\n```html\n<div id=\"compile\">\n    <h2>{{ b }}</h2>\n    {{ a }}\n    <p x-html=\"b\"></p>\n    <input type=\"text\" x-model=\"a\">\n    <button x-on:click=\"testToggle\">test</button>\n</div>\n```\n\n### 代码实现\n首先创建一个名为 Compile 的函数，并在原型链上添加实现方法\n\n```js\nexport function compile(vm) {\n    var el = vm.$el\n    // 获取文档碎片\n    var fragment = nodeFragment(el)\n    // 对指令进行解析\n    compileElement(fragment, vm)\n    // 添加 DOM\n    el.appendChild(fragment)\n}\n\n```\n\n##### createDocumentFragment\n\n首先获取文档碎片(片段)  \n\n```js\nfunction nodeFragment(el) {\n    var fragment = document.createDocumentFragment()\n    var child\n\n    while (child = el.firstChild) {\n        fragment.appendChild(child)\n    }\n\n    return fragment\n}\n```\n\n这里创建了一个 DocumentFragment 节点，看看 MDN 对 DocumentFragment 的解释：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment\" target=\"_blank\">Document.createDocumentFragment()</a>\n\n>DocumentFragments are DOM Nodes. They are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children.\n>Since the document fragment is in memory and not part of the main DOM tree, appending children to it does not cause page reflow (computation of element's position and geometry). Consequently, using document fragments often results in better performance.\n\nDocumentFragments 是一个文档节点，用于创建文本片段，文档片段保存在内存里，修改后在添加到 DOM Tree 里，这样避免了直接操作文档节点导致页面不断刷新带来的性能下降。\n\n获取到文本节点之后，在对文本节点进行解析  \n\n```js\nfunction compileElement(frag, vm) {\n    var childNode = frag.childNodes\n    var reg = /\\{\\{((?:.|\\n)+?)\\}\\}/\n\n    // 对每个节点进行判断\n    slice.call(childNode).forEach(function (node) {\n        // 如果是元素节点\n        if (isElement(node)) {\n            compileNode(node, vm)\n        } else if (isTextType(node) && reg.test(node.textContent)) {\n             // 如果是文本节点\n            var exp = RegExp.$1.trim()\n            comopileText(node, vm, exp)\n        }\n\n        // 对子节点进行递归解析指令\n        if (node.childNodes && node.childNodes.length) {\n            compileElement(node, vm)\n        }\n    })\n}\n```\n\n如果是元素节点\n\n```js\nfunction compileNode(node, vm) {\n    // 获取元素属性\n    var nodeAttributes = node.attributes\n    var name, value\n    // 遍历元素属性\n    slice.call(nodeAttributes).forEach(function(attr) {\n        name = attr.name\n        value = attr.value\n        \n        // 判断是否是 x- 指令\n        if (name.indexOf('v-') === 0) {\n            name = name.slice(2)\n\n            if (name.indexOf(':') === -1) {\n                direct[name] && direct[name](node, vm, value)\n            } else if (/(\\D+):(\\D+)/.test(name)) {\n                // v-on:click\n                // dir -> on  exp -> click\n                var dir = RegExp.$1\n                var exp = RegExp.$2\n                switch (dir) {\n                    case 'on' :\n                        direct.eventHandler(node, vm, exp, value)\n                        break\n                    case 'bind' :\n                        direct.bindProp(node, vm, exp, value)\n                }\n            }\n            node.removeAttribute(attr.name)\n        }\n    })\n}\n```\n\n如果是文本节点\n```js\nfunction comopileText(node, vm, exp) {\n    direct.text(node, vm, exp)\n}\n```\n\ndirect 是具体渲染视图步骤的代码，就不贴上来了\n\n其中渲染步骤有个额函数需要注意\n\n```js\nfunction bind(node, vm, prop, dir) {\n    var updaterFn = updater[dir + 'Updater']\n    var val = vm[prop]\n    updaterFn && updaterFn(node, val)\n\n    new Watcher(vm, prop, function(value) {\n        updaterFn && updaterFn(node, value)\n    })\n}\n```\n\n实例化了 Watcher 对象，将修改视图的方法添加给了 Watcher，这点接下来会讲到\n\n对指令解析完后，在添加到 DOM Tree里\n\n```js\nthis.$el.appendChild(this.$fragment);\n```\n\n这样就完成了简单地指令解析啦，当然，Vue本身的指令比这复杂的多，我只是实现了最简单的功能\n\n","slug":"javascript-vue-simple-compile","published":1,"updated":"2018-05-09T09:26:06.536Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40t000w2mhsbq1suoz2","content":"<p>模仿 vue 实现指令解析。</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compile = <span class=\"keyword\">new</span> Compile(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#compile'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'test model'</span>,</span><br><span class=\"line\">        b: <span class=\"string\">'hello World'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        testToggle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"compile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; a &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">x-html</span>=<span class=\"string\">\"b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">x-model</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">x-on:click</span>=<span class=\"string\">\"testToggle\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>首先创建一个名为 Compile 的函数，并在原型链上添加实现方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = vm.$el</span><br><span class=\"line\">    <span class=\"comment\">// 获取文档碎片</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = nodeFragment(el)</span><br><span class=\"line\">    <span class=\"comment\">// 对指令进行解析</span></span><br><span class=\"line\">    compileElement(fragment, vm)</span><br><span class=\"line\">    <span class=\"comment\">// 添加 DOM</span></span><br><span class=\"line\">    el.appendChild(fragment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"createDocumentFragment\"><a href=\"#createDocumentFragment\" class=\"headerlink\" title=\"createDocumentFragment\"></a>createDocumentFragment</h5><p>首先获取文档碎片(片段)  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nodeFragment</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (child = el.firstChild) &#123;</span><br><span class=\"line\">        fragment.appendChild(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragment</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里创建了一个 DocumentFragment 节点，看看 MDN 对 DocumentFragment 的解释：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment\" target=\"_blank\">Document.createDocumentFragment()</a></p>\n<blockquote>\n<p>DocumentFragments are DOM Nodes. They are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children.<br>Since the document fragment is in memory and not part of the main DOM tree, appending children to it does not cause page reflow (computation of element’s position and geometry). Consequently, using document fragments often results in better performance.</p>\n</blockquote>\n<p>DocumentFragments 是一个文档节点，用于创建文本片段，文档片段保存在内存里，修改后在添加到 DOM Tree 里，这样避免了直接操作文档节点导致页面不断刷新带来的性能下降。</p>\n<p>获取到文本节点之后，在对文本节点进行解析  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileElement</span>(<span class=\"params\">frag, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> childNode = frag.childNodes</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;((?:.|\\n)+?)\\&#125;\\&#125;/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对每个节点进行判断</span></span><br><span class=\"line\">    slice.call(childNode).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是元素节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isElement(node)) &#123;</span><br><span class=\"line\">            compileNode(node, vm)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isTextType(node) &amp;&amp; reg.test(node.textContent)) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 如果是文本节点</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> exp = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>trim()</span><br><span class=\"line\">            comopileText(node, vm, exp)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对子节点进行递归解析指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class=\"line\">            compileElement(node, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是元素节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileNode</span>(<span class=\"params\">node, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取元素属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeAttributes = node.attributes</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name, value</span><br><span class=\"line\">    <span class=\"comment\">// 遍历元素属性</span></span><br><span class=\"line\">    slice.call(nodeAttributes).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">        name = attr.name</span><br><span class=\"line\">        value = attr.value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是 x- 指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">'v-'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            name = name.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">':'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                direct[name] &amp;&amp; direct[name](node, vm, value)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/(\\D+):(\\D+)/</span>.test(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// v-on:click</span></span><br><span class=\"line\">                <span class=\"comment\">// dir -&gt; on  exp -&gt; click</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> dir = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> exp = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (dir) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'on'</span> :</span><br><span class=\"line\">                        direct.eventHandler(node, vm, exp, value)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'bind'</span> :</span><br><span class=\"line\">                        direct.bindProp(node, vm, exp, value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node.removeAttribute(attr.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是文本节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">comopileText</span>(<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    direct.text(node, vm, exp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>direct 是具体渲染视图步骤的代码，就不贴上来了</p>\n<p>其中渲染步骤有个额函数需要注意</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">node, vm, prop, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm[prop]</span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, prop, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        updaterFn &amp;&amp; updaterFn(node, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化了 Watcher 对象，将修改视图的方法添加给了 Watcher，这点接下来会讲到</p>\n<p>对指令解析完后，在添加到 DOM Tree里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$el.appendChild(<span class=\"keyword\">this</span>.$fragment);</span><br></pre></td></tr></table></figure>\n<p>这样就完成了简单地指令解析啦，当然，Vue本身的指令比这复杂的多，我只是实现了最简单的功能</p>\n","site":{"data":{}},"excerpt":"","more":"<p>模仿 vue 实现指令解析。</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> compile = <span class=\"keyword\">new</span> Compile(&#123;</span><br><span class=\"line\">    el: <span class=\"string\">'#compile'</span>,</span><br><span class=\"line\">    data: &#123;</span><br><span class=\"line\">        a: <span class=\"string\">'test model'</span>,</span><br><span class=\"line\">        b: <span class=\"string\">'hello World'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    methods: &#123;</span><br><span class=\"line\">        testToggle: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            alert(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"compile\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123; b &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    &#123;&#123; a &#125;&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">x-html</span>=<span class=\"string\">\"b\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">x-model</span>=<span class=\"string\">\"a\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">x-on:click</span>=<span class=\"string\">\"testToggle\"</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>首先创建一个名为 Compile 的函数，并在原型链上添加实现方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compile</span>(<span class=\"params\">vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> el = vm.$el</span><br><span class=\"line\">    <span class=\"comment\">// 获取文档碎片</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = nodeFragment(el)</span><br><span class=\"line\">    <span class=\"comment\">// 对指令进行解析</span></span><br><span class=\"line\">    compileElement(fragment, vm)</span><br><span class=\"line\">    <span class=\"comment\">// 添加 DOM</span></span><br><span class=\"line\">    el.appendChild(fragment)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"createDocumentFragment\"><a href=\"#createDocumentFragment\" class=\"headerlink\" title=\"createDocumentFragment\"></a>createDocumentFragment</h5><p>首先获取文档碎片(片段)  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nodeFragment</span>(<span class=\"params\">el</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fragment = <span class=\"built_in\">document</span>.createDocumentFragment()</span><br><span class=\"line\">    <span class=\"keyword\">var</span> child</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (child = el.firstChild) &#123;</span><br><span class=\"line\">        fragment.appendChild(child)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fragment</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里创建了一个 DocumentFragment 节点，看看 MDN 对 DocumentFragment 的解释：<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment\" target=\"_blank\">Document.createDocumentFragment()</a></p>\n<blockquote>\n<p>DocumentFragments are DOM Nodes. They are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children.<br>Since the document fragment is in memory and not part of the main DOM tree, appending children to it does not cause page reflow (computation of element’s position and geometry). Consequently, using document fragments often results in better performance.</p>\n</blockquote>\n<p>DocumentFragments 是一个文档节点，用于创建文本片段，文档片段保存在内存里，修改后在添加到 DOM Tree 里，这样避免了直接操作文档节点导致页面不断刷新带来的性能下降。</p>\n<p>获取到文本节点之后，在对文本节点进行解析  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileElement</span>(<span class=\"params\">frag, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> childNode = frag.childNodes</span><br><span class=\"line\">    <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\&#123;\\&#123;((?:.|\\n)+?)\\&#125;\\&#125;/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 对每个节点进行判断</span></span><br><span class=\"line\">    slice.call(childNode).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">node</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果是元素节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isElement(node)) &#123;</span><br><span class=\"line\">            compileNode(node, vm)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isTextType(node) &amp;&amp; reg.test(node.textContent)) &#123;</span><br><span class=\"line\">             <span class=\"comment\">// 如果是文本节点</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> exp = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>trim()</span><br><span class=\"line\">            comopileText(node, vm, exp)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 对子节点进行递归解析指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</span><br><span class=\"line\">            compileElement(node, vm)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是元素节点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compileNode</span>(<span class=\"params\">node, vm</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取元素属性</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodeAttributes = node.attributes</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name, value</span><br><span class=\"line\">    <span class=\"comment\">// 遍历元素属性</span></span><br><span class=\"line\">    slice.call(nodeAttributes).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">attr</span>) </span>&#123;</span><br><span class=\"line\">        name = attr.name</span><br><span class=\"line\">        value = attr.value</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 判断是否是 x- 指令</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">'v-'</span>) === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            name = name.slice(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (name.indexOf(<span class=\"string\">':'</span>) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                direct[name] &amp;&amp; direct[name](node, vm, value)</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"regexp\">/(\\D+):(\\D+)/</span>.test(name)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// v-on:click</span></span><br><span class=\"line\">                <span class=\"comment\">// dir -&gt; on  exp -&gt; click</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> dir = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> exp = <span class=\"built_in\">RegExp</span>.$<span class=\"number\">2</span></span><br><span class=\"line\">                <span class=\"keyword\">switch</span> (dir) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'on'</span> :</span><br><span class=\"line\">                        direct.eventHandler(node, vm, exp, value)</span><br><span class=\"line\">                        <span class=\"keyword\">break</span></span><br><span class=\"line\">                    <span class=\"keyword\">case</span> <span class=\"string\">'bind'</span> :</span><br><span class=\"line\">                        direct.bindProp(node, vm, exp, value)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            node.removeAttribute(attr.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果是文本节点<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">comopileText</span>(<span class=\"params\">node, vm, exp</span>) </span>&#123;</span><br><span class=\"line\">    direct.text(node, vm, exp)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>direct 是具体渲染视图步骤的代码，就不贴上来了</p>\n<p>其中渲染步骤有个额函数需要注意</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bind</span>(<span class=\"params\">node, vm, prop, dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> updaterFn = updater[dir + <span class=\"string\">'Updater'</span>]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> val = vm[prop]</span><br><span class=\"line\">    updaterFn &amp;&amp; updaterFn(node, val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">new</span> Watcher(vm, prop, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        updaterFn &amp;&amp; updaterFn(node, value)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化了 Watcher 对象，将修改视图的方法添加给了 Watcher，这点接下来会讲到</p>\n<p>对指令解析完后，在添加到 DOM Tree里</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$el.appendChild(<span class=\"keyword\">this</span>.$fragment);</span><br></pre></td></tr></table></figure>\n<p>这样就完成了简单地指令解析啦，当然，Vue本身的指令比这复杂的多，我只是实现了最简单的功能</p>\n"},{"layout":"post","title":"JS 格式化日期函数","date":"2017-04-27T01:27:00.000Z","_content":"\n在获取 JSON 日期格式的时候，有时会得到一串 13 位数的字符串。这是从 1970 年 1 月 1 日至今的毫秒数。用 new Date() 可以返回当前时间，例如：\n\n```js\nnew Date(1493256702849)\n// Thu Apr 27 2017 09:31:42 GMT+0800 (中国标准时间)\n```\n\nDate.prototype 方法：\n\n    Date.prototype.getDate()\n    根据本地时间返回指定日期对象的月份中的第几天(1-31)\n    Date.prototype.getDay()\n    根据本地时间返回指定日期对象的星期中的第几天(0-6)  周日-周六\n    Date.prototype.getFullYear()\n    根据本地时间返回指定日期对象的年份(四位数年份时返回四位数字)\n    Date.prototype.getHours()\n    根据本地时间返回指定日期对象的小时(0-23)\n    Date.prototype.getMilliseconds()\n    根据本地时间返回指定日期对象的微秒(0-999)\n    Date.prototype.getMinutes()\n    根据本地时间返回指定日期对象的分钟(0-59)\n    Date.prototype.getMonth()\n    根据本地时间返回指定日期对象的月份(0-11)     要 +1\n    Date.prototype.getSeconds()\n    根据本地时间返回指定日期对象的秒数(0-59)\n\n不过有时获取的时间戳是 10 位数的，比如 PHP，此时就需要做一下转换\n\n```js\nfunction jsonDate(timeStamp, fmt) { \n// timeStamp 为传递的时间戳，fmt 为返回的格式\n  if (!timeStamp) {\n    return ''\n  }\n  var _timeStamp = parseInt(timeStamp)\n  // 如果是 10 位的数字，*1000\n  if (_timeStamp.toString().length === 10) {\n    _timeStamp *= 1000\n  }\n  !fmt && (fmt = 'yyyy-MM-dd')  // 默认返回格式\n\n  var t = new Date(_timeStamp)\n\n  var o = {\n    'M+': t.getMonth() + 1, // 月份\n    'd+': t.getDate(),      // 日\n    'h+': t.getHours(),     // 小时\n    'm+': t.getMinutes(),   // 分\n    's+': t.getSeconds(),   // 秒\n    'q+': Math.floor((t.getMonth() + 3) / 3), // 季度\n    'S': t.getMilliseconds() // 毫秒\n  }\n  // test() 方法用于检测一个字符串是否匹配某个模式，返回 Boolean 值\n  if (/(y+)/.test(fmt)) \n    fmt = fmt.replace(RegExp.$1, (t.getFullYear() + '').substr(4 - RegExp.$1.length))\n  // 匹配为 fmt 格式\n  for (var k in o) {\n    if (new RegExp('(' + k + ')').test(fmt)) \n        fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)))\n  }\n  return fmt\n}\n```\n\n这是在网上找的代码，我只是添加了下注释。已经不知道原出处了。。。网上还有很多扩展版本，其实都是根据 new Date() 函数获取时间，在进行一些格式化处理。原理也是相同的\n\n\n\n","source":"_posts/json-data-formate.markdown","raw":"---\nlayout:     post\ntitle:      \"JS 格式化日期函数\"\ndate:       2017-04-27 09:27:00\ntags:\n    - JavaScript\n---\n\n在获取 JSON 日期格式的时候，有时会得到一串 13 位数的字符串。这是从 1970 年 1 月 1 日至今的毫秒数。用 new Date() 可以返回当前时间，例如：\n\n```js\nnew Date(1493256702849)\n// Thu Apr 27 2017 09:31:42 GMT+0800 (中国标准时间)\n```\n\nDate.prototype 方法：\n\n    Date.prototype.getDate()\n    根据本地时间返回指定日期对象的月份中的第几天(1-31)\n    Date.prototype.getDay()\n    根据本地时间返回指定日期对象的星期中的第几天(0-6)  周日-周六\n    Date.prototype.getFullYear()\n    根据本地时间返回指定日期对象的年份(四位数年份时返回四位数字)\n    Date.prototype.getHours()\n    根据本地时间返回指定日期对象的小时(0-23)\n    Date.prototype.getMilliseconds()\n    根据本地时间返回指定日期对象的微秒(0-999)\n    Date.prototype.getMinutes()\n    根据本地时间返回指定日期对象的分钟(0-59)\n    Date.prototype.getMonth()\n    根据本地时间返回指定日期对象的月份(0-11)     要 +1\n    Date.prototype.getSeconds()\n    根据本地时间返回指定日期对象的秒数(0-59)\n\n不过有时获取的时间戳是 10 位数的，比如 PHP，此时就需要做一下转换\n\n```js\nfunction jsonDate(timeStamp, fmt) { \n// timeStamp 为传递的时间戳，fmt 为返回的格式\n  if (!timeStamp) {\n    return ''\n  }\n  var _timeStamp = parseInt(timeStamp)\n  // 如果是 10 位的数字，*1000\n  if (_timeStamp.toString().length === 10) {\n    _timeStamp *= 1000\n  }\n  !fmt && (fmt = 'yyyy-MM-dd')  // 默认返回格式\n\n  var t = new Date(_timeStamp)\n\n  var o = {\n    'M+': t.getMonth() + 1, // 月份\n    'd+': t.getDate(),      // 日\n    'h+': t.getHours(),     // 小时\n    'm+': t.getMinutes(),   // 分\n    's+': t.getSeconds(),   // 秒\n    'q+': Math.floor((t.getMonth() + 3) / 3), // 季度\n    'S': t.getMilliseconds() // 毫秒\n  }\n  // test() 方法用于检测一个字符串是否匹配某个模式，返回 Boolean 值\n  if (/(y+)/.test(fmt)) \n    fmt = fmt.replace(RegExp.$1, (t.getFullYear() + '').substr(4 - RegExp.$1.length))\n  // 匹配为 fmt 格式\n  for (var k in o) {\n    if (new RegExp('(' + k + ')').test(fmt)) \n        fmt = fmt.replace(RegExp.$1, (RegExp.$1.length === 1) ? (o[k]) : (('00' + o[k]).substr(('' + o[k]).length)))\n  }\n  return fmt\n}\n```\n\n这是在网上找的代码，我只是添加了下注释。已经不知道原出处了。。。网上还有很多扩展版本，其实都是根据 new Date() 函数获取时间，在进行一些格式化处理。原理也是相同的\n\n\n\n","slug":"json-data-formate","published":1,"updated":"2018-05-09T08:39:31.591Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40v000y2mhsbl43m6p1","content":"<p>在获取 JSON 日期格式的时候，有时会得到一串 13 位数的字符串。这是从 1970 年 1 月 1 日至今的毫秒数。用 new Date() 可以返回当前时间，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1493256702849</span>)</span><br><span class=\"line\"><span class=\"comment\">// Thu Apr 27 2017 09:31:42 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n<p>Date.prototype 方法：</p>\n<pre><code>Date.prototype.getDate()\n根据本地时间返回指定日期对象的月份中的第几天(1-31)\nDate.prototype.getDay()\n根据本地时间返回指定日期对象的星期中的第几天(0-6)  周日-周六\nDate.prototype.getFullYear()\n根据本地时间返回指定日期对象的年份(四位数年份时返回四位数字)\nDate.prototype.getHours()\n根据本地时间返回指定日期对象的小时(0-23)\nDate.prototype.getMilliseconds()\n根据本地时间返回指定日期对象的微秒(0-999)\nDate.prototype.getMinutes()\n根据本地时间返回指定日期对象的分钟(0-59)\nDate.prototype.getMonth()\n根据本地时间返回指定日期对象的月份(0-11)     要 +1\nDate.prototype.getSeconds()\n根据本地时间返回指定日期对象的秒数(0-59)\n</code></pre><p>不过有时获取的时间戳是 10 位数的，比如 PHP，此时就需要做一下转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonDate</span>(<span class=\"params\">timeStamp, fmt</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// timeStamp 为传递的时间戳，fmt 为返回的格式</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!timeStamp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _timeStamp = <span class=\"built_in\">parseInt</span>(timeStamp)</span><br><span class=\"line\">  <span class=\"comment\">// 如果是 10 位的数字，*1000</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_timeStamp.toString().length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    _timeStamp *= <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  !fmt &amp;&amp; (fmt = <span class=\"string\">'yyyy-MM-dd'</span>)  <span class=\"comment\">// 默认返回格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(_timeStamp)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    <span class=\"string\">'M+'</span>: t.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">// 月份</span></span><br><span class=\"line\">    <span class=\"string\">'d+'</span>: t.getDate(),      <span class=\"comment\">// 日</span></span><br><span class=\"line\">    <span class=\"string\">'h+'</span>: t.getHours(),     <span class=\"comment\">// 小时</span></span><br><span class=\"line\">    <span class=\"string\">'m+'</span>: t.getMinutes(),   <span class=\"comment\">// 分</span></span><br><span class=\"line\">    <span class=\"string\">'s+'</span>: t.getSeconds(),   <span class=\"comment\">// 秒</span></span><br><span class=\"line\">    <span class=\"string\">'q+'</span>: <span class=\"built_in\">Math</span>.floor((t.getMonth() + <span class=\"number\">3</span>) / <span class=\"number\">3</span>), <span class=\"comment\">// 季度</span></span><br><span class=\"line\">    <span class=\"string\">'S'</span>: t.getMilliseconds() <span class=\"comment\">// 毫秒</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// test() 方法用于检测一个字符串是否匹配某个模式，返回 Boolean 值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/(y+)/</span>.test(fmt)) </span><br><span class=\"line\">    fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (t.getFullYear() + <span class=\"string\">''</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length))</span><br><span class=\"line\">  <span class=\"comment\">// 匹配为 fmt 格式</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'('</span> + k + <span class=\"string\">')'</span>).test(fmt)) </span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length === <span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">'00'</span> + o[k]).substr((<span class=\"string\">''</span> + o[k]).length)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fmt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是在网上找的代码，我只是添加了下注释。已经不知道原出处了。。。网上还有很多扩展版本，其实都是根据 new Date() 函数获取时间，在进行一些格式化处理。原理也是相同的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在获取 JSON 日期格式的时候，有时会得到一串 13 位数的字符串。这是从 1970 年 1 月 1 日至今的毫秒数。用 new Date() 可以返回当前时间，例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(<span class=\"number\">1493256702849</span>)</span><br><span class=\"line\"><span class=\"comment\">// Thu Apr 27 2017 09:31:42 GMT+0800 (中国标准时间)</span></span><br></pre></td></tr></table></figure>\n<p>Date.prototype 方法：</p>\n<pre><code>Date.prototype.getDate()\n根据本地时间返回指定日期对象的月份中的第几天(1-31)\nDate.prototype.getDay()\n根据本地时间返回指定日期对象的星期中的第几天(0-6)  周日-周六\nDate.prototype.getFullYear()\n根据本地时间返回指定日期对象的年份(四位数年份时返回四位数字)\nDate.prototype.getHours()\n根据本地时间返回指定日期对象的小时(0-23)\nDate.prototype.getMilliseconds()\n根据本地时间返回指定日期对象的微秒(0-999)\nDate.prototype.getMinutes()\n根据本地时间返回指定日期对象的分钟(0-59)\nDate.prototype.getMonth()\n根据本地时间返回指定日期对象的月份(0-11)     要 +1\nDate.prototype.getSeconds()\n根据本地时间返回指定日期对象的秒数(0-59)\n</code></pre><p>不过有时获取的时间戳是 10 位数的，比如 PHP，此时就需要做一下转换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jsonDate</span>(<span class=\"params\">timeStamp, fmt</span>) </span>&#123; </span><br><span class=\"line\"><span class=\"comment\">// timeStamp 为传递的时间戳，fmt 为返回的格式</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!timeStamp) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> _timeStamp = <span class=\"built_in\">parseInt</span>(timeStamp)</span><br><span class=\"line\">  <span class=\"comment\">// 如果是 10 位的数字，*1000</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_timeStamp.toString().length === <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    _timeStamp *= <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  !fmt &amp;&amp; (fmt = <span class=\"string\">'yyyy-MM-dd'</span>)  <span class=\"comment\">// 默认返回格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(_timeStamp)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">    <span class=\"string\">'M+'</span>: t.getMonth() + <span class=\"number\">1</span>, <span class=\"comment\">// 月份</span></span><br><span class=\"line\">    <span class=\"string\">'d+'</span>: t.getDate(),      <span class=\"comment\">// 日</span></span><br><span class=\"line\">    <span class=\"string\">'h+'</span>: t.getHours(),     <span class=\"comment\">// 小时</span></span><br><span class=\"line\">    <span class=\"string\">'m+'</span>: t.getMinutes(),   <span class=\"comment\">// 分</span></span><br><span class=\"line\">    <span class=\"string\">'s+'</span>: t.getSeconds(),   <span class=\"comment\">// 秒</span></span><br><span class=\"line\">    <span class=\"string\">'q+'</span>: <span class=\"built_in\">Math</span>.floor((t.getMonth() + <span class=\"number\">3</span>) / <span class=\"number\">3</span>), <span class=\"comment\">// 季度</span></span><br><span class=\"line\">    <span class=\"string\">'S'</span>: t.getMilliseconds() <span class=\"comment\">// 毫秒</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// test() 方法用于检测一个字符串是否匹配某个模式，返回 Boolean 值</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/(y+)/</span>.test(fmt)) </span><br><span class=\"line\">    fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (t.getFullYear() + <span class=\"string\">''</span>).substr(<span class=\"number\">4</span> - <span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length))</span><br><span class=\"line\">  <span class=\"comment\">// 匹配为 fmt 格式</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k <span class=\"keyword\">in</span> o) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'('</span> + k + <span class=\"string\">')'</span>).test(fmt)) </span><br><span class=\"line\">        fmt = fmt.replace(<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1</span>, (<span class=\"built_in\">RegExp</span>.$<span class=\"number\">1.</span>length === <span class=\"number\">1</span>) ? (o[k]) : ((<span class=\"string\">'00'</span> + o[k]).substr((<span class=\"string\">''</span> + o[k]).length)))</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fmt</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是在网上找的代码，我只是添加了下注释。已经不知道原出处了。。。网上还有很多扩展版本，其实都是根据 new Date() 函数获取时间，在进行一些格式化处理。原理也是相同的</p>\n"},{"layout":"post","title":"《集体编程智慧》—— 5.优化","date":"2018-06-27T07:36:00.000Z","_content":"\n本章讲的是如何使用一系列被称为随机优化的技术来解决协作类问题。比如本书中例子：一个家庭成员在不同地方的家庭要到纽约聚会，如何安排航班行程，使得费用与等待时间最少。\n\n### 成本计算\n\n要想安排行程，首先要明确有哪些变量控制着行程成本，本书中给出了机票价格，时间两个变量。所有家庭成员要等到所有人到齐后才走，回去时也是要同时到达机场。\n\n假定他们选择了一组往返航班，就可以根据航班算出价格，时间则是每个人在机场等待的时间相加之和，这样就能够简单的将成本量化。\n\n### 优化\n\n有了成本，我们就可以计算最优解。我们假定每个人做的航班有 10 种选择，家庭成员有 6 个人，往返就是 12 个航班。那么组合高达 10^12 次方，直接遍历不是个好的选择，所以我们应该选择优化算法来计算较优解而不是最优解。\n\n##### 随机搜索\n\n随机搜索不是一种很好的算法，但却是所有算法的真正意图，不管算法在如何复杂，只要不是遍历所有值，那就是在一组随机数据中寻找最优解。\n\n按照之前所说，假定 6 个成员，12 个航班，每个航班有 10 种选择。那么我们建立一个二元组\n\n```python\ndomain = [(0, 9)] * len(people*2)\n```\n\n我们对每一个选择进行 random 操作，取 0～9 之间的随机数\n\n```python\nselect = [random.randint(domain[i][0], domain[i][1]) \n          for i in range(len(domain))]\n```\n\n然后我们随机 1000 次，每次都比较出最好的那个值。这就是随即搜索，十分简单但也不完善，后面我们会在随机搜索之上添加一些新的算法。\n\n##### 爬山法\n\n爬山法从一个随机解法开始，然后再临近的解集中寻找更优解法，就好像人在半山腰往下走一样。\n\n首先我们如上创建一个随机解 select\n\n进入循环\n\n在随机解的基础上偏离一点\n\n```python\nneighbors.append(select[0:i] + [select[i]+1] + select[i+1:])\nneighbors.append(select[0:i] + [select[i]-1] + select[i+1:])\n```\n\n不断的计算更优解，将更优解替换为 select 如此循环直到无法找到更优解。\n\n这就是爬山法的思路，但爬山法有一个问题。我们的问题并不是像2次函数一样只有一个最低点，而是一个很多弯弯曲曲的函数，直接食用爬山法有时得到的解还不如随机搜索。\n\n##### 模拟退火\n\n另外一种算法是模拟退火算法，退火算法是从物理学领域启发而来的一种优化算法。退火是指将合金加热后在慢慢冷却的过程，大量原子因为受到激发而向周围跳跃然后又逐渐过渡到低能阶的状态。\n\n退火算法也是由一个随机解开始，它用一个变量 `template` 表示温度，温度一开始非常高，而后逐渐迭代降低。每次迭代期间，算法会随机选择题解的某个数组，然后朝某个方向变化。\n\n算法关键在于，如果新的值更低，新的题解就会成为当前题解，这与爬山算法相同。但不同的是新的值比当前值高时，当前值也有概率变成新值，这取决于温度的高低。这样算的好处是可以避免陷入局部最小值的问题。\n\n算法除了接受更优解，还有「概率」接受较差的解，概率的大小由 `template` 决定\n\n> P(A) = e^(-(hightcost-lowcost)/template)\n\n一开始的温度很高 `-(hightcost-lowcost)/template` 趋近于 0，所以 P(A) 趋近于 1，随着温度下降到 0，P(A) 趋紧于 0\n\n```python\n# costf 函数为成本算法，返回成本值\nea = costf(vec) # 当前成本\neb = constf(vecb) # 经过某个值偏移的成本\nif (eb < ea or random.random() < pow(math.e, -(ea-eb)/T)):\n    vec = vecb\n```\n\n这就是模拟退火算法。\n\n##### 遗传算法\n\n遗传算法来自于生物学的启发，这类算法的运行过程是先随机生成一组解，称之为种群，然后对种群中较优的个体进行变异和配对。\n\n变异很好理解，就是将某个值加一位或减一位，比如将父亲选择的3号航班改为4号。\n配对则是将两个解法之前某一段进行交换得到新的解法，类比于染色体。\n\n整个遗传算法就跟自然选择一样，从一代中挑选出较优的个体，然后变异和配对，在对下一代进行选择。如此反复。\n\n以上所有算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 optimization.py 内\n\n### 可视化\n\n优化算法的另一例子，是根据连接关联绘制图形，在展示一大群人及其彼此的关联，如何清晰的绘制出关系图，如图所示\n![](http://p8hsqsg3r.bkt.clouddn.com/relative-example.jpg)\n\n在关系网中，最重要的是防止交叉线的出现，这是我们可以选择构造一个成本函数，然后使用前面的优化算法得出最小交叉线的排列方式，假设4个点 A(x1,y1) B(x2,y2) C(x3,y3) D(x4,y4)，如何判断该 AB 与 CD 不交叉。\n\n首先判断直线是否平行，很好证就不说了\n>(y4-y3) * (x2-x1) - (x4-x3) * (y2-y1) = 0\n\n其次，根据「向量AC」至「向量AD」和「向量BC」至「向量BD」的方向是否一致，不一致则说明交叉。具体推导可参考<a href=\"https://segmentfault.com/a/1190000004457595\" target=\"_blank\">判断相交的最简方法</a>\n\n```python\ndir1 = (x3-x1) * (y4-y1) - (x4-x1) * (y3-y1)\ndir2 = (x3-x2) * (y4-y2) - (x4-x2) * (y3-y2)\n\nif dir1 * dir2 < 0:\n    total += 1\n```\n\n然后将其带入随机算法等即可，domain 限制在 10-370 附近表示在这个区域内取坐标值\n\n```python\ndomain = [(10,370)] * (len(people) * 2)\nsol = optimization.randomoptimize(domain, crosscount)\n```\n\n接下来使用 Image 绘制网格即可，详细代码在<a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 socialnetwork.py 内\n","source":"_posts/machine-optimization.markdown","raw":"---\nlayout:     post\ntitle:      \"《集体编程智慧》—— 5.优化\"\ndate:       2018-06-27 15:36:00\ntags:\n    - Python\n    - 机器学习\n---\n\n本章讲的是如何使用一系列被称为随机优化的技术来解决协作类问题。比如本书中例子：一个家庭成员在不同地方的家庭要到纽约聚会，如何安排航班行程，使得费用与等待时间最少。\n\n### 成本计算\n\n要想安排行程，首先要明确有哪些变量控制着行程成本，本书中给出了机票价格，时间两个变量。所有家庭成员要等到所有人到齐后才走，回去时也是要同时到达机场。\n\n假定他们选择了一组往返航班，就可以根据航班算出价格，时间则是每个人在机场等待的时间相加之和，这样就能够简单的将成本量化。\n\n### 优化\n\n有了成本，我们就可以计算最优解。我们假定每个人做的航班有 10 种选择，家庭成员有 6 个人，往返就是 12 个航班。那么组合高达 10^12 次方，直接遍历不是个好的选择，所以我们应该选择优化算法来计算较优解而不是最优解。\n\n##### 随机搜索\n\n随机搜索不是一种很好的算法，但却是所有算法的真正意图，不管算法在如何复杂，只要不是遍历所有值，那就是在一组随机数据中寻找最优解。\n\n按照之前所说，假定 6 个成员，12 个航班，每个航班有 10 种选择。那么我们建立一个二元组\n\n```python\ndomain = [(0, 9)] * len(people*2)\n```\n\n我们对每一个选择进行 random 操作，取 0～9 之间的随机数\n\n```python\nselect = [random.randint(domain[i][0], domain[i][1]) \n          for i in range(len(domain))]\n```\n\n然后我们随机 1000 次，每次都比较出最好的那个值。这就是随即搜索，十分简单但也不完善，后面我们会在随机搜索之上添加一些新的算法。\n\n##### 爬山法\n\n爬山法从一个随机解法开始，然后再临近的解集中寻找更优解法，就好像人在半山腰往下走一样。\n\n首先我们如上创建一个随机解 select\n\n进入循环\n\n在随机解的基础上偏离一点\n\n```python\nneighbors.append(select[0:i] + [select[i]+1] + select[i+1:])\nneighbors.append(select[0:i] + [select[i]-1] + select[i+1:])\n```\n\n不断的计算更优解，将更优解替换为 select 如此循环直到无法找到更优解。\n\n这就是爬山法的思路，但爬山法有一个问题。我们的问题并不是像2次函数一样只有一个最低点，而是一个很多弯弯曲曲的函数，直接食用爬山法有时得到的解还不如随机搜索。\n\n##### 模拟退火\n\n另外一种算法是模拟退火算法，退火算法是从物理学领域启发而来的一种优化算法。退火是指将合金加热后在慢慢冷却的过程，大量原子因为受到激发而向周围跳跃然后又逐渐过渡到低能阶的状态。\n\n退火算法也是由一个随机解开始，它用一个变量 `template` 表示温度，温度一开始非常高，而后逐渐迭代降低。每次迭代期间，算法会随机选择题解的某个数组，然后朝某个方向变化。\n\n算法关键在于，如果新的值更低，新的题解就会成为当前题解，这与爬山算法相同。但不同的是新的值比当前值高时，当前值也有概率变成新值，这取决于温度的高低。这样算的好处是可以避免陷入局部最小值的问题。\n\n算法除了接受更优解，还有「概率」接受较差的解，概率的大小由 `template` 决定\n\n> P(A) = e^(-(hightcost-lowcost)/template)\n\n一开始的温度很高 `-(hightcost-lowcost)/template` 趋近于 0，所以 P(A) 趋近于 1，随着温度下降到 0，P(A) 趋紧于 0\n\n```python\n# costf 函数为成本算法，返回成本值\nea = costf(vec) # 当前成本\neb = constf(vecb) # 经过某个值偏移的成本\nif (eb < ea or random.random() < pow(math.e, -(ea-eb)/T)):\n    vec = vecb\n```\n\n这就是模拟退火算法。\n\n##### 遗传算法\n\n遗传算法来自于生物学的启发，这类算法的运行过程是先随机生成一组解，称之为种群，然后对种群中较优的个体进行变异和配对。\n\n变异很好理解，就是将某个值加一位或减一位，比如将父亲选择的3号航班改为4号。\n配对则是将两个解法之前某一段进行交换得到新的解法，类比于染色体。\n\n整个遗传算法就跟自然选择一样，从一代中挑选出较优的个体，然后变异和配对，在对下一代进行选择。如此反复。\n\n以上所有算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 optimization.py 内\n\n### 可视化\n\n优化算法的另一例子，是根据连接关联绘制图形，在展示一大群人及其彼此的关联，如何清晰的绘制出关系图，如图所示\n![](http://p8hsqsg3r.bkt.clouddn.com/relative-example.jpg)\n\n在关系网中，最重要的是防止交叉线的出现，这是我们可以选择构造一个成本函数，然后使用前面的优化算法得出最小交叉线的排列方式，假设4个点 A(x1,y1) B(x2,y2) C(x3,y3) D(x4,y4)，如何判断该 AB 与 CD 不交叉。\n\n首先判断直线是否平行，很好证就不说了\n>(y4-y3) * (x2-x1) - (x4-x3) * (y2-y1) = 0\n\n其次，根据「向量AC」至「向量AD」和「向量BC」至「向量BD」的方向是否一致，不一致则说明交叉。具体推导可参考<a href=\"https://segmentfault.com/a/1190000004457595\" target=\"_blank\">判断相交的最简方法</a>\n\n```python\ndir1 = (x3-x1) * (y4-y1) - (x4-x1) * (y3-y1)\ndir2 = (x3-x2) * (y4-y2) - (x4-x2) * (y3-y2)\n\nif dir1 * dir2 < 0:\n    total += 1\n```\n\n然后将其带入随机算法等即可，domain 限制在 10-370 附近表示在这个区域内取坐标值\n\n```python\ndomain = [(10,370)] * (len(people) * 2)\nsol = optimization.randomoptimize(domain, crosscount)\n```\n\n接下来使用 Image 绘制网格即可，详细代码在<a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 socialnetwork.py 内\n","slug":"machine-optimization","published":1,"updated":"2018-06-27T13:50:52.351Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40w00112mhsjt1me69t","content":"<p>本章讲的是如何使用一系列被称为随机优化的技术来解决协作类问题。比如本书中例子：一个家庭成员在不同地方的家庭要到纽约聚会，如何安排航班行程，使得费用与等待时间最少。</p>\n<h3 id=\"成本计算\"><a href=\"#成本计算\" class=\"headerlink\" title=\"成本计算\"></a>成本计算</h3><p>要想安排行程，首先要明确有哪些变量控制着行程成本，本书中给出了机票价格，时间两个变量。所有家庭成员要等到所有人到齐后才走，回去时也是要同时到达机场。</p>\n<p>假定他们选择了一组往返航班，就可以根据航班算出价格，时间则是每个人在机场等待的时间相加之和，这样就能够简单的将成本量化。</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>有了成本，我们就可以计算最优解。我们假定每个人做的航班有 10 种选择，家庭成员有 6 个人，往返就是 12 个航班。那么组合高达 10^12 次方，直接遍历不是个好的选择，所以我们应该选择优化算法来计算较优解而不是最优解。</p>\n<h5 id=\"随机搜索\"><a href=\"#随机搜索\" class=\"headerlink\" title=\"随机搜索\"></a>随机搜索</h5><p>随机搜索不是一种很好的算法，但却是所有算法的真正意图，不管算法在如何复杂，只要不是遍历所有值，那就是在一组随机数据中寻找最优解。</p>\n<p>按照之前所说，假定 6 个成员，12 个航班，每个航班有 10 种选择。那么我们建立一个二元组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain = [(<span class=\"number\">0</span>, <span class=\"number\">9</span>)] * len(people*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>我们对每一个选择进行 random 操作，取 0～9 之间的随机数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select = [random.randint(domain[i][<span class=\"number\">0</span>], domain[i][<span class=\"number\">1</span>]) </span><br><span class=\"line\">          <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(domain))]</span><br></pre></td></tr></table></figure>\n<p>然后我们随机 1000 次，每次都比较出最好的那个值。这就是随即搜索，十分简单但也不完善，后面我们会在随机搜索之上添加一些新的算法。</p>\n<h5 id=\"爬山法\"><a href=\"#爬山法\" class=\"headerlink\" title=\"爬山法\"></a>爬山法</h5><p>爬山法从一个随机解法开始，然后再临近的解集中寻找更优解法，就好像人在半山腰往下走一样。</p>\n<p>首先我们如上创建一个随机解 select</p>\n<p>进入循环</p>\n<p>在随机解的基础上偏离一点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neighbors.append(select[<span class=\"number\">0</span>:i] + [select[i]+<span class=\"number\">1</span>] + select[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">neighbors.append(select[<span class=\"number\">0</span>:i] + [select[i]<span class=\"number\">-1</span>] + select[i+<span class=\"number\">1</span>:])</span><br></pre></td></tr></table></figure>\n<p>不断的计算更优解，将更优解替换为 select 如此循环直到无法找到更优解。</p>\n<p>这就是爬山法的思路，但爬山法有一个问题。我们的问题并不是像2次函数一样只有一个最低点，而是一个很多弯弯曲曲的函数，直接食用爬山法有时得到的解还不如随机搜索。</p>\n<h5 id=\"模拟退火\"><a href=\"#模拟退火\" class=\"headerlink\" title=\"模拟退火\"></a>模拟退火</h5><p>另外一种算法是模拟退火算法，退火算法是从物理学领域启发而来的一种优化算法。退火是指将合金加热后在慢慢冷却的过程，大量原子因为受到激发而向周围跳跃然后又逐渐过渡到低能阶的状态。</p>\n<p>退火算法也是由一个随机解开始，它用一个变量 <code>template</code> 表示温度，温度一开始非常高，而后逐渐迭代降低。每次迭代期间，算法会随机选择题解的某个数组，然后朝某个方向变化。</p>\n<p>算法关键在于，如果新的值更低，新的题解就会成为当前题解，这与爬山算法相同。但不同的是新的值比当前值高时，当前值也有概率变成新值，这取决于温度的高低。这样算的好处是可以避免陷入局部最小值的问题。</p>\n<p>算法除了接受更优解，还有「概率」接受较差的解，概率的大小由 <code>template</code> 决定</p>\n<blockquote>\n<p>P(A) = e^(-(hightcost-lowcost)/template)</p>\n</blockquote>\n<p>一开始的温度很高 <code>-(hightcost-lowcost)/template</code> 趋近于 0，所以 P(A) 趋近于 1，随着温度下降到 0，P(A) 趋紧于 0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># costf 函数为成本算法，返回成本值</span></span><br><span class=\"line\">ea = costf(vec) <span class=\"comment\"># 当前成本</span></span><br><span class=\"line\">eb = constf(vecb) <span class=\"comment\"># 经过某个值偏移的成本</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (eb &lt; ea <span class=\"keyword\">or</span> random.random() &lt; pow(math.e, -(ea-eb)/T)):</span><br><span class=\"line\">    vec = vecb</span><br></pre></td></tr></table></figure>\n<p>这就是模拟退火算法。</p>\n<h5 id=\"遗传算法\"><a href=\"#遗传算法\" class=\"headerlink\" title=\"遗传算法\"></a>遗传算法</h5><p>遗传算法来自于生物学的启发，这类算法的运行过程是先随机生成一组解，称之为种群，然后对种群中较优的个体进行变异和配对。</p>\n<p>变异很好理解，就是将某个值加一位或减一位，比如将父亲选择的3号航班改为4号。<br>配对则是将两个解法之前某一段进行交换得到新的解法，类比于染色体。</p>\n<p>整个遗传算法就跟自然选择一样，从一代中挑选出较优的个体，然后变异和配对，在对下一代进行选择。如此反复。</p>\n<p>以上所有算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 optimization.py 内</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>优化算法的另一例子，是根据连接关联绘制图形，在展示一大群人及其彼此的关联，如何清晰的绘制出关系图，如图所示<br><img src=\"http://p8hsqsg3r.bkt.clouddn.com/relative-example.jpg\" alt=\"\"></p>\n<p>在关系网中，最重要的是防止交叉线的出现，这是我们可以选择构造一个成本函数，然后使用前面的优化算法得出最小交叉线的排列方式，假设4个点 A(x1,y1) B(x2,y2) C(x3,y3) D(x4,y4)，如何判断该 AB 与 CD 不交叉。</p>\n<p>首先判断直线是否平行，很好证就不说了</p>\n<blockquote>\n<p>(y4-y3) <em> (x2-x1) - (x4-x3) </em> (y2-y1) = 0</p>\n</blockquote>\n<p>其次，根据「向量AC」至「向量AD」和「向量BC」至「向量BD」的方向是否一致，不一致则说明交叉。具体推导可参考<a href=\"https://segmentfault.com/a/1190000004457595\" target=\"_blank\">判断相交的最简方法</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir1 = (x3-x1) * (y4-y1) - (x4-x1) * (y3-y1)</span><br><span class=\"line\">dir2 = (x3-x2) * (y4-y2) - (x4-x2) * (y3-y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> dir1 * dir2 &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    total += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>然后将其带入随机算法等即可，domain 限制在 10-370 附近表示在这个区域内取坐标值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain = [(<span class=\"number\">10</span>,<span class=\"number\">370</span>)] * (len(people) * <span class=\"number\">2</span>)</span><br><span class=\"line\">sol = optimization.randomoptimize(domain, crosscount)</span><br></pre></td></tr></table></figure>\n<p>接下来使用 Image 绘制网格即可，详细代码在<a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 socialnetwork.py 内</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本章讲的是如何使用一系列被称为随机优化的技术来解决协作类问题。比如本书中例子：一个家庭成员在不同地方的家庭要到纽约聚会，如何安排航班行程，使得费用与等待时间最少。</p>\n<h3 id=\"成本计算\"><a href=\"#成本计算\" class=\"headerlink\" title=\"成本计算\"></a>成本计算</h3><p>要想安排行程，首先要明确有哪些变量控制着行程成本，本书中给出了机票价格，时间两个变量。所有家庭成员要等到所有人到齐后才走，回去时也是要同时到达机场。</p>\n<p>假定他们选择了一组往返航班，就可以根据航班算出价格，时间则是每个人在机场等待的时间相加之和，这样就能够简单的将成本量化。</p>\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><p>有了成本，我们就可以计算最优解。我们假定每个人做的航班有 10 种选择，家庭成员有 6 个人，往返就是 12 个航班。那么组合高达 10^12 次方，直接遍历不是个好的选择，所以我们应该选择优化算法来计算较优解而不是最优解。</p>\n<h5 id=\"随机搜索\"><a href=\"#随机搜索\" class=\"headerlink\" title=\"随机搜索\"></a>随机搜索</h5><p>随机搜索不是一种很好的算法，但却是所有算法的真正意图，不管算法在如何复杂，只要不是遍历所有值，那就是在一组随机数据中寻找最优解。</p>\n<p>按照之前所说，假定 6 个成员，12 个航班，每个航班有 10 种选择。那么我们建立一个二元组</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain = [(<span class=\"number\">0</span>, <span class=\"number\">9</span>)] * len(people*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>我们对每一个选择进行 random 操作，取 0～9 之间的随机数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select = [random.randint(domain[i][<span class=\"number\">0</span>], domain[i][<span class=\"number\">1</span>]) </span><br><span class=\"line\">          <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(domain))]</span><br></pre></td></tr></table></figure>\n<p>然后我们随机 1000 次，每次都比较出最好的那个值。这就是随即搜索，十分简单但也不完善，后面我们会在随机搜索之上添加一些新的算法。</p>\n<h5 id=\"爬山法\"><a href=\"#爬山法\" class=\"headerlink\" title=\"爬山法\"></a>爬山法</h5><p>爬山法从一个随机解法开始，然后再临近的解集中寻找更优解法，就好像人在半山腰往下走一样。</p>\n<p>首先我们如上创建一个随机解 select</p>\n<p>进入循环</p>\n<p>在随机解的基础上偏离一点</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">neighbors.append(select[<span class=\"number\">0</span>:i] + [select[i]+<span class=\"number\">1</span>] + select[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">neighbors.append(select[<span class=\"number\">0</span>:i] + [select[i]<span class=\"number\">-1</span>] + select[i+<span class=\"number\">1</span>:])</span><br></pre></td></tr></table></figure>\n<p>不断的计算更优解，将更优解替换为 select 如此循环直到无法找到更优解。</p>\n<p>这就是爬山法的思路，但爬山法有一个问题。我们的问题并不是像2次函数一样只有一个最低点，而是一个很多弯弯曲曲的函数，直接食用爬山法有时得到的解还不如随机搜索。</p>\n<h5 id=\"模拟退火\"><a href=\"#模拟退火\" class=\"headerlink\" title=\"模拟退火\"></a>模拟退火</h5><p>另外一种算法是模拟退火算法，退火算法是从物理学领域启发而来的一种优化算法。退火是指将合金加热后在慢慢冷却的过程，大量原子因为受到激发而向周围跳跃然后又逐渐过渡到低能阶的状态。</p>\n<p>退火算法也是由一个随机解开始，它用一个变量 <code>template</code> 表示温度，温度一开始非常高，而后逐渐迭代降低。每次迭代期间，算法会随机选择题解的某个数组，然后朝某个方向变化。</p>\n<p>算法关键在于，如果新的值更低，新的题解就会成为当前题解，这与爬山算法相同。但不同的是新的值比当前值高时，当前值也有概率变成新值，这取决于温度的高低。这样算的好处是可以避免陷入局部最小值的问题。</p>\n<p>算法除了接受更优解，还有「概率」接受较差的解，概率的大小由 <code>template</code> 决定</p>\n<blockquote>\n<p>P(A) = e^(-(hightcost-lowcost)/template)</p>\n</blockquote>\n<p>一开始的温度很高 <code>-(hightcost-lowcost)/template</code> 趋近于 0，所以 P(A) 趋近于 1，随着温度下降到 0，P(A) 趋紧于 0</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># costf 函数为成本算法，返回成本值</span></span><br><span class=\"line\">ea = costf(vec) <span class=\"comment\"># 当前成本</span></span><br><span class=\"line\">eb = constf(vecb) <span class=\"comment\"># 经过某个值偏移的成本</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (eb &lt; ea <span class=\"keyword\">or</span> random.random() &lt; pow(math.e, -(ea-eb)/T)):</span><br><span class=\"line\">    vec = vecb</span><br></pre></td></tr></table></figure>\n<p>这就是模拟退火算法。</p>\n<h5 id=\"遗传算法\"><a href=\"#遗传算法\" class=\"headerlink\" title=\"遗传算法\"></a>遗传算法</h5><p>遗传算法来自于生物学的启发，这类算法的运行过程是先随机生成一组解，称之为种群，然后对种群中较优的个体进行变异和配对。</p>\n<p>变异很好理解，就是将某个值加一位或减一位，比如将父亲选择的3号航班改为4号。<br>配对则是将两个解法之前某一段进行交换得到新的解法，类比于染色体。</p>\n<p>整个遗传算法就跟自然选择一样，从一代中挑选出较优的个体，然后变异和配对，在对下一代进行选择。如此反复。</p>\n<p>以上所有算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 optimization.py 内</p>\n<h3 id=\"可视化\"><a href=\"#可视化\" class=\"headerlink\" title=\"可视化\"></a>可视化</h3><p>优化算法的另一例子，是根据连接关联绘制图形，在展示一大群人及其彼此的关联，如何清晰的绘制出关系图，如图所示<br><img src=\"http://p8hsqsg3r.bkt.clouddn.com/relative-example.jpg\" alt=\"\"></p>\n<p>在关系网中，最重要的是防止交叉线的出现，这是我们可以选择构造一个成本函数，然后使用前面的优化算法得出最小交叉线的排列方式，假设4个点 A(x1,y1) B(x2,y2) C(x3,y3) D(x4,y4)，如何判断该 AB 与 CD 不交叉。</p>\n<p>首先判断直线是否平行，很好证就不说了</p>\n<blockquote>\n<p>(y4-y3) <em> (x2-x1) - (x4-x3) </em> (y2-y1) = 0</p>\n</blockquote>\n<p>其次，根据「向量AC」至「向量AD」和「向量BC」至「向量BD」的方向是否一致，不一致则说明交叉。具体推导可参考<a href=\"https://segmentfault.com/a/1190000004457595\" target=\"_blank\">判断相交的最简方法</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dir1 = (x3-x1) * (y4-y1) - (x4-x1) * (y3-y1)</span><br><span class=\"line\">dir2 = (x3-x2) * (y4-y2) - (x4-x2) * (y3-y2)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> dir1 * dir2 &lt; <span class=\"number\">0</span>:</span><br><span class=\"line\">    total += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>然后将其带入随机算法等即可，domain 限制在 10-370 附近表示在这个区域内取坐标值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">domain = [(<span class=\"number\">10</span>,<span class=\"number\">370</span>)] * (len(people) * <span class=\"number\">2</span>)</span><br><span class=\"line\">sol = optimization.randomoptimize(domain, crosscount)</span><br></pre></td></tr></table></figure>\n<p>接下来使用 Image 绘制网格即可，详细代码在<a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/5.%20Optimization\" target=\"_blank\">Github</a> 上的 socialnetwork.py 内</p>\n"},{"layout":"post","title":"mongoose 建立多个数据表","date":"2017-03-01T14:38:00.000Z","_content":"\n<a href=\"http://idmrchan.com/2017/03/01/express-mongoose-test/\" target=\"_blank\">上一节内容</a>\n\n在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入\n\n```js\nvar mongoose = require('mongoose'),\n  Schema = mongoose.Schema;\n\nvar personSchema = new Schema({\n  name: String,\n  age: Number,\n  _stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]\n});\n\nvar Person = mongoose.model('Person',personSchema);\n\nvar stroySchema = new Schema({\n  title: String,\n  _author: [{ type: Schema.Types.ObjectId, ref: 'Person' }]\n})\n\nvar Story = mongoose.model('Story',stroySchema);\n\nmodule.exports = {\n  Person: Person,\n  Story: Story\n}\n```\n\n建立多个表，用 module.exports 开放接口数组。personSchema 处代码\n\n```js\n_stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]\n```\n\n用于使 Person 连接 Story 。\n\n新建 add.js 文件\n\n```js\nvar Db = require('./db.js');\n\nvar user = new Db.Person({\n  name: 'MrChan',\n  age: 20\n});\nuser.save(function(err){\n  if(err) throw err;\n  console.log('successful');\n})\nvar story = new Db.Story({\n  title: 'this is a test',\n  _author: user._id\n});\nstory.save(function(err){\n  if(err) throw err;\n  console.log('successful');\n})\n\n```\n\n通过 _author: user._id 使 Person 可以获取 Story 数据。\n\n将 route/index.js 修改为如下：\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\nvar mongoose = require('mongoose');\nvar db = require('../model/db.js');\nvar connect = mongoose.connect('mongodb://localhost:test');\n\nvar data;\ndb.Story.find().populate('_author','name').exec(function(err,docs){\n  data = docs[0]._author[0].name;\n})\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express', content: data});\n});\n\nmodule.exports = router;\n```\n\npopulate用法参考<a href=\"http://mongoosejs.com/docs/populate.html\" target=\"_blank\">这里</a>\n通过这样就可以把数据传入到网页上， ejs 下代码可以用 `<%- content %>` 查看效果  \n  \n至于如何使用这个方法在真正的构建博客或是网站中使用，我还不能很好的写出来，有机会的话会更新的......\n\n  \n","source":"_posts/mongoose-population.markdown","raw":"---\nlayout:     post\ntitle:      \"mongoose 建立多个数据表\"\ndate:       2017-03-01 22:38:00\ntags:\n    - NodeJS\n    - MongoDB\n---\n\n<a href=\"http://idmrchan.com/2017/03/01/express-mongoose-test/\" target=\"_blank\">上一节内容</a>\n\n在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入\n\n```js\nvar mongoose = require('mongoose'),\n  Schema = mongoose.Schema;\n\nvar personSchema = new Schema({\n  name: String,\n  age: Number,\n  _stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]\n});\n\nvar Person = mongoose.model('Person',personSchema);\n\nvar stroySchema = new Schema({\n  title: String,\n  _author: [{ type: Schema.Types.ObjectId, ref: 'Person' }]\n})\n\nvar Story = mongoose.model('Story',stroySchema);\n\nmodule.exports = {\n  Person: Person,\n  Story: Story\n}\n```\n\n建立多个表，用 module.exports 开放接口数组。personSchema 处代码\n\n```js\n_stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]\n```\n\n用于使 Person 连接 Story 。\n\n新建 add.js 文件\n\n```js\nvar Db = require('./db.js');\n\nvar user = new Db.Person({\n  name: 'MrChan',\n  age: 20\n});\nuser.save(function(err){\n  if(err) throw err;\n  console.log('successful');\n})\nvar story = new Db.Story({\n  title: 'this is a test',\n  _author: user._id\n});\nstory.save(function(err){\n  if(err) throw err;\n  console.log('successful');\n})\n\n```\n\n通过 _author: user._id 使 Person 可以获取 Story 数据。\n\n将 route/index.js 修改为如下：\n\n```js\nvar express = require('express');\nvar router = express.Router();\n\nvar mongoose = require('mongoose');\nvar db = require('../model/db.js');\nvar connect = mongoose.connect('mongodb://localhost:test');\n\nvar data;\ndb.Story.find().populate('_author','name').exec(function(err,docs){\n  data = docs[0]._author[0].name;\n})\n\n/* GET home page. */\nrouter.get('/', function(req, res, next) {\n  res.render('index', { title: 'Express', content: data});\n});\n\nmodule.exports = router;\n```\n\npopulate用法参考<a href=\"http://mongoosejs.com/docs/populate.html\" target=\"_blank\">这里</a>\n通过这样就可以把数据传入到网页上， ejs 下代码可以用 `<%- content %>` 查看效果  \n  \n至于如何使用这个方法在真正的构建博客或是网站中使用，我还不能很好的写出来，有机会的话会更新的......\n\n  \n","slug":"mongoose-population","published":1,"updated":"2018-05-09T08:11:32.569Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40x00132mhss9rawuxh","content":"<p><a href=\"http://idmrchan.com/2017/03/01/express-mongoose-test/\" target=\"_blank\">上一节内容</a></p>\n<p>在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>),</span><br><span class=\"line\">  Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> personSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">  _stories: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Story'</span> &#125;]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>,personSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stroySchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  _author: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Person'</span> &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Story = mongoose.model(<span class=\"string\">'Story'</span>,stroySchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  Person: Person,</span><br><span class=\"line\">  Story: Story</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立多个表，用 module.exports 开放接口数组。personSchema 处代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_stories: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Story'</span> &#125;]</span><br></pre></td></tr></table></figure>\n<p>用于使 Person 连接 Story 。</p>\n<p>新建 add.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Db.Person(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'MrChan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> story = <span class=\"keyword\">new</span> Db.Story(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'this is a test'</span>,</span><br><span class=\"line\">  _author: user._id</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">story.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过 _author: user._id 使 Person 可以获取 Story 数据。</p>\n<p>将 route/index.js 修改为如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'../model/db.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> connect = mongoose.connect(<span class=\"string\">'mongodb://localhost:test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data;</span><br><span class=\"line\">db.Story.find().populate(<span class=\"string\">'_author'</span>,<span class=\"string\">'name'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">  data = docs[<span class=\"number\">0</span>]._author[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Express'</span>, <span class=\"attr\">content</span>: data&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>populate用法参考<a href=\"http://mongoosejs.com/docs/populate.html\" target=\"_blank\">这里</a><br>通过这样就可以把数据传入到网页上， ejs 下代码可以用 <code>&lt;%- content %&gt;</code> 查看效果  </p>\n<p>至于如何使用这个方法在真正的构建博客或是网站中使用，我还不能很好的写出来，有机会的话会更新的……</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://idmrchan.com/2017/03/01/express-mongoose-test/\" target=\"_blank\">上一节内容</a></p>\n<p>在 blog 目录下新建 model 文件夹，创建名为 db.js 的文件，里面输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>),</span><br><span class=\"line\">  Schema = mongoose.Schema;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> personSchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  age: <span class=\"built_in\">Number</span>,</span><br><span class=\"line\">  _stories: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Story'</span> &#125;]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Person = mongoose.model(<span class=\"string\">'Person'</span>,personSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> stroySchema = <span class=\"keyword\">new</span> Schema(&#123;</span><br><span class=\"line\">  title: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">  _author: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Person'</span> &#125;]</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> Story = mongoose.model(<span class=\"string\">'Story'</span>,stroySchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  Person: Person,</span><br><span class=\"line\">  Story: Story</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>建立多个表，用 module.exports 开放接口数组。personSchema 处代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_stories: [&#123; <span class=\"attr\">type</span>: Schema.Types.ObjectId, <span class=\"attr\">ref</span>: <span class=\"string\">'Story'</span> &#125;]</span><br></pre></td></tr></table></figure>\n<p>用于使 Person 连接 Story 。</p>\n<p>新建 add.js 文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Db = <span class=\"built_in\">require</span>(<span class=\"string\">'./db.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> Db.Person(&#123;</span><br><span class=\"line\">  name: <span class=\"string\">'MrChan'</span>,</span><br><span class=\"line\">  age: <span class=\"number\">20</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">user.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">var</span> story = <span class=\"keyword\">new</span> Db.Story(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'this is a test'</span>,</span><br><span class=\"line\">  _author: user._id</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">story.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(err) <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'successful'</span>);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>通过 _author: user._id 使 Person 可以获取 Story 数据。</p>\n<p>将 route/index.js 修改为如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> db = <span class=\"built_in\">require</span>(<span class=\"string\">'../model/db.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> connect = mongoose.connect(<span class=\"string\">'mongodb://localhost:test'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data;</span><br><span class=\"line\">db.Story.find().populate(<span class=\"string\">'_author'</span>,<span class=\"string\">'name'</span>).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,docs</span>)</span>&#123;</span><br><span class=\"line\">  data = docs[<span class=\"number\">0</span>]._author[<span class=\"number\">0</span>].name;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* GET home page. */</span></span><br><span class=\"line\">router.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</span><br><span class=\"line\">  res.render(<span class=\"string\">'index'</span>, &#123; <span class=\"attr\">title</span>: <span class=\"string\">'Express'</span>, <span class=\"attr\">content</span>: data&#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = router;</span><br></pre></td></tr></table></figure>\n<p>populate用法参考<a href=\"http://mongoosejs.com/docs/populate.html\" target=\"_blank\">这里</a><br>通过这样就可以把数据传入到网页上， ejs 下代码可以用 <code>&lt;%- content %&gt;</code> 查看效果  </p>\n<p>至于如何使用这个方法在真正的构建博客或是网站中使用，我还不能很好的写出来，有机会的话会更新的……</p>\n"},{"layout":"post","title":"Ubuntu 服务器上使用 NodeJs","date":"2017-08-27T09:32:00.000Z","_content":"\n### 安装 nodejs\n\n进官网下载源码（source code），可以看到下载路径如下 ` https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz `\n在服务器上下载源码\n\n    wget https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz\n    tar zxvf node-v6.11.2.tar.gz    解压缩\n    cd node-v6.11.2\n\n下载安装 node 所需要的包\n\n    apt-get update\n    apt-get install python gcc make g++\n\n然后运行 .configure 文件\n\n    .\\configure\n    make install\n    node -v     测试安装成功与否\n\n### 在普通用户下而非 root 用户运行 Node\n\n新建一个 virgil 的用户\n\n    useradd -m -s /bin/bash virgil\n    passwd virgil\n    su virgil   登陆到新用户\n\n此用户文件存放位置在 `/home/virgil` 下\n然后就可以把写好的 NodeJs 程序通过 FTP 上传到该目录下 \n\n### pm2 管理 node\npm2 可以防止 node 程序崩溃后中断\n\n再次登陆 root 用户，执行 `exit`\n\n    npm install pm2 -g\n\n在进入 virgil 用户 `su virgil`\n\n使用 pm2 启动 node 程序如下\n\n- pm2 start app.js    启动程序\n- pm2 list            查看启动的程序\n- pm2 stop *id        结束程序\n- pm2 startup         开机启动\n\n### 设置代理和跨域请求\n\n这个是属于 NodeJs，或者是 Http 的知识了，刚好做项目遇到，就顺便记下来( ╯□╰ )\n\n当遇到跨域问题时，用 NodeJs 转发数据时在头文件处添加如下代码即可：\n\n```js\nres.header(\"Access-Control-Allow-Origin\", \"*\")\nres.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\")\n```\n\n我的服务器在国外，爬去网易云歌曲路径时，因为是在国外，会获取不到，这时在头文件添加一行代理就可以解决，将 IP 指向国内\n\n```js\nres.header(\"X-Real-IP\", IP)\n```","source":"_posts/nodejs-ubuntu-server.markdown","raw":"---\nlayout:     post\ntitle:      \"Ubuntu 服务器上使用 NodeJs\"\ndate:       2017-08-27 17:32:00\ntags:\n    - NodeJS\n    - Linux\n---\n\n### 安装 nodejs\n\n进官网下载源码（source code），可以看到下载路径如下 ` https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz `\n在服务器上下载源码\n\n    wget https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz\n    tar zxvf node-v6.11.2.tar.gz    解压缩\n    cd node-v6.11.2\n\n下载安装 node 所需要的包\n\n    apt-get update\n    apt-get install python gcc make g++\n\n然后运行 .configure 文件\n\n    .\\configure\n    make install\n    node -v     测试安装成功与否\n\n### 在普通用户下而非 root 用户运行 Node\n\n新建一个 virgil 的用户\n\n    useradd -m -s /bin/bash virgil\n    passwd virgil\n    su virgil   登陆到新用户\n\n此用户文件存放位置在 `/home/virgil` 下\n然后就可以把写好的 NodeJs 程序通过 FTP 上传到该目录下 \n\n### pm2 管理 node\npm2 可以防止 node 程序崩溃后中断\n\n再次登陆 root 用户，执行 `exit`\n\n    npm install pm2 -g\n\n在进入 virgil 用户 `su virgil`\n\n使用 pm2 启动 node 程序如下\n\n- pm2 start app.js    启动程序\n- pm2 list            查看启动的程序\n- pm2 stop *id        结束程序\n- pm2 startup         开机启动\n\n### 设置代理和跨域请求\n\n这个是属于 NodeJs，或者是 Http 的知识了，刚好做项目遇到，就顺便记下来( ╯□╰ )\n\n当遇到跨域问题时，用 NodeJs 转发数据时在头文件处添加如下代码即可：\n\n```js\nres.header(\"Access-Control-Allow-Origin\", \"*\")\nres.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\")\n```\n\n我的服务器在国外，爬去网易云歌曲路径时，因为是在国外，会获取不到，这时在头文件添加一行代理就可以解决，将 IP 指向国内\n\n```js\nres.header(\"X-Real-IP\", IP)\n```","slug":"nodejs-ubuntu-server","published":1,"updated":"2018-05-09T09:34:54.343Z","comments":1,"photos":[],"link":"","_id":"cjv7qf40z00162mhs7vx30wcw","content":"<h3 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h3><p>进官网下载源码（source code），可以看到下载路径如下 <code>https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz</code><br>在服务器上下载源码</p>\n<pre><code>wget https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz\ntar zxvf node-v6.11.2.tar.gz    解压缩\ncd node-v6.11.2\n</code></pre><p>下载安装 node 所需要的包</p>\n<pre><code>apt-get update\napt-get install python gcc make g++\n</code></pre><p>然后运行 .configure 文件</p>\n<pre><code>.\\configure\nmake install\nnode -v     测试安装成功与否\n</code></pre><h3 id=\"在普通用户下而非-root-用户运行-Node\"><a href=\"#在普通用户下而非-root-用户运行-Node\" class=\"headerlink\" title=\"在普通用户下而非 root 用户运行 Node\"></a>在普通用户下而非 root 用户运行 Node</h3><p>新建一个 virgil 的用户</p>\n<pre><code>useradd -m -s /bin/bash virgil\npasswd virgil\nsu virgil   登陆到新用户\n</code></pre><p>此用户文件存放位置在 <code>/home/virgil</code> 下<br>然后就可以把写好的 NodeJs 程序通过 FTP 上传到该目录下 </p>\n<h3 id=\"pm2-管理-node\"><a href=\"#pm2-管理-node\" class=\"headerlink\" title=\"pm2 管理 node\"></a>pm2 管理 node</h3><p>pm2 可以防止 node 程序崩溃后中断</p>\n<p>再次登陆 root 用户，执行 <code>exit</code></p>\n<pre><code>npm install pm2 -g\n</code></pre><p>在进入 virgil 用户 <code>su virgil</code></p>\n<p>使用 pm2 启动 node 程序如下</p>\n<ul>\n<li>pm2 start app.js    启动程序</li>\n<li>pm2 list            查看启动的程序</li>\n<li>pm2 stop *id        结束程序</li>\n<li>pm2 startup         开机启动</li>\n</ul>\n<h3 id=\"设置代理和跨域请求\"><a href=\"#设置代理和跨域请求\" class=\"headerlink\" title=\"设置代理和跨域请求\"></a>设置代理和跨域请求</h3><p>这个是属于 NodeJs，或者是 Http 的知识了，刚好做项目遇到，就顺便记下来( ╯□╰ )</p>\n<p>当遇到跨域问题时，用 NodeJs 转发数据时在头文件处添加如下代码即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我的服务器在国外，爬去网易云歌曲路径时，因为是在国外，会获取不到，这时在头文件添加一行代理就可以解决，将 IP 指向国内</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.header(<span class=\"string\">\"X-Real-IP\"</span>, IP)</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装-nodejs\"><a href=\"#安装-nodejs\" class=\"headerlink\" title=\"安装 nodejs\"></a>安装 nodejs</h3><p>进官网下载源码（source code），可以看到下载路径如下 <code>https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz</code><br>在服务器上下载源码</p>\n<pre><code>wget https://nodejs.org/dist/v6.11.2/node-v6.11.2.tar.gz\ntar zxvf node-v6.11.2.tar.gz    解压缩\ncd node-v6.11.2\n</code></pre><p>下载安装 node 所需要的包</p>\n<pre><code>apt-get update\napt-get install python gcc make g++\n</code></pre><p>然后运行 .configure 文件</p>\n<pre><code>.\\configure\nmake install\nnode -v     测试安装成功与否\n</code></pre><h3 id=\"在普通用户下而非-root-用户运行-Node\"><a href=\"#在普通用户下而非-root-用户运行-Node\" class=\"headerlink\" title=\"在普通用户下而非 root 用户运行 Node\"></a>在普通用户下而非 root 用户运行 Node</h3><p>新建一个 virgil 的用户</p>\n<pre><code>useradd -m -s /bin/bash virgil\npasswd virgil\nsu virgil   登陆到新用户\n</code></pre><p>此用户文件存放位置在 <code>/home/virgil</code> 下<br>然后就可以把写好的 NodeJs 程序通过 FTP 上传到该目录下 </p>\n<h3 id=\"pm2-管理-node\"><a href=\"#pm2-管理-node\" class=\"headerlink\" title=\"pm2 管理 node\"></a>pm2 管理 node</h3><p>pm2 可以防止 node 程序崩溃后中断</p>\n<p>再次登陆 root 用户，执行 <code>exit</code></p>\n<pre><code>npm install pm2 -g\n</code></pre><p>在进入 virgil 用户 <code>su virgil</code></p>\n<p>使用 pm2 启动 node 程序如下</p>\n<ul>\n<li>pm2 start app.js    启动程序</li>\n<li>pm2 list            查看启动的程序</li>\n<li>pm2 stop *id        结束程序</li>\n<li>pm2 startup         开机启动</li>\n</ul>\n<h3 id=\"设置代理和跨域请求\"><a href=\"#设置代理和跨域请求\" class=\"headerlink\" title=\"设置代理和跨域请求\"></a>设置代理和跨域请求</h3><p>这个是属于 NodeJs，或者是 Http 的知识了，刚好做项目遇到，就顺便记下来( ╯□╰ )</p>\n<p>当遇到跨域问题时，用 NodeJs 转发数据时在头文件处添加如下代码即可：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.header(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>, <span class=\"string\">\"*\"</span>)</span><br><span class=\"line\">res.header(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span>)</span><br></pre></td></tr></table></figure>\n<p>我的服务器在国外，爬去网易云歌曲路径时，因为是在国外，会获取不到，这时在头文件添加一行代理就可以解决，将 IP 指向国内</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">res.header(<span class=\"string\">\"X-Real-IP\"</span>, IP)</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"使用 JS 控制 Mongodb Array 数组","date":"2017-03-20T13:20:00.000Z","_content":"\n1、博客添加标签功能，可创建多个标签。  \n\n一般用`;`，添加多个标签，为了防止用户使用不同的符号或使用了中文标点，先用正则表达式处理数组，将所有标点转为空格，在分割存入数据库数组。  \n\n\n```js\n//将中文标点和部分英文标点，统一转为空格\nvar string = string.replace(/[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]/ig,' ').replace(/[,|.|/|\\\\|;]/ig,' ');\n\n//分割空格转为数组\nvar strings = string.split(' ');\n```\n\n\n2、添加标签云，将所有标签去重后输出。  \n  \n由于不懂后台数据库处理数据，将数据全部输出，使用 JS 进行去重  \n\n```js\n//distinct 用来找出给定键的所有不同值\n//但 _tags 数据是一个字符串，其中会有重复的标签\n  db.collection.distinct(\"_tags\",function (err, docs) {\n    // 去重函数\n    function unique(array){\n      var n = [];\n      for(var i = 0;i < array.length; i++){\n        if(n.indexOf(array[i]) == -1) n.push(array[i]);\n      }\n      return n;\n    }\n    var tag = [];\n    for(var i=0;i<docs.length;i++){\n      for(var j=0;j<docs[i].length;j++){\n        tag.push(docs[i][j]);   //将所有标签转存到 tag\n      }\n    }\n    mongodb.close();\n    if (err) {\n      return callback(err);\n    }\n    callback(null, unique(tag));  //去重后返回\n  });\n```\n\n","source":"_posts/mongodb-js-zz.markdown","raw":"---\nlayout:     post\ntitle:      \"使用 JS 控制 Mongodb Array 数组\"\ndate:       2017-03-20 21:20:00\ntags:\n    - JavaScript\n    - MongoDB\n---\n\n1、博客添加标签功能，可创建多个标签。  \n\n一般用`;`，添加多个标签，为了防止用户使用不同的符号或使用了中文标点，先用正则表达式处理数组，将所有标点转为空格，在分割存入数据库数组。  \n\n\n```js\n//将中文标点和部分英文标点，统一转为空格\nvar string = string.replace(/[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]/ig,' ').replace(/[,|.|/|\\\\|;]/ig,' ');\n\n//分割空格转为数组\nvar strings = string.split(' ');\n```\n\n\n2、添加标签云，将所有标签去重后输出。  \n  \n由于不懂后台数据库处理数据，将数据全部输出，使用 JS 进行去重  \n\n```js\n//distinct 用来找出给定键的所有不同值\n//但 _tags 数据是一个字符串，其中会有重复的标签\n  db.collection.distinct(\"_tags\",function (err, docs) {\n    // 去重函数\n    function unique(array){\n      var n = [];\n      for(var i = 0;i < array.length; i++){\n        if(n.indexOf(array[i]) == -1) n.push(array[i]);\n      }\n      return n;\n    }\n    var tag = [];\n    for(var i=0;i<docs.length;i++){\n      for(var j=0;j<docs[i].length;j++){\n        tag.push(docs[i][j]);   //将所有标签转存到 tag\n      }\n    }\n    mongodb.close();\n    if (err) {\n      return callback(err);\n    }\n    callback(null, unique(tag));  //去重后返回\n  });\n```\n\n","slug":"mongodb-js-zz","published":1,"updated":"2018-05-09T08:21:55.950Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41100182mhs2hwju444","content":"<p>1、博客添加标签功能，可创建多个标签。  </p>\n<p>一般用<code>;</code>，添加多个标签，为了防止用户使用不同的符号或使用了中文标点，先用正则表达式处理数组，将所有标点转为空格，在分割存入数据库数组。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将中文标点和部分英文标点，统一转为空格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = string.replace(<span class=\"regexp\">/[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]/ig</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/[,|.|/|\\\\|;]/ig</span>,<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分割空格转为数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strings = string.split(<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure>\n<p>2、添加标签云，将所有标签去重后输出。  </p>\n<p>由于不懂后台数据库处理数据，将数据全部输出，使用 JS 进行去重  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//distinct 用来找出给定键的所有不同值</span></span><br><span class=\"line\"><span class=\"comment\">//但 _tags 数据是一个字符串，其中会有重复的标签</span></span><br><span class=\"line\">  db.collection.distinct(<span class=\"string\">\"_tags\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, docs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n.indexOf(array[i]) == <span class=\"number\">-1</span>) n.push(array[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;docs.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;docs[i].length;j++)&#123;</span><br><span class=\"line\">        tag.push(docs[i][j]);   <span class=\"comment\">//将所有标签转存到 tag</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mongodb.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, unique(tag));  <span class=\"comment\">//去重后返回</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1、博客添加标签功能，可创建多个标签。  </p>\n<p>一般用<code>;</code>，添加多个标签，为了防止用户使用不同的符号或使用了中文标点，先用正则表达式处理数组，将所有标点转为空格，在分割存入数据库数组。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将中文标点和部分英文标点，统一转为空格</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> string = string.replace(<span class=\"regexp\">/[\\u3000-\\u301e\\ufe10-\\ufe19\\ufe30-\\ufe44\\ufe50-\\ufe6b\\uff01-\\uffee]/ig</span>,<span class=\"string\">' '</span>).replace(<span class=\"regexp\">/[,|.|/|\\\\|;]/ig</span>,<span class=\"string\">' '</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//分割空格转为数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> strings = string.split(<span class=\"string\">' '</span>);</span><br></pre></td></tr></table></figure>\n<p>2、添加标签云，将所有标签去重后输出。  </p>\n<p>由于不懂后台数据库处理数据，将数据全部输出，使用 JS 进行去重  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//distinct 用来找出给定键的所有不同值</span></span><br><span class=\"line\"><span class=\"comment\">//但 _tags 数据是一个字符串，其中会有重复的标签</span></span><br><span class=\"line\">  db.collection.distinct(<span class=\"string\">\"_tags\"</span>,<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, docs</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 去重函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">array</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> n = [];</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i &lt; array.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n.indexOf(array[i]) == <span class=\"number\">-1</span>) n.push(array[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> tag = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;docs.length;i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j=<span class=\"number\">0</span>;j&lt;docs[i].length;j++)&#123;</span><br><span class=\"line\">        tag.push(docs[i][j]);   <span class=\"comment\">//将所有标签转存到 tag</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    mongodb.close();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> callback(err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    callback(<span class=\"literal\">null</span>, unique(tag));  <span class=\"comment\">//去重后返回</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Mac 下安装和配置 Mysql","date":"2017-12-05T04:12:00.000Z","_content":"\n### 安装和配置 Mysql\n\n##### 使用 brew 安装\n\n    brew install mysql\n\n##### 配置 Mysql\n\n    mysql.server start   开启\n    /usr/local/opt/mysql/bin/mysql_secure_installation  mysql 配置向导\n\n>VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It     checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin?\n>Press y|Y for Yes, any other key for No: k //是否采用mysql密码安全检测插件\n\n这里选择否，个人使用不需要开启 `valid_password` 插件，密码需要设置的很复杂，我就折腾了半天。。。\n\n然后就是输入密码，其他的一路选 `y` 就行\n\n##### 开启 Mysql\n\n- mysql.server start       开启\n- mysql.server stop        关闭\n- mysql.server restart     重启\n\n##### 登陆\n\n    mysql -u root -p\n\n##### 关闭 valid-password 前密码检测\n\n如果不小心开了 valid-password，可以在配置里关了，在重设密码\n\n先把 Mysql 关了\n\n    mysql.server stop\n\n    mysqld --help --verbose | more   查看帮助\n\n输出\n>Default options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n\nMysql 读取配置顺序如上，我们在 /etc 下创建 my.cnf\n\n添加\n\n```vim\n[mysqld]\nvalidate_password=off\n```\n\n重设密码\n\n    mysqladmin -u root -p password newpassword\n\n### Python-Mysql 库安装\n\n    brew install mysql-connector-c\n    pip install mysql-python\n\n一定要先安装 Mysql 在安装 mysql-python\n","source":"_posts/python-mysql.markdown","raw":"---\nlayout:     post\ntitle:      \"Mac 下安装和配置 Mysql\"\ndate:       2017-12-05 12:12:00\ntags:\n    - Mysql\n---\n\n### 安装和配置 Mysql\n\n##### 使用 brew 安装\n\n    brew install mysql\n\n##### 配置 Mysql\n\n    mysql.server start   开启\n    /usr/local/opt/mysql/bin/mysql_secure_installation  mysql 配置向导\n\n>VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It     checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin?\n>Press y|Y for Yes, any other key for No: k //是否采用mysql密码安全检测插件\n\n这里选择否，个人使用不需要开启 `valid_password` 插件，密码需要设置的很复杂，我就折腾了半天。。。\n\n然后就是输入密码，其他的一路选 `y` 就行\n\n##### 开启 Mysql\n\n- mysql.server start       开启\n- mysql.server stop        关闭\n- mysql.server restart     重启\n\n##### 登陆\n\n    mysql -u root -p\n\n##### 关闭 valid-password 前密码检测\n\n如果不小心开了 valid-password，可以在配置里关了，在重设密码\n\n先把 Mysql 关了\n\n    mysql.server stop\n\n    mysqld --help --verbose | more   查看帮助\n\n输出\n>Default options are read from the following files in the given order:\n/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf\n\nMysql 读取配置顺序如上，我们在 /etc 下创建 my.cnf\n\n添加\n\n```vim\n[mysqld]\nvalidate_password=off\n```\n\n重设密码\n\n    mysqladmin -u root -p password newpassword\n\n### Python-Mysql 库安装\n\n    brew install mysql-connector-c\n    pip install mysql-python\n\n一定要先安装 Mysql 在安装 mysql-python\n","slug":"python-mysql","published":1,"updated":"2018-05-09T09:42:34.678Z","comments":1,"photos":[],"link":"","_id":"cjv7qf414001b2mhsngpk08bp","content":"<h3 id=\"安装和配置-Mysql\"><a href=\"#安装和配置-Mysql\" class=\"headerlink\" title=\"安装和配置 Mysql\"></a>安装和配置 Mysql</h3><h5 id=\"使用-brew-安装\"><a href=\"#使用-brew-安装\" class=\"headerlink\" title=\"使用 brew 安装\"></a>使用 brew 安装</h5><pre><code>brew install mysql\n</code></pre><h5 id=\"配置-Mysql\"><a href=\"#配置-Mysql\" class=\"headerlink\" title=\"配置 Mysql\"></a>配置 Mysql</h5><pre><code>mysql.server start   开启\n/usr/local/opt/mysql/bin/mysql_secure_installation  mysql 配置向导\n</code></pre><blockquote>\n<p>VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It     checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin?<br>Press y|Y for Yes, any other key for No: k //是否采用mysql密码安全检测插件</p>\n</blockquote>\n<p>这里选择否，个人使用不需要开启 <code>valid_password</code> 插件，密码需要设置的很复杂，我就折腾了半天。。。</p>\n<p>然后就是输入密码，其他的一路选 <code>y</code> 就行</p>\n<h5 id=\"开启-Mysql\"><a href=\"#开启-Mysql\" class=\"headerlink\" title=\"开启 Mysql\"></a>开启 Mysql</h5><ul>\n<li>mysql.server start       开启</li>\n<li>mysql.server stop        关闭</li>\n<li>mysql.server restart     重启</li>\n</ul>\n<h5 id=\"登陆\"><a href=\"#登陆\" class=\"headerlink\" title=\"登陆\"></a>登陆</h5><pre><code>mysql -u root -p\n</code></pre><h5 id=\"关闭-valid-password-前密码检测\"><a href=\"#关闭-valid-password-前密码检测\" class=\"headerlink\" title=\"关闭 valid-password 前密码检测\"></a>关闭 valid-password 前密码检测</h5><p>如果不小心开了 valid-password，可以在配置里关了，在重设密码</p>\n<p>先把 Mysql 关了</p>\n<pre><code>mysql.server stop\n\nmysqld --help --verbose | more   查看帮助\n</code></pre><p>输出</p>\n<blockquote>\n<p>Default options are read from the following files in the given order:<br>/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf</p>\n</blockquote>\n<p>Mysql 读取配置顺序如上，我们在 /etc 下创建 my.cnf</p>\n<p>添加</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">validate_password=off</span><br></pre></td></tr></table></figure>\n<p>重设密码</p>\n<pre><code>mysqladmin -u root -p password newpassword\n</code></pre><h3 id=\"Python-Mysql-库安装\"><a href=\"#Python-Mysql-库安装\" class=\"headerlink\" title=\"Python-Mysql 库安装\"></a>Python-Mysql 库安装</h3><pre><code>brew install mysql-connector-c\npip install mysql-python\n</code></pre><p>一定要先安装 Mysql 在安装 mysql-python</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装和配置-Mysql\"><a href=\"#安装和配置-Mysql\" class=\"headerlink\" title=\"安装和配置 Mysql\"></a>安装和配置 Mysql</h3><h5 id=\"使用-brew-安装\"><a href=\"#使用-brew-安装\" class=\"headerlink\" title=\"使用 brew 安装\"></a>使用 brew 安装</h5><pre><code>brew install mysql\n</code></pre><h5 id=\"配置-Mysql\"><a href=\"#配置-Mysql\" class=\"headerlink\" title=\"配置 Mysql\"></a>配置 Mysql</h5><pre><code>mysql.server start   开启\n/usr/local/opt/mysql/bin/mysql_secure_installation  mysql 配置向导\n</code></pre><blockquote>\n<p>VALIDATE PASSWORD PLUGIN can be used to test passwordsand improve security. It     checks the strength of password and allows the users to set only those passwords which are secure enough. Would you like to setup VALIDATE PASSWORD plugin?<br>Press y|Y for Yes, any other key for No: k //是否采用mysql密码安全检测插件</p>\n</blockquote>\n<p>这里选择否，个人使用不需要开启 <code>valid_password</code> 插件，密码需要设置的很复杂，我就折腾了半天。。。</p>\n<p>然后就是输入密码，其他的一路选 <code>y</code> 就行</p>\n<h5 id=\"开启-Mysql\"><a href=\"#开启-Mysql\" class=\"headerlink\" title=\"开启 Mysql\"></a>开启 Mysql</h5><ul>\n<li>mysql.server start       开启</li>\n<li>mysql.server stop        关闭</li>\n<li>mysql.server restart     重启</li>\n</ul>\n<h5 id=\"登陆\"><a href=\"#登陆\" class=\"headerlink\" title=\"登陆\"></a>登陆</h5><pre><code>mysql -u root -p\n</code></pre><h5 id=\"关闭-valid-password-前密码检测\"><a href=\"#关闭-valid-password-前密码检测\" class=\"headerlink\" title=\"关闭 valid-password 前密码检测\"></a>关闭 valid-password 前密码检测</h5><p>如果不小心开了 valid-password，可以在配置里关了，在重设密码</p>\n<p>先把 Mysql 关了</p>\n<pre><code>mysql.server stop\n\nmysqld --help --verbose | more   查看帮助\n</code></pre><p>输出</p>\n<blockquote>\n<p>Default options are read from the following files in the given order:<br>/etc/my.cnf /etc/mysql/my.cnf /usr/local/etc/my.cnf ~/.my.cnf</p>\n</blockquote>\n<p>Mysql 读取配置顺序如上，我们在 /etc 下创建 my.cnf</p>\n<p>添加</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">validate_password=off</span><br></pre></td></tr></table></figure>\n<p>重设密码</p>\n<pre><code>mysqladmin -u root -p password newpassword\n</code></pre><h3 id=\"Python-Mysql-库安装\"><a href=\"#Python-Mysql-库安装\" class=\"headerlink\" title=\"Python-Mysql 库安装\"></a>Python-Mysql 库安装</h3><pre><code>brew install mysql-connector-c\npip install mysql-python\n</code></pre><p>一定要先安装 Mysql 在安装 mysql-python</p>\n"},{"layout":"post","title":"自定义 npm 和使用 json-server 进行前端 mock 数据","date":"2018-05-13T07:23:32.000Z","_content":"\n本文章来源于昨天看了公司的一个 npm 工具，其中一个功能是自定义 mock 数据，于是依葫芦画瓢自己也跟着写了个一个。\n\n### 自定义 npm\n\n##### 可执行脚本\n\n平常我们都知道 JavaScript 是运行在浏览器环境的脚本语言，不过 JS 同时也和 Python 等语言一样可以运行在命令行环境等任意环境。写一个可执行脚本：\n\n```js\n// hello.js\n#!/usr/bin/env node\nconsole.log('hello world')\n```\n\n修改文件权限并执行\n\n    $ chmod 755 hello.js\n    $ ./hello\n    hello world\n\n如果想把 hello 前面的路径去除，即在环境中添加 hello 的环境变量。在当前目录下新建 package.json ，写入下面的内容。\n\n```json\n{\n    \"name\": \"hello\",\n    \"bin\": {\n        \"hello\": './hello.js'\n    }\n}\n```\n\n`name` 可以是其他名字，但一定要有。然后执行命令：\n\n    $ npm link\n    $ hello\n    hello world\n\n**注意：执行 npm link 要确保没有安装任何 node_modules，否则可能会报错。**\n\n这就是 npm 库的用法。\n\n##### yargs 模块\n\n有时执行命令要带上参数，此时要用到 yargs 模块\n\n    $ npm install --save yargs\n\nyargs 有一个 argv 属性，可以获取命令行参数\n\n```js\nconst argv = require('yargs').argv\nconsole.log(argv._)     // _ 返回非连词线开头参数\nconsole.log(argv.p)     // -p 或 --port\n```\n\n用法如下\n\n    $ hello dev -p 8888\n    ['dev']\n    8888\n\n还可以添加一些帮助信息\n\n```js\nconst argv = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('dev-srv', 'local API server (-p port || 3002)')\n    .demand(1)\n    .epilog('https://github.com/pansy-cx')\n    .argv\n```\n\n以下是相关用法：\n\n- usage：用法格式\n- command: 子命令\n- demand：是否必选\n- example：提供例子\n- help：显示帮助信息\n- epilog：出现在帮助信息的结尾\n\n返回结果\n\n    $ hello\n    Usage: hello <command> [options]\n    Commands:\n      hello dev-srv  local API server (-p port || 3002)\n    Options:\n      --help     Show help          [boolean]\n      --version  Show version number          [boolean]\n    https://github.com/pansy-cx\n    Not enough non-option arguments: got 0, need at least 1\n\n\n通过这些，我们就可以 DIY 自己的 npm 工具了。\n\n### json-server\n\n##### 用法简介\n```json\n// db.json\n{\n    \"author\": {\n        \"img\": \"http://idmrchan/avator\",\n        \"name\": \"Virgil\"\n    }\n}\n```\n\n    $ json-server --watch db.json\n\n访问 `http://localhost:8080/author` get it\n\n`{\"author\": {\"img\": \"http://idmrchan/avator\", \"name\": \"Virgil\"}}`\n\n不过，当请求为 POST DELETE 等方法时，json-server 会根据情况添加或删除数据，而不是和我们理想中的返回 db.json 中的数据。\n\n所以我们可以自己改造一下 json-server，写一个我们自定义的 npm 方法。\n\n##### 自定义 json-server\n\n```js\n// virgil-cli.js\n#!/usr/bin/env node\nconst chalk = require('chalk')\nconst argv = require('yargs')\n  .usage('Usage: $0 <command> [options]')\n  .command('dev-srv', 'local API server (-p port || 3002)')\n  .demand(1)\n  .epilogue('https://github.com/pansy-cx/virgil-cli')\n  .argv\n\nlet port = 3002\n\nif (argv._ && argv._[0] === 'dev-srv') {\n    console.log(chalk.bold('Virgil Local API Server \\n'))\n    if (argv.p) {\n        port = parseInt(argv.p)\n    }\n    start()\n    watch()\n}\n```\n\n执行 `virgil dev-srv -p 8080`，就可以执行 `start()` 和 `watch()` 两个函数。\n\n`start()` 函数如下\n\n```js\nconst path = require('path')\nconst fse = require('fs-extra')\nconst cors = require('cors')\nconst jsonServer = require('json-server')\nconst enableDestroy = require('server-destroy')\n// 获取当前目录下 db.json 文件路径\nlet localDbFile = path.join(process.cwd(), '/db.json')\nlet server\n\n// 获取本机 IP\nconst getLocalIP = () => {\n    let address,\n        os = require('os'),\n        ifaces = os.networkInterfaces()\n\n    for (let dev in ifaces) {\n        let iface = ifaces[dev].filter(details => details.family === 'IPv4' && details.internal === false)\n        if (iface.length > 0) {\n          address = iface[0].address\n          break\n        }\n    }\n    return address\n}\n\nconst start = () => {\n    let localDb = fse.readJsonSync(localDbFile)\n    let app = jsonServer.create()\n    app.use(cors())\n    let router = jsonServer.router(localDb)\n    router.render = (req, res) => {\n        let dbData = res.locals.data    // GET 方法返回 db.json 数据，而 POST 等只会返回 {}\n        if (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH' || req.method === 'DELETE') {\n            // POST 等方法需要自行获取\n            dbData = localDb[req.path.replace('/', '')] || {}\n        }\n         \n        let _status = req.query._status || 200\n        // 自定义错误状态\n        let msgJson = {}, msgCode = 0\n        for (let i in dbData) {\n            if (i === 'code' || i === 'status') {\n                msgCode = dbData[i]\n                msgJson[i] = msgCode\n            }\n            if (i === 'msg' || i === 'error' || i === 'err') {\n                msgJson[i] = dbData[i]\n            }\n        }\n        // 发送数据\n        if (msgCode && msgCode > 400) {\n            res.status(msgCode).jsonp(msgJson)\n        } else if (_status * 1 >= 400) {\n            res.sendStatus(_status)\n        } else {\n            res.json(dbData)\n        }\n    }\n    app.use(jsonServer.defaults())\n    app.use(router)\n    server = app.listen(port, () => {\n        console.log(`👏  Running : http://${getLocalIP()}:${port}\\n`)\n    })\n    enableDestroy(server)\n} \n```\n\n相关 API 可以参考 <a href=\"https://github.com/typicode/json-server\" target=\"_blank\">json-server</a>\n\n```json\n{\n    \"author\": {\n        \"name\": \"Virgil\",\n        \"age\": 18\n    }\n}\n```\n\nGET && POST 用法都可返回 json 对象，如果要模拟错误返回，可以添加状态\n\n```json\n{\n    \"author\": {\n        \"code\": 404,\n        \"msg\": \"info is err\",\n        \"name\": \"Virgil\",\n        // ...\n    }\n}\n```\n\n返回 `GET /author 404 3.423 ms - 35`\n\n```json\n\"err\": {\n    \"code\": 404,\n    \"msg\": \"info is err\"\n}\n```\n\n由于不同项目后台返回的错误信息和数据状态不尽相同，真正构造 npm 工具时可能需要添加可自定义格式的情况，这个我还未想到较合理的解决方式，今后用到的时候可以在考虑添加。\n\n`watch()` 用于监听文件改动\n\n```js\nconst chokidar = require('chokidar')\nconst watch = () => {\n    console.log('🙈  Watching : Local Data => %s/test/{db,r}.json\\n', process.cwd())\n    chokidar\n    .watch([local_r_file, local_db_file])\n    .on('change', () => {\n        console.log(chalk.gray('🙏  Restarting...'))\n        server.destroy(() => {\n            start()\n        })\n    })\n}\n```\n\n##### 添加映射\n\n实际项目中，API 的前缀都是很长的，为了更清晰的展示，可以做个映射\n\n```r.json\n{\n    \"/sit/sjfwefj/example/autor\": \"author\"\n}\n```\n\n```js\nconst localRFile = path.join(process.cwd(), '/test/r.json')\nconst start = () => {\n    let localR = fse.readJsonSync(localRFile)\n    app.use(jsonServer.rewriter(localR))    // 映射\n}\n```\n\n这样访问数据时 `localhost: 8080/sit/sjfwefj/example/autor`\n\n---\n\n对于前端来说，掌握如何使用和自定义 npm 还是很必要的，一来在公司里很多有公司内部 npm，当你要对项目进行修改或重构时，有时候甚至需要修改原来写在 npm 里的一些数据；再者 npm 用的好，能够很好的提高效率，可以将常用的一些步骤给工具化。\n\n今后如果我的个人 npm 达到一定规模时，会考虑将其开源在 Github 上。\n","source":"_posts/npm-customize-and-httpservice.markdown","raw":"---\nlayout:     post\ntitle:      \"自定义 npm 和使用 json-server 进行前端 mock 数据\"\ndate:       2018-05-13 15:23:32\ntags:\n    - JavaScript\n    - npm\n---\n\n本文章来源于昨天看了公司的一个 npm 工具，其中一个功能是自定义 mock 数据，于是依葫芦画瓢自己也跟着写了个一个。\n\n### 自定义 npm\n\n##### 可执行脚本\n\n平常我们都知道 JavaScript 是运行在浏览器环境的脚本语言，不过 JS 同时也和 Python 等语言一样可以运行在命令行环境等任意环境。写一个可执行脚本：\n\n```js\n// hello.js\n#!/usr/bin/env node\nconsole.log('hello world')\n```\n\n修改文件权限并执行\n\n    $ chmod 755 hello.js\n    $ ./hello\n    hello world\n\n如果想把 hello 前面的路径去除，即在环境中添加 hello 的环境变量。在当前目录下新建 package.json ，写入下面的内容。\n\n```json\n{\n    \"name\": \"hello\",\n    \"bin\": {\n        \"hello\": './hello.js'\n    }\n}\n```\n\n`name` 可以是其他名字，但一定要有。然后执行命令：\n\n    $ npm link\n    $ hello\n    hello world\n\n**注意：执行 npm link 要确保没有安装任何 node_modules，否则可能会报错。**\n\n这就是 npm 库的用法。\n\n##### yargs 模块\n\n有时执行命令要带上参数，此时要用到 yargs 模块\n\n    $ npm install --save yargs\n\nyargs 有一个 argv 属性，可以获取命令行参数\n\n```js\nconst argv = require('yargs').argv\nconsole.log(argv._)     // _ 返回非连词线开头参数\nconsole.log(argv.p)     // -p 或 --port\n```\n\n用法如下\n\n    $ hello dev -p 8888\n    ['dev']\n    8888\n\n还可以添加一些帮助信息\n\n```js\nconst argv = require('yargs')\n    .usage('Usage: $0 <command> [options]')\n    .command('dev-srv', 'local API server (-p port || 3002)')\n    .demand(1)\n    .epilog('https://github.com/pansy-cx')\n    .argv\n```\n\n以下是相关用法：\n\n- usage：用法格式\n- command: 子命令\n- demand：是否必选\n- example：提供例子\n- help：显示帮助信息\n- epilog：出现在帮助信息的结尾\n\n返回结果\n\n    $ hello\n    Usage: hello <command> [options]\n    Commands:\n      hello dev-srv  local API server (-p port || 3002)\n    Options:\n      --help     Show help          [boolean]\n      --version  Show version number          [boolean]\n    https://github.com/pansy-cx\n    Not enough non-option arguments: got 0, need at least 1\n\n\n通过这些，我们就可以 DIY 自己的 npm 工具了。\n\n### json-server\n\n##### 用法简介\n```json\n// db.json\n{\n    \"author\": {\n        \"img\": \"http://idmrchan/avator\",\n        \"name\": \"Virgil\"\n    }\n}\n```\n\n    $ json-server --watch db.json\n\n访问 `http://localhost:8080/author` get it\n\n`{\"author\": {\"img\": \"http://idmrchan/avator\", \"name\": \"Virgil\"}}`\n\n不过，当请求为 POST DELETE 等方法时，json-server 会根据情况添加或删除数据，而不是和我们理想中的返回 db.json 中的数据。\n\n所以我们可以自己改造一下 json-server，写一个我们自定义的 npm 方法。\n\n##### 自定义 json-server\n\n```js\n// virgil-cli.js\n#!/usr/bin/env node\nconst chalk = require('chalk')\nconst argv = require('yargs')\n  .usage('Usage: $0 <command> [options]')\n  .command('dev-srv', 'local API server (-p port || 3002)')\n  .demand(1)\n  .epilogue('https://github.com/pansy-cx/virgil-cli')\n  .argv\n\nlet port = 3002\n\nif (argv._ && argv._[0] === 'dev-srv') {\n    console.log(chalk.bold('Virgil Local API Server \\n'))\n    if (argv.p) {\n        port = parseInt(argv.p)\n    }\n    start()\n    watch()\n}\n```\n\n执行 `virgil dev-srv -p 8080`，就可以执行 `start()` 和 `watch()` 两个函数。\n\n`start()` 函数如下\n\n```js\nconst path = require('path')\nconst fse = require('fs-extra')\nconst cors = require('cors')\nconst jsonServer = require('json-server')\nconst enableDestroy = require('server-destroy')\n// 获取当前目录下 db.json 文件路径\nlet localDbFile = path.join(process.cwd(), '/db.json')\nlet server\n\n// 获取本机 IP\nconst getLocalIP = () => {\n    let address,\n        os = require('os'),\n        ifaces = os.networkInterfaces()\n\n    for (let dev in ifaces) {\n        let iface = ifaces[dev].filter(details => details.family === 'IPv4' && details.internal === false)\n        if (iface.length > 0) {\n          address = iface[0].address\n          break\n        }\n    }\n    return address\n}\n\nconst start = () => {\n    let localDb = fse.readJsonSync(localDbFile)\n    let app = jsonServer.create()\n    app.use(cors())\n    let router = jsonServer.router(localDb)\n    router.render = (req, res) => {\n        let dbData = res.locals.data    // GET 方法返回 db.json 数据，而 POST 等只会返回 {}\n        if (req.method === 'POST' || req.method === 'PUT' || req.method === 'PATCH' || req.method === 'DELETE') {\n            // POST 等方法需要自行获取\n            dbData = localDb[req.path.replace('/', '')] || {}\n        }\n         \n        let _status = req.query._status || 200\n        // 自定义错误状态\n        let msgJson = {}, msgCode = 0\n        for (let i in dbData) {\n            if (i === 'code' || i === 'status') {\n                msgCode = dbData[i]\n                msgJson[i] = msgCode\n            }\n            if (i === 'msg' || i === 'error' || i === 'err') {\n                msgJson[i] = dbData[i]\n            }\n        }\n        // 发送数据\n        if (msgCode && msgCode > 400) {\n            res.status(msgCode).jsonp(msgJson)\n        } else if (_status * 1 >= 400) {\n            res.sendStatus(_status)\n        } else {\n            res.json(dbData)\n        }\n    }\n    app.use(jsonServer.defaults())\n    app.use(router)\n    server = app.listen(port, () => {\n        console.log(`👏  Running : http://${getLocalIP()}:${port}\\n`)\n    })\n    enableDestroy(server)\n} \n```\n\n相关 API 可以参考 <a href=\"https://github.com/typicode/json-server\" target=\"_blank\">json-server</a>\n\n```json\n{\n    \"author\": {\n        \"name\": \"Virgil\",\n        \"age\": 18\n    }\n}\n```\n\nGET && POST 用法都可返回 json 对象，如果要模拟错误返回，可以添加状态\n\n```json\n{\n    \"author\": {\n        \"code\": 404,\n        \"msg\": \"info is err\",\n        \"name\": \"Virgil\",\n        // ...\n    }\n}\n```\n\n返回 `GET /author 404 3.423 ms - 35`\n\n```json\n\"err\": {\n    \"code\": 404,\n    \"msg\": \"info is err\"\n}\n```\n\n由于不同项目后台返回的错误信息和数据状态不尽相同，真正构造 npm 工具时可能需要添加可自定义格式的情况，这个我还未想到较合理的解决方式，今后用到的时候可以在考虑添加。\n\n`watch()` 用于监听文件改动\n\n```js\nconst chokidar = require('chokidar')\nconst watch = () => {\n    console.log('🙈  Watching : Local Data => %s/test/{db,r}.json\\n', process.cwd())\n    chokidar\n    .watch([local_r_file, local_db_file])\n    .on('change', () => {\n        console.log(chalk.gray('🙏  Restarting...'))\n        server.destroy(() => {\n            start()\n        })\n    })\n}\n```\n\n##### 添加映射\n\n实际项目中，API 的前缀都是很长的，为了更清晰的展示，可以做个映射\n\n```r.json\n{\n    \"/sit/sjfwefj/example/autor\": \"author\"\n}\n```\n\n```js\nconst localRFile = path.join(process.cwd(), '/test/r.json')\nconst start = () => {\n    let localR = fse.readJsonSync(localRFile)\n    app.use(jsonServer.rewriter(localR))    // 映射\n}\n```\n\n这样访问数据时 `localhost: 8080/sit/sjfwefj/example/autor`\n\n---\n\n对于前端来说，掌握如何使用和自定义 npm 还是很必要的，一来在公司里很多有公司内部 npm，当你要对项目进行修改或重构时，有时候甚至需要修改原来写在 npm 里的一些数据；再者 npm 用的好，能够很好的提高效率，可以将常用的一些步骤给工具化。\n\n今后如果我的个人 npm 达到一定规模时，会考虑将其开源在 Github 上。\n","slug":"npm-customize-and-httpservice","published":1,"updated":"2018-05-13T07:46:11.860Z","comments":1,"photos":[],"link":"","_id":"cjv7qf416001d2mhsep91czbn","content":"<p>本文章来源于昨天看了公司的一个 npm 工具，其中一个功能是自定义 mock 数据，于是依葫芦画瓢自己也跟着写了个一个。</p>\n<h3 id=\"自定义-npm\"><a href=\"#自定义-npm\" class=\"headerlink\" title=\"自定义 npm\"></a>自定义 npm</h3><h5 id=\"可执行脚本\"><a href=\"#可执行脚本\" class=\"headerlink\" title=\"可执行脚本\"></a>可执行脚本</h5><p>平常我们都知道 JavaScript 是运行在浏览器环境的脚本语言，不过 JS 同时也和 Python 等语言一样可以运行在命令行环境等任意环境。写一个可执行脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure>\n<p>修改文件权限并执行</p>\n<pre><code>$ chmod 755 hello.js\n$ ./hello\nhello world\n</code></pre><p>如果想把 hello 前面的路径去除，即在环境中添加 hello 的环境变量。在当前目录下新建 package.json ，写入下面的内容。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"hello\"</span>: './hello.js'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>name</code> 可以是其他名字，但一定要有。然后执行命令：</p>\n<pre><code>$ npm link\n$ hello\nhello world\n</code></pre><p><strong>注意：执行 npm link 要确保没有安装任何 node_modules，否则可能会报错。</strong></p>\n<p>这就是 npm 库的用法。</p>\n<h5 id=\"yargs-模块\"><a href=\"#yargs-模块\" class=\"headerlink\" title=\"yargs 模块\"></a>yargs 模块</h5><p>有时执行命令要带上参数，此时要用到 yargs 模块</p>\n<pre><code>$ npm install --save yargs\n</code></pre><p>yargs 有一个 argv 属性，可以获取命令行参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>).argv</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(argv._)     <span class=\"comment\">// _ 返回非连词线开头参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(argv.p)     <span class=\"comment\">// -p 或 --port</span></span><br></pre></td></tr></table></figure>\n<p>用法如下</p>\n<pre><code>$ hello dev -p 8888\n[&apos;dev&apos;]\n8888\n</code></pre><p>还可以添加一些帮助信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>)</span><br><span class=\"line\">    .usage(<span class=\"string\">'Usage: $0 &lt;command&gt; [options]'</span>)</span><br><span class=\"line\">    .command(<span class=\"string\">'dev-srv'</span>, <span class=\"string\">'local API server (-p port || 3002)'</span>)</span><br><span class=\"line\">    .demand(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .epilog(<span class=\"string\">'https://github.com/pansy-cx'</span>)</span><br><span class=\"line\">    .argv</span><br></pre></td></tr></table></figure>\n<p>以下是相关用法：</p>\n<ul>\n<li>usage：用法格式</li>\n<li>command: 子命令</li>\n<li>demand：是否必选</li>\n<li>example：提供例子</li>\n<li>help：显示帮助信息</li>\n<li>epilog：出现在帮助信息的结尾</li>\n</ul>\n<p>返回结果</p>\n<pre><code>$ hello\nUsage: hello &lt;command&gt; [options]\nCommands:\n  hello dev-srv  local API server (-p port || 3002)\nOptions:\n  --help     Show help          [boolean]\n  --version  Show version number          [boolean]\nhttps://github.com/pansy-cx\nNot enough non-option arguments: got 0, need at least 1\n</code></pre><p>通过这些，我们就可以 DIY 自己的 npm 工具了。</p>\n<h3 id=\"json-server\"><a href=\"#json-server\" class=\"headerlink\" title=\"json-server\"></a>json-server</h3><h5 id=\"用法简介\"><a href=\"#用法简介\" class=\"headerlink\" title=\"用法简介\"></a>用法简介</h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// db.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"img\"</span>: <span class=\"string\">\"http://idmrchan/avator\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>$ json-server --watch db.json\n</code></pre><p>访问 <code>http://localhost:8080/author</code> get it</p>\n<p><code>{&quot;author&quot;: {&quot;img&quot;: &quot;http://idmrchan/avator&quot;, &quot;name&quot;: &quot;Virgil&quot;}}</code></p>\n<p>不过，当请求为 POST DELETE 等方法时，json-server 会根据情况添加或删除数据，而不是和我们理想中的返回 db.json 中的数据。</p>\n<p>所以我们可以自己改造一下 json-server，写一个我们自定义的 npm 方法。</p>\n<h5 id=\"自定义-json-server\"><a href=\"#自定义-json-server\" class=\"headerlink\" title=\"自定义 json-server\"></a>自定义 json-server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// virgil-cli.js</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>)</span><br><span class=\"line\">  .usage(<span class=\"string\">'Usage: $0 &lt;command&gt; [options]'</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">'dev-srv'</span>, <span class=\"string\">'local API server (-p port || 3002)'</span>)</span><br><span class=\"line\">  .demand(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .epilogue(<span class=\"string\">'https://github.com/pansy-cx/virgil-cli'</span>)</span><br><span class=\"line\">  .argv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> port = <span class=\"number\">3002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (argv._ &amp;&amp; argv._[<span class=\"number\">0</span>] === <span class=\"string\">'dev-srv'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.bold(<span class=\"string\">'Virgil Local API Server \\n'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argv.p) &#123;</span><br><span class=\"line\">        port = <span class=\"built_in\">parseInt</span>(argv.p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start()</span><br><span class=\"line\">    watch()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>virgil dev-srv -p 8080</code>，就可以执行 <code>start()</code> 和 <code>watch()</code> 两个函数。</p>\n<p><code>start()</code> 函数如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fse = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-extra'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">'cors'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> jsonServer = <span class=\"built_in\">require</span>(<span class=\"string\">'json-server'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> enableDestroy = <span class=\"built_in\">require</span>(<span class=\"string\">'server-destroy'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 获取当前目录下 db.json 文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> localDbFile = path.join(process.cwd(), <span class=\"string\">'/db.json'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取本机 IP</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLocalIP = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> address,</span><br><span class=\"line\">        os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>),</span><br><span class=\"line\">        ifaces = os.networkInterfaces()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dev <span class=\"keyword\">in</span> ifaces) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> iface = ifaces[dev].filter(<span class=\"function\"><span class=\"params\">details</span> =&gt;</span> details.family === <span class=\"string\">'IPv4'</span> &amp;&amp; details.internal === <span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iface.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          address = iface[<span class=\"number\">0</span>].address</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> localDb = fse.readJsonSync(localDbFile)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> app = jsonServer.create()</span><br><span class=\"line\">    app.use(cors())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> router = jsonServer.router(localDb)</span><br><span class=\"line\">    router.render = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dbData = res.locals.data    <span class=\"comment\">// GET 方法返回 db.json 数据，而 POST 等只会返回 &#123;&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (req.method === <span class=\"string\">'POST'</span> || req.method === <span class=\"string\">'PUT'</span> || req.method === <span class=\"string\">'PATCH'</span> || req.method === <span class=\"string\">'DELETE'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// POST 等方法需要自行获取</span></span><br><span class=\"line\">            dbData = localDb[req.path.replace(<span class=\"string\">'/'</span>, <span class=\"string\">''</span>)] || &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">let</span> _status = req.query._status || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">// 自定义错误状态</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> msgJson = &#123;&#125;, msgCode = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> dbData) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === <span class=\"string\">'code'</span> || i === <span class=\"string\">'status'</span>) &#123;</span><br><span class=\"line\">                msgCode = dbData[i]</span><br><span class=\"line\">                msgJson[i] = msgCode</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === <span class=\"string\">'msg'</span> || i === <span class=\"string\">'error'</span> || i === <span class=\"string\">'err'</span>) &#123;</span><br><span class=\"line\">                msgJson[i] = dbData[i]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msgCode &amp;&amp; msgCode &gt; <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            res.status(msgCode).jsonp(msgJson)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_status * <span class=\"number\">1</span> &gt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            res.sendStatus(_status)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.json(dbData)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.use(jsonServer.defaults())</span><br><span class=\"line\">    app.use(router)</span><br><span class=\"line\">    server = app.listen(port, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`👏  Running : http://<span class=\"subst\">$&#123;getLocalIP()&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>\\n`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    enableDestroy(server)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关 API 可以参考 <a href=\"https://github.com/typicode/json-server\" target=\"_blank\">json-server</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GET &amp;&amp; POST 用法都可返回 json 对象，如果要模拟错误返回，可以添加状态</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"code\"</span>: <span class=\"number\">404</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"info is err\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span>,</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回 <code>GET /author 404 3.423 ms - 35</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"err\": &#123;</span><br><span class=\"line\">    \"code\": 404,</span><br><span class=\"line\">    \"msg\": \"info is err\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于不同项目后台返回的错误信息和数据状态不尽相同，真正构造 npm 工具时可能需要添加可自定义格式的情况，这个我还未想到较合理的解决方式，今后用到的时候可以在考虑添加。</p>\n<p><code>watch()</code> 用于监听文件改动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chokidar = <span class=\"built_in\">require</span>(<span class=\"string\">'chokidar'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> watch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'🙈  Watching : Local Data =&gt; %s/test/&#123;db,r&#125;.json\\n'</span>, process.cwd())</span><br><span class=\"line\">    chokidar</span><br><span class=\"line\">    .watch([local_r_file, local_db_file])</span><br><span class=\"line\">    .on(<span class=\"string\">'change'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(chalk.gray(<span class=\"string\">'🙏  Restarting...'</span>))</span><br><span class=\"line\">        server.destroy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            start()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加映射\"><a href=\"#添加映射\" class=\"headerlink\" title=\"添加映射\"></a>添加映射</h5><p>实际项目中，API 的前缀都是很长的，为了更清晰的展示，可以做个映射</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;/sit/sjfwefj/example/autor&quot;: &quot;author&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> localRFile = path.join(process.cwd(), <span class=\"string\">'/test/r.json'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> localR = fse.readJsonSync(localRFile)</span><br><span class=\"line\">    app.use(jsonServer.rewriter(localR))    <span class=\"comment\">// 映射</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样访问数据时 <code>localhost: 8080/sit/sjfwefj/example/autor</code></p>\n<hr>\n<p>对于前端来说，掌握如何使用和自定义 npm 还是很必要的，一来在公司里很多有公司内部 npm，当你要对项目进行修改或重构时，有时候甚至需要修改原来写在 npm 里的一些数据；再者 npm 用的好，能够很好的提高效率，可以将常用的一些步骤给工具化。</p>\n<p>今后如果我的个人 npm 达到一定规模时，会考虑将其开源在 Github 上。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文章来源于昨天看了公司的一个 npm 工具，其中一个功能是自定义 mock 数据，于是依葫芦画瓢自己也跟着写了个一个。</p>\n<h3 id=\"自定义-npm\"><a href=\"#自定义-npm\" class=\"headerlink\" title=\"自定义 npm\"></a>自定义 npm</h3><h5 id=\"可执行脚本\"><a href=\"#可执行脚本\" class=\"headerlink\" title=\"可执行脚本\"></a>可执行脚本</h5><p>平常我们都知道 JavaScript 是运行在浏览器环境的脚本语言，不过 JS 同时也和 Python 等语言一样可以运行在命令行环境等任意环境。写一个可执行脚本：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// hello.js</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'hello world'</span>)</span><br></pre></td></tr></table></figure>\n<p>修改文件权限并执行</p>\n<pre><code>$ chmod 755 hello.js\n$ ./hello\nhello world\n</code></pre><p>如果想把 hello 前面的路径去除，即在环境中添加 hello 的环境变量。在当前目录下新建 package.json ，写入下面的内容。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"hello\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"hello\"</span>: './hello.js'</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>name</code> 可以是其他名字，但一定要有。然后执行命令：</p>\n<pre><code>$ npm link\n$ hello\nhello world\n</code></pre><p><strong>注意：执行 npm link 要确保没有安装任何 node_modules，否则可能会报错。</strong></p>\n<p>这就是 npm 库的用法。</p>\n<h5 id=\"yargs-模块\"><a href=\"#yargs-模块\" class=\"headerlink\" title=\"yargs 模块\"></a>yargs 模块</h5><p>有时执行命令要带上参数，此时要用到 yargs 模块</p>\n<pre><code>$ npm install --save yargs\n</code></pre><p>yargs 有一个 argv 属性，可以获取命令行参数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>).argv</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(argv._)     <span class=\"comment\">// _ 返回非连词线开头参数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(argv.p)     <span class=\"comment\">// -p 或 --port</span></span><br></pre></td></tr></table></figure>\n<p>用法如下</p>\n<pre><code>$ hello dev -p 8888\n[&apos;dev&apos;]\n8888\n</code></pre><p>还可以添加一些帮助信息</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>)</span><br><span class=\"line\">    .usage(<span class=\"string\">'Usage: $0 &lt;command&gt; [options]'</span>)</span><br><span class=\"line\">    .command(<span class=\"string\">'dev-srv'</span>, <span class=\"string\">'local API server (-p port || 3002)'</span>)</span><br><span class=\"line\">    .demand(<span class=\"number\">1</span>)</span><br><span class=\"line\">    .epilog(<span class=\"string\">'https://github.com/pansy-cx'</span>)</span><br><span class=\"line\">    .argv</span><br></pre></td></tr></table></figure>\n<p>以下是相关用法：</p>\n<ul>\n<li>usage：用法格式</li>\n<li>command: 子命令</li>\n<li>demand：是否必选</li>\n<li>example：提供例子</li>\n<li>help：显示帮助信息</li>\n<li>epilog：出现在帮助信息的结尾</li>\n</ul>\n<p>返回结果</p>\n<pre><code>$ hello\nUsage: hello &lt;command&gt; [options]\nCommands:\n  hello dev-srv  local API server (-p port || 3002)\nOptions:\n  --help     Show help          [boolean]\n  --version  Show version number          [boolean]\nhttps://github.com/pansy-cx\nNot enough non-option arguments: got 0, need at least 1\n</code></pre><p>通过这些，我们就可以 DIY 自己的 npm 工具了。</p>\n<h3 id=\"json-server\"><a href=\"#json-server\" class=\"headerlink\" title=\"json-server\"></a>json-server</h3><h5 id=\"用法简介\"><a href=\"#用法简介\" class=\"headerlink\" title=\"用法简介\"></a>用法简介</h5><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// db.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"img\"</span>: <span class=\"string\">\"http://idmrchan/avator\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>$ json-server --watch db.json\n</code></pre><p>访问 <code>http://localhost:8080/author</code> get it</p>\n<p><code>{&quot;author&quot;: {&quot;img&quot;: &quot;http://idmrchan/avator&quot;, &quot;name&quot;: &quot;Virgil&quot;}}</code></p>\n<p>不过，当请求为 POST DELETE 等方法时，json-server 会根据情况添加或删除数据，而不是和我们理想中的返回 db.json 中的数据。</p>\n<p>所以我们可以自己改造一下 json-server，写一个我们自定义的 npm 方法。</p>\n<h5 id=\"自定义-json-server\"><a href=\"#自定义-json-server\" class=\"headerlink\" title=\"自定义 json-server\"></a>自定义 json-server</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// virgil-cli.js</span></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/env node</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">'chalk'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> argv = <span class=\"built_in\">require</span>(<span class=\"string\">'yargs'</span>)</span><br><span class=\"line\">  .usage(<span class=\"string\">'Usage: $0 &lt;command&gt; [options]'</span>)</span><br><span class=\"line\">  .command(<span class=\"string\">'dev-srv'</span>, <span class=\"string\">'local API server (-p port || 3002)'</span>)</span><br><span class=\"line\">  .demand(<span class=\"number\">1</span>)</span><br><span class=\"line\">  .epilogue(<span class=\"string\">'https://github.com/pansy-cx/virgil-cli'</span>)</span><br><span class=\"line\">  .argv</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> port = <span class=\"number\">3002</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (argv._ &amp;&amp; argv._[<span class=\"number\">0</span>] === <span class=\"string\">'dev-srv'</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(chalk.bold(<span class=\"string\">'Virgil Local API Server \\n'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argv.p) &#123;</span><br><span class=\"line\">        port = <span class=\"built_in\">parseInt</span>(argv.p)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    start()</span><br><span class=\"line\">    watch()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>virgil dev-srv -p 8080</code>，就可以执行 <code>start()</code> 和 <code>watch()</code> 两个函数。</p>\n<p><code>start()</code> 函数如下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fse = <span class=\"built_in\">require</span>(<span class=\"string\">'fs-extra'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> cors = <span class=\"built_in\">require</span>(<span class=\"string\">'cors'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> jsonServer = <span class=\"built_in\">require</span>(<span class=\"string\">'json-server'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> enableDestroy = <span class=\"built_in\">require</span>(<span class=\"string\">'server-destroy'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 获取当前目录下 db.json 文件路径</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> localDbFile = path.join(process.cwd(), <span class=\"string\">'/db.json'</span>)</span><br><span class=\"line\"><span class=\"keyword\">let</span> server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取本机 IP</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLocalIP = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> address,</span><br><span class=\"line\">        os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>),</span><br><span class=\"line\">        ifaces = os.networkInterfaces()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dev <span class=\"keyword\">in</span> ifaces) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> iface = ifaces[dev].filter(<span class=\"function\"><span class=\"params\">details</span> =&gt;</span> details.family === <span class=\"string\">'IPv4'</span> &amp;&amp; details.internal === <span class=\"literal\">false</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (iface.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          address = iface[<span class=\"number\">0</span>].address</span><br><span class=\"line\">          <span class=\"keyword\">break</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> address</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> localDb = fse.readJsonSync(localDbFile)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> app = jsonServer.create()</span><br><span class=\"line\">    app.use(cors())</span><br><span class=\"line\">    <span class=\"keyword\">let</span> router = jsonServer.router(localDb)</span><br><span class=\"line\">    router.render = <span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> dbData = res.locals.data    <span class=\"comment\">// GET 方法返回 db.json 数据，而 POST 等只会返回 &#123;&#125;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (req.method === <span class=\"string\">'POST'</span> || req.method === <span class=\"string\">'PUT'</span> || req.method === <span class=\"string\">'PATCH'</span> || req.method === <span class=\"string\">'DELETE'</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// POST 等方法需要自行获取</span></span><br><span class=\"line\">            dbData = localDb[req.path.replace(<span class=\"string\">'/'</span>, <span class=\"string\">''</span>)] || &#123;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">let</span> _status = req.query._status || <span class=\"number\">200</span></span><br><span class=\"line\">        <span class=\"comment\">// 自定义错误状态</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> msgJson = &#123;&#125;, msgCode = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> dbData) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === <span class=\"string\">'code'</span> || i === <span class=\"string\">'status'</span>) &#123;</span><br><span class=\"line\">                msgCode = dbData[i]</span><br><span class=\"line\">                msgJson[i] = msgCode</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i === <span class=\"string\">'msg'</span> || i === <span class=\"string\">'error'</span> || i === <span class=\"string\">'err'</span>) &#123;</span><br><span class=\"line\">                msgJson[i] = dbData[i]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (msgCode &amp;&amp; msgCode &gt; <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            res.status(msgCode).jsonp(msgJson)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (_status * <span class=\"number\">1</span> &gt;= <span class=\"number\">400</span>) &#123;</span><br><span class=\"line\">            res.sendStatus(_status)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.json(dbData)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    app.use(jsonServer.defaults())</span><br><span class=\"line\">    app.use(router)</span><br><span class=\"line\">    server = app.listen(port, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`👏  Running : http://<span class=\"subst\">$&#123;getLocalIP()&#125;</span>:<span class=\"subst\">$&#123;port&#125;</span>\\n`</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    enableDestroy(server)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>相关 API 可以参考 <a href=\"https://github.com/typicode/json-server\" target=\"_blank\">json-server</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"age\"</span>: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>GET &amp;&amp; POST 用法都可返回 json 对象，如果要模拟错误返回，可以添加状态</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"author\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"code\"</span>: <span class=\"number\">404</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"info is err\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Virgil\"</span>,</span><br><span class=\"line\">        // ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>返回 <code>GET /author 404 3.423 ms - 35</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"err\": &#123;</span><br><span class=\"line\">    \"code\": 404,</span><br><span class=\"line\">    \"msg\": \"info is err\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于不同项目后台返回的错误信息和数据状态不尽相同，真正构造 npm 工具时可能需要添加可自定义格式的情况，这个我还未想到较合理的解决方式，今后用到的时候可以在考虑添加。</p>\n<p><code>watch()</code> 用于监听文件改动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chokidar = <span class=\"built_in\">require</span>(<span class=\"string\">'chokidar'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> watch = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'🙈  Watching : Local Data =&gt; %s/test/&#123;db,r&#125;.json\\n'</span>, process.cwd())</span><br><span class=\"line\">    chokidar</span><br><span class=\"line\">    .watch([local_r_file, local_db_file])</span><br><span class=\"line\">    .on(<span class=\"string\">'change'</span>, () =&gt; &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(chalk.gray(<span class=\"string\">'🙏  Restarting...'</span>))</span><br><span class=\"line\">        server.destroy(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">            start()</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"添加映射\"><a href=\"#添加映射\" class=\"headerlink\" title=\"添加映射\"></a>添加映射</h5><p>实际项目中，API 的前缀都是很长的，为了更清晰的展示，可以做个映射</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;/sit/sjfwefj/example/autor&quot;: &quot;author&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> localRFile = path.join(process.cwd(), <span class=\"string\">'/test/r.json'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> localR = fse.readJsonSync(localRFile)</span><br><span class=\"line\">    app.use(jsonServer.rewriter(localR))    <span class=\"comment\">// 映射</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样访问数据时 <code>localhost: 8080/sit/sjfwefj/example/autor</code></p>\n<hr>\n<p>对于前端来说，掌握如何使用和自定义 npm 还是很必要的，一来在公司里很多有公司内部 npm，当你要对项目进行修改或重构时，有时候甚至需要修改原来写在 npm 里的一些数据；再者 npm 用的好，能够很好的提高效率，可以将常用的一些步骤给工具化。</p>\n<p>今后如果我的个人 npm 达到一定规模时，会考虑将其开源在 Github 上。</p>\n"},{"layout":"post","title":"Python 建立 socket 通信传输图像","date":"2017-12-04T10:12:00.000Z","_content":"\n### Socket API 简介\n\n| socket 类型 | 描述 |\n| :---: | :----: |\n| socket.AF_UNIX | 用于同一台机器上的进程通信（既本机通信） |\n| socket.AF_INET | 用于服务器与服务器之间的网络通信 |\n| socket.AF_INET6|\t基于IPV6方式的服务器与服务器之间的网络通信 |\n| socket.SOCK_STREAM |\t基于TCP的流式socket通信 |\n|socket.SOCK_DGRAM |\t基于UDP的数据报式socket通信 |\n| socket.SOCK_RAW | 原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头 |\n| socket.SOCK_SEQPACKET |\t可靠的连续数据包服务 |\n\n##### 服务端 API\n\n| Socket 函数 | 描述 |\n| :---: | :----: |\n| s.bind(address) | 将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port)) |\n| s.listen(backlog) |  开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了 |\n| s.accept() | 接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。 |\n\n##### 客户端 API\n\n| Socket 函数 | 描述 |\n| :---: | :----: |\n| s.connect(address) | 链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误 |\n| s.connect_ex(address) | 功能与s.connect(address)相同，但成功返回0，失败返回errno的值 |\n\n##### 公共 API\n\n| Socket 函数 |  描述 |\n| :---: | :----: |\n| s.recv(bufsize[, flag]) | 接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略 |\n| s.send(string[, flag]) | 发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小 |\n| s.sendall(string[, flag]) | 完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常 |\n| s.recvfrom(bufsize[, flag]) | 接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址 |\n| s.sendto(string[, flag], address)|   发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数 |\n| s.close() | 关闭套接字 |\n\n##### 创建 TCP 连接\n\n```python\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((address, port))\n```\n- TCP 发送好数据后，已经建立好 TCP 连接，所以无需发送地址\n- 服务端与客户端之间只能传输字符串数据\n\n##### 开始监听\n\n```python\nsock.listen(5)\n```\n\n##### 进入循环\n\n```python\nwhile True:\n    s.accept()  // 接受传输\n    s.recv()    // 接收数据\n    s.close()   // 关闭接收\n```\n\n##### 例子\n\n<a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\">Github</a>\n\n服务端\n\n```python\nimport socket\n\nHOST = '192.168.1.100'\nPORT = 8001\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen(5)\n\nprint 'Server start at: %s:%s' %(HOST, PORT)\nprint 'wait for connection...'\n\nwhile True:\n    conn, addr = s.accept()\n    print 'Connected by ', addr\n\n    while True:\n        data = conn.recv(1024)\n        print data\n\n        conn.send(\"server received you message.\")\n\n# conn.close()\n```\n\n客户端\n\n```python\nimport socket\nHOST = '192.168.1.100'\nPORT = 8001\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\nwhile True:\n    cmd = raw_input(\"Please input msg:\")\n    s.send(cmd)\n    data = s.recv(1024)\n    print data\n\n    #s.close()\n```\n\n### 传输图片\n\n##### 客户端：\n\n图片转 base64 格式\n\n```python\nf = open(r'./1.png','rb')\nimg_64 = base64.b64encode(f.read())\nf.close()\n```\n\n建立连接\n\n```python\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('127.0.0.1', 6666))\nexcept socket.error as msg:\n    print msg\n    sys.exit(1)\n```\n\n发送数据\n\n```python\nwhile True:\n    s.send(img_64)\n    s.close()\n    break\n```\n\n##### 服务端\n\n创建 TCP\n\n```python\ntry:\n    # 创建 TCP Socket\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置套接字选项的值\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s.bind(('127.0.0.1', 6666))\n    s.listen(10)\n# 错误处理\nexcept socket.error as msg:\n    print msg\n    sys.exit(1)\n```\n\n建立线程，使客户端可以重复发送数据\n\n```python\nwhile True:\n    conn, addr = s.accept()\n    t = threading.Thread(target = deal_data, args = (conn, addr))\n    # 开启线程\n    t.start()\n```\n\n线程运行函数\n\n```python\ndef deal_data(conn, addr):\n    while True:     \n        img_64 = ''\n        while True:\n            data = conn.recv(1024)\n            if data != '':\n                img_64 += data\n            else:\n                print img_64\n                img_64 = ''\n                break\n\n        conn.close()\n        sys.exit()\n```\n\n##### 完整代码\n\nclient.py\n\n```python\n# -*- coding: utf-8 -*-\n\nimport socket\nimport sys\nimport base64\nimport time\n\ndef socket_client():\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect(('127.0.0.1', 6666))\n    except socket.error as msg:\n        print msg\n        sys.exit(1)\n\n    print s.recv(1024)\n\n    f = open(r'./1.png','rb')\n    img_64 = base64.b64encode(f.read())\n    f.close()\n\n    ticks = time.time()\n\n    while True:\n        s.send(img_64)\n        s.send('timestamp' + str(ticks))\n        s.close()\n        break\n\nif __name__ == '__main__':\n    socket_client()\n```\n\nserver.py\n\n```python\n# -*- coding: utf-8 -*-\n\nimport socket\nimport threading\nimport sys\nimport re\n\n\ndef socket_service():\n    try:\n        # 创建 TCP Socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        # 设置套接字选项的值\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind(('127.0.0.1', 6666))\n        s.listen(10)\n    # 错误处理\n    except socket.error as msg:\n        print msg\n        sys.exit(1)\n\n    print 'Waiting connection...'\n\n    while True:\n        conn, addr = s.accept()\n        t = threading.Thread(target = deal_data, args = (conn, addr))\n        # 开启线程\n        t.start()\n\ndef deal_data(conn, addr):\n    print 'Accept new connection from {0}'.format(addr)\n\n    conn.send('Hi, Welcome to the server!')\n\n    while True:     \n        print 'start receiving...'\n        img_64 = ''\n        \n        while True:\n            data = conn.recv(1024)\n\n            if data != '':\n                img_64 += data\n            else:\n                RegExp = r'timestamp(\\d+\\.\\d+)$'\n                ticks = re.search(RegExp, img_64)\n                \n                if ticks:\n                    print ticks.group(1)\n\n                img_64 = re.sub(RegExp, '', img_64)\n                print img_64\n\n                img_64 = ''\n                break\n\n        print 'end receive...'\n        conn.close()\n        sys.exit()\n\nif __name__ == '__main__':\n    socket_service()\n```\n\n\n\n\n\n\n\n","source":"_posts/python-socket-img.markdown","raw":"---\nlayout:     post\ntitle:      \"Python 建立 socket 通信传输图像\"\ndate:       2017-12-04 18:12:00\ntags:\n    - Python\n---\n\n### Socket API 简介\n\n| socket 类型 | 描述 |\n| :---: | :----: |\n| socket.AF_UNIX | 用于同一台机器上的进程通信（既本机通信） |\n| socket.AF_INET | 用于服务器与服务器之间的网络通信 |\n| socket.AF_INET6|\t基于IPV6方式的服务器与服务器之间的网络通信 |\n| socket.SOCK_STREAM |\t基于TCP的流式socket通信 |\n|socket.SOCK_DGRAM |\t基于UDP的数据报式socket通信 |\n| socket.SOCK_RAW | 原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头 |\n| socket.SOCK_SEQPACKET |\t可靠的连续数据包服务 |\n\n##### 服务端 API\n\n| Socket 函数 | 描述 |\n| :---: | :----: |\n| s.bind(address) | 将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port)) |\n| s.listen(backlog) |  开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了 |\n| s.accept() | 接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。 |\n\n##### 客户端 API\n\n| Socket 函数 | 描述 |\n| :---: | :----: |\n| s.connect(address) | 链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误 |\n| s.connect_ex(address) | 功能与s.connect(address)相同，但成功返回0，失败返回errno的值 |\n\n##### 公共 API\n\n| Socket 函数 |  描述 |\n| :---: | :----: |\n| s.recv(bufsize[, flag]) | 接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略 |\n| s.send(string[, flag]) | 发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小 |\n| s.sendall(string[, flag]) | 完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常 |\n| s.recvfrom(bufsize[, flag]) | 接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址 |\n| s.sendto(string[, flag], address)|   发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数 |\n| s.close() | 关闭套接字 |\n\n##### 创建 TCP 连接\n\n```python\nimport socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((address, port))\n```\n- TCP 发送好数据后，已经建立好 TCP 连接，所以无需发送地址\n- 服务端与客户端之间只能传输字符串数据\n\n##### 开始监听\n\n```python\nsock.listen(5)\n```\n\n##### 进入循环\n\n```python\nwhile True:\n    s.accept()  // 接受传输\n    s.recv()    // 接收数据\n    s.close()   // 关闭接收\n```\n\n##### 例子\n\n<a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\">Github</a>\n\n服务端\n\n```python\nimport socket\n\nHOST = '192.168.1.100'\nPORT = 8001\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind((HOST, PORT))\ns.listen(5)\n\nprint 'Server start at: %s:%s' %(HOST, PORT)\nprint 'wait for connection...'\n\nwhile True:\n    conn, addr = s.accept()\n    print 'Connected by ', addr\n\n    while True:\n        data = conn.recv(1024)\n        print data\n\n        conn.send(\"server received you message.\")\n\n# conn.close()\n```\n\n客户端\n\n```python\nimport socket\nHOST = '192.168.1.100'\nPORT = 8001\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((HOST, PORT))\n\nwhile True:\n    cmd = raw_input(\"Please input msg:\")\n    s.send(cmd)\n    data = s.recv(1024)\n    print data\n\n    #s.close()\n```\n\n### 传输图片\n\n##### 客户端：\n\n图片转 base64 格式\n\n```python\nf = open(r'./1.png','rb')\nimg_64 = base64.b64encode(f.read())\nf.close()\n```\n\n建立连接\n\n```python\ntry:\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.connect(('127.0.0.1', 6666))\nexcept socket.error as msg:\n    print msg\n    sys.exit(1)\n```\n\n发送数据\n\n```python\nwhile True:\n    s.send(img_64)\n    s.close()\n    break\n```\n\n##### 服务端\n\n创建 TCP\n\n```python\ntry:\n    # 创建 TCP Socket\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # 设置套接字选项的值\n    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    s.bind(('127.0.0.1', 6666))\n    s.listen(10)\n# 错误处理\nexcept socket.error as msg:\n    print msg\n    sys.exit(1)\n```\n\n建立线程，使客户端可以重复发送数据\n\n```python\nwhile True:\n    conn, addr = s.accept()\n    t = threading.Thread(target = deal_data, args = (conn, addr))\n    # 开启线程\n    t.start()\n```\n\n线程运行函数\n\n```python\ndef deal_data(conn, addr):\n    while True:     \n        img_64 = ''\n        while True:\n            data = conn.recv(1024)\n            if data != '':\n                img_64 += data\n            else:\n                print img_64\n                img_64 = ''\n                break\n\n        conn.close()\n        sys.exit()\n```\n\n##### 完整代码\n\nclient.py\n\n```python\n# -*- coding: utf-8 -*-\n\nimport socket\nimport sys\nimport base64\nimport time\n\ndef socket_client():\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect(('127.0.0.1', 6666))\n    except socket.error as msg:\n        print msg\n        sys.exit(1)\n\n    print s.recv(1024)\n\n    f = open(r'./1.png','rb')\n    img_64 = base64.b64encode(f.read())\n    f.close()\n\n    ticks = time.time()\n\n    while True:\n        s.send(img_64)\n        s.send('timestamp' + str(ticks))\n        s.close()\n        break\n\nif __name__ == '__main__':\n    socket_client()\n```\n\nserver.py\n\n```python\n# -*- coding: utf-8 -*-\n\nimport socket\nimport threading\nimport sys\nimport re\n\n\ndef socket_service():\n    try:\n        # 创建 TCP Socket\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        # 设置套接字选项的值\n        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n        s.bind(('127.0.0.1', 6666))\n        s.listen(10)\n    # 错误处理\n    except socket.error as msg:\n        print msg\n        sys.exit(1)\n\n    print 'Waiting connection...'\n\n    while True:\n        conn, addr = s.accept()\n        t = threading.Thread(target = deal_data, args = (conn, addr))\n        # 开启线程\n        t.start()\n\ndef deal_data(conn, addr):\n    print 'Accept new connection from {0}'.format(addr)\n\n    conn.send('Hi, Welcome to the server!')\n\n    while True:     \n        print 'start receiving...'\n        img_64 = ''\n        \n        while True:\n            data = conn.recv(1024)\n\n            if data != '':\n                img_64 += data\n            else:\n                RegExp = r'timestamp(\\d+\\.\\d+)$'\n                ticks = re.search(RegExp, img_64)\n                \n                if ticks:\n                    print ticks.group(1)\n\n                img_64 = re.sub(RegExp, '', img_64)\n                print img_64\n\n                img_64 = ''\n                break\n\n        print 'end receive...'\n        conn.close()\n        sys.exit()\n\nif __name__ == '__main__':\n    socket_service()\n```\n\n\n\n\n\n\n\n","slug":"python-socket-img","published":1,"updated":"2018-05-09T09:40:52.085Z","comments":1,"photos":[],"link":"","_id":"cjv7qf418001f2mhsycu1t9ve","content":"<h3 id=\"Socket-API-简介\"><a href=\"#Socket-API-简介\" class=\"headerlink\" title=\"Socket API 简介\"></a>Socket API 简介</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">socket 类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">socket.AF_UNIX</td>\n<td style=\"text-align:center\">用于同一台机器上的进程通信（既本机通信）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.AF_INET</td>\n<td style=\"text-align:center\">用于服务器与服务器之间的网络通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.AF_INET6</td>\n<td style=\"text-align:center\">基于IPV6方式的服务器与服务器之间的网络通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_STREAM</td>\n<td style=\"text-align:center\">基于TCP的流式socket通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_DGRAM</td>\n<td style=\"text-align:center\">基于UDP的数据报式socket通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_RAW</td>\n<td style=\"text-align:center\">原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_SEQPACKET</td>\n<td style=\"text-align:center\">可靠的连续数据包服务</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"服务端-API\"><a href=\"#服务端-API\" class=\"headerlink\" title=\"服务端 API\"></a>服务端 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.bind(address)</td>\n<td style=\"text-align:center\">将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen(backlog)</td>\n<td style=\"text-align:center\">开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"客户端-API\"><a href=\"#客户端-API\" class=\"headerlink\" title=\"客户端 API\"></a>客户端 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.connect(address)</td>\n<td style=\"text-align:center\">链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex(address)</td>\n<td style=\"text-align:center\">功能与s.connect(address)相同，但成功返回0，失败返回errno的值</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"公共-API\"><a href=\"#公共-API\" class=\"headerlink\" title=\"公共 API\"></a>公共 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.recv(bufsize[, flag])</td>\n<td style=\"text-align:center\">接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send(string[, flag])</td>\n<td style=\"text-align:center\">发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall(string[, flag])</td>\n<td style=\"text-align:center\">完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom(bufsize[, flag])</td>\n<td style=\"text-align:center\">接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto(string[, flag], address)</td>\n<td style=\"text-align:center\">发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"创建-TCP-连接\"><a href=\"#创建-TCP-连接\" class=\"headerlink\" title=\"创建 TCP 连接\"></a>创建 TCP 连接</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind((address, port))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TCP 发送好数据后，已经建立好 TCP 连接，所以无需发送地址</li>\n<li>服务端与客户端之间只能传输字符串数据</li>\n</ul>\n<h5 id=\"开始监听\"><a href=\"#开始监听\" class=\"headerlink\" title=\"开始监听\"></a>开始监听</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock.listen(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入循环\"><a href=\"#进入循环\" class=\"headerlink\" title=\"进入循环\"></a>进入循环</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s.accept()  // 接受传输</span><br><span class=\"line\">    s.recv()    // 接收数据</span><br><span class=\"line\">    s.close()   // 关闭接收</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\">Github</a></p>\n<p>服务端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">PORT = <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind((HOST, PORT))</span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Server start at: %s:%s'</span> %(HOST, PORT)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'wait for connection...'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Connected by '</span>, addr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">        conn.send(<span class=\"string\">\"server received you message.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># conn.close()</span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">HOST = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">PORT = <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((HOST, PORT))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    cmd = raw_input(<span class=\"string\">\"Please input msg:\"</span>)</span><br><span class=\"line\">    s.send(cmd)</span><br><span class=\"line\">    data = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#s.close()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传输图片\"><a href=\"#传输图片\" class=\"headerlink\" title=\"传输图片\"></a>传输图片</h3><h5 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h5><p>图片转 base64 格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">r'./1.png'</span>,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">img_64 = base64.b64encode(f.read())</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>建立连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>发送数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s.send(img_64)</span><br><span class=\"line\">    s.close()</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h5><p>创建 TCP</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建 TCP Socket</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置套接字选项的值</span></span><br><span class=\"line\">    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">    s.bind((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">    s.listen(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># 错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>建立线程，使客户端可以重复发送数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    t = threading.Thread(target = deal_data, args = (conn, addr))</span><br><span class=\"line\">    <span class=\"comment\"># 开启线程</span></span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>线程运行函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_data</span><span class=\"params\">(conn, addr)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:     </span><br><span class=\"line\">        img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data != <span class=\"string\">''</span>:</span><br><span class=\"line\">                img_64 += data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">print</span> img_64</span><br><span class=\"line\">                img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        conn.close()</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><p>client.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">socket_client</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        s.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = open(<span class=\"string\">r'./1.png'</span>,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    img_64 = base64.b64encode(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    ticks = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        s.send(img_64)</span><br><span class=\"line\">        s.send(<span class=\"string\">'timestamp'</span> + str(ticks))</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socket_client()</span><br></pre></td></tr></table></figure>\n<p>server.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">socket_service</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 创建 TCP Socket</span></span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置套接字选项的值</span></span><br><span class=\"line\">        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">        s.bind((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">        s.listen(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 错误处理</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Waiting connection...'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        conn, addr = s.accept()</span><br><span class=\"line\">        t = threading.Thread(target = deal_data, args = (conn, addr))</span><br><span class=\"line\">        <span class=\"comment\"># 开启线程</span></span><br><span class=\"line\">        t.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_data</span><span class=\"params\">(conn, addr)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Accept new connection from &#123;0&#125;'</span>.format(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.send(<span class=\"string\">'Hi, Welcome to the server!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:     </span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'start receiving...'</span></span><br><span class=\"line\">        img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data != <span class=\"string\">''</span>:</span><br><span class=\"line\">                img_64 += data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                RegExp = <span class=\"string\">r'timestamp(\\d+\\.\\d+)$'</span></span><br><span class=\"line\">                ticks = re.search(RegExp, img_64)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> ticks:</span><br><span class=\"line\">                    <span class=\"keyword\">print</span> ticks.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                img_64 = re.sub(RegExp, <span class=\"string\">''</span>, img_64)</span><br><span class=\"line\">                <span class=\"keyword\">print</span> img_64</span><br><span class=\"line\"></span><br><span class=\"line\">                img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'end receive...'</span></span><br><span class=\"line\">        conn.close()</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socket_service()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Socket-API-简介\"><a href=\"#Socket-API-简介\" class=\"headerlink\" title=\"Socket API 简介\"></a>Socket API 简介</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">socket 类型</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">socket.AF_UNIX</td>\n<td style=\"text-align:center\">用于同一台机器上的进程通信（既本机通信）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.AF_INET</td>\n<td style=\"text-align:center\">用于服务器与服务器之间的网络通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.AF_INET6</td>\n<td style=\"text-align:center\">基于IPV6方式的服务器与服务器之间的网络通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_STREAM</td>\n<td style=\"text-align:center\">基于TCP的流式socket通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_DGRAM</td>\n<td style=\"text-align:center\">基于UDP的数据报式socket通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_RAW</td>\n<td style=\"text-align:center\">原始套接字，普通的套接字无法处理ICMP、IGMP等网络报文，而SOCK_RAW可以；其次SOCK_RAW也可以处理特殊的IPV4报文；此外，利用原始套接字，可以通过IP_HDRINCL套接字选项由用户构造IP头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">socket.SOCK_SEQPACKET</td>\n<td style=\"text-align:center\">可靠的连续数据包服务</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"服务端-API\"><a href=\"#服务端-API\" class=\"headerlink\" title=\"服务端 API\"></a>服务端 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.bind(address)</td>\n<td style=\"text-align:center\">将套接字绑定到地址，在AF_INET下，以tuple(host, port)的方式传入，如s.bind((host, port))</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.listen(backlog)</td>\n<td style=\"text-align:center\">开始监听TCP传入连接，backlog指定在拒绝链接前，操作系统可以挂起的最大连接数，该值最少为1，大部分应用程序设为5就够用了</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.accept()</td>\n<td style=\"text-align:center\">接受TCP链接并返回（conn, address），其中conn是新的套接字对象，可以用来接收和发送数据，address是链接客户端的地址。</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"客户端-API\"><a href=\"#客户端-API\" class=\"headerlink\" title=\"客户端 API\"></a>客户端 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.connect(address)</td>\n<td style=\"text-align:center\">链接到address处的套接字，一般address的格式为tuple(host, port)，如果链接出错，则返回socket.error错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.connect_ex(address)</td>\n<td style=\"text-align:center\">功能与s.connect(address)相同，但成功返回0，失败返回errno的值</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"公共-API\"><a href=\"#公共-API\" class=\"headerlink\" title=\"公共 API\"></a>公共 API</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Socket 函数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">s.recv(bufsize[, flag])</td>\n<td style=\"text-align:center\">接受TCP套接字的数据，数据以字符串形式返回，buffsize指定要接受的最大数据量，flag提供有关消息的其他信息，通常可以忽略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.send(string[, flag])</td>\n<td style=\"text-align:center\">发送TCP数据，将字符串中的数据发送到链接的套接字，返回值是要发送的字节数量，该数量可能小于string的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendall(string[, flag])</td>\n<td style=\"text-align:center\">完整发送TCP数据，将字符串中的数据发送到链接的套接字，但在返回之前尝试发送所有数据。成功返回None，失败则抛出异常</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.recvfrom(bufsize[, flag])</td>\n<td style=\"text-align:center\">接受UDP套接字的数据u，与recv()类似，但返回值是tuple(data, address)。其中data是包含接受数据的字符串，address是发送数据的套接字地址</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.sendto(string[, flag], address)</td>\n<td style=\"text-align:center\">发送UDP数据，将数据发送到套接字，address形式为tuple(ipaddr, port)，指定远程地址发送，返回值是发送的字节数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">s.close()</td>\n<td style=\"text-align:center\">关闭套接字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"创建-TCP-连接\"><a href=\"#创建-TCP-连接\" class=\"headerlink\" title=\"创建 TCP 连接\"></a>创建 TCP 连接</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind((address, port))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>TCP 发送好数据后，已经建立好 TCP 连接，所以无需发送地址</li>\n<li>服务端与客户端之间只能传输字符串数据</li>\n</ul>\n<h5 id=\"开始监听\"><a href=\"#开始监听\" class=\"headerlink\" title=\"开始监听\"></a>开始监听</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sock.listen(<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h5 id=\"进入循环\"><a href=\"#进入循环\" class=\"headerlink\" title=\"进入循环\"></a>进入循环</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s.accept()  // 接受传输</span><br><span class=\"line\">    s.recv()    // 接收数据</span><br><span class=\"line\">    s.close()   // 关闭接收</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p><a href=\"https://gist.github.com/kevinkindom/108ffd675cb9253f8f71\" target=\"_blank\">Github</a></p>\n<p>服务端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"></span><br><span class=\"line\">HOST = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">PORT = <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.bind((HOST, PORT))</span><br><span class=\"line\">s.listen(<span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'Server start at: %s:%s'</span> %(HOST, PORT)</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'wait for connection...'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Connected by '</span>, addr</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">        <span class=\"keyword\">print</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">        conn.send(<span class=\"string\">\"server received you message.\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># conn.close()</span></span><br></pre></td></tr></table></figure>\n<p>客户端</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\">HOST = <span class=\"string\">'192.168.1.100'</span></span><br><span class=\"line\">PORT = <span class=\"number\">8001</span></span><br><span class=\"line\"></span><br><span class=\"line\">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">s.connect((HOST, PORT))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    cmd = raw_input(<span class=\"string\">\"Please input msg:\"</span>)</span><br><span class=\"line\">    s.send(cmd)</span><br><span class=\"line\">    data = s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">print</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#s.close()</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"传输图片\"><a href=\"#传输图片\" class=\"headerlink\" title=\"传输图片\"></a>传输图片</h3><h5 id=\"客户端：\"><a href=\"#客户端：\" class=\"headerlink\" title=\"客户端：\"></a>客户端：</h5><p>图片转 base64 格式</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = open(<span class=\"string\">r'./1.png'</span>,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">img_64 = base64.b64encode(f.read())</span><br><span class=\"line\">f.close()</span><br></pre></td></tr></table></figure>\n<p>建立连接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    s.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>发送数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    s.send(img_64)</span><br><span class=\"line\">    s.close()</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h5><p>创建 TCP</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    <span class=\"comment\"># 创建 TCP Socket</span></span><br><span class=\"line\">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">    <span class=\"comment\"># 设置套接字选项的值</span></span><br><span class=\"line\">    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">    s.bind((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">    s.listen(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\"># 错误处理</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">    <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">    sys.exit(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>建立线程，使客户端可以重复发送数据</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    conn, addr = s.accept()</span><br><span class=\"line\">    t = threading.Thread(target = deal_data, args = (conn, addr))</span><br><span class=\"line\">    <span class=\"comment\"># 开启线程</span></span><br><span class=\"line\">    t.start()</span><br></pre></td></tr></table></figure>\n<p>线程运行函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_data</span><span class=\"params\">(conn, addr)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:     </span><br><span class=\"line\">        img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> data != <span class=\"string\">''</span>:</span><br><span class=\"line\">                img_64 += data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">print</span> img_64</span><br><span class=\"line\">                img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        conn.close()</span><br><span class=\"line\">        sys.exit()</span><br></pre></td></tr></table></figure>\n<h5 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h5><p>client.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">socket_client</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        s.connect((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> s.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    f = open(<span class=\"string\">r'./1.png'</span>,<span class=\"string\">'rb'</span>)</span><br><span class=\"line\">    img_64 = base64.b64encode(f.read())</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\"></span><br><span class=\"line\">    ticks = time.time()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        s.send(img_64)</span><br><span class=\"line\">        s.send(<span class=\"string\">'timestamp'</span> + str(ticks))</span><br><span class=\"line\">        s.close()</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socket_client()</span><br></pre></td></tr></table></figure>\n<p>server.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> socket</span><br><span class=\"line\"><span class=\"keyword\">import</span> threading</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">socket_service</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"comment\"># 创建 TCP Socket</span></span><br><span class=\"line\">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class=\"line\">        <span class=\"comment\"># 设置套接字选项的值</span></span><br><span class=\"line\">        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class=\"number\">1</span>)</span><br><span class=\"line\">        s.bind((<span class=\"string\">'127.0.0.1'</span>, <span class=\"number\">6666</span>))</span><br><span class=\"line\">        s.listen(<span class=\"number\">10</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 错误处理</span></span><br><span class=\"line\">    <span class=\"keyword\">except</span> socket.error <span class=\"keyword\">as</span> msg:</span><br><span class=\"line\">        <span class=\"keyword\">print</span> msg</span><br><span class=\"line\">        sys.exit(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Waiting connection...'</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">        conn, addr = s.accept()</span><br><span class=\"line\">        t = threading.Thread(target = deal_data, args = (conn, addr))</span><br><span class=\"line\">        <span class=\"comment\"># 开启线程</span></span><br><span class=\"line\">        t.start()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">deal_data</span><span class=\"params\">(conn, addr)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'Accept new connection from &#123;0&#125;'</span>.format(addr)</span><br><span class=\"line\"></span><br><span class=\"line\">    conn.send(<span class=\"string\">'Hi, Welcome to the server!'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:     </span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'start receiving...'</span></span><br><span class=\"line\">        img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">            data = conn.recv(<span class=\"number\">1024</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> data != <span class=\"string\">''</span>:</span><br><span class=\"line\">                img_64 += data</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                RegExp = <span class=\"string\">r'timestamp(\\d+\\.\\d+)$'</span></span><br><span class=\"line\">                ticks = re.search(RegExp, img_64)</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> ticks:</span><br><span class=\"line\">                    <span class=\"keyword\">print</span> ticks.group(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                img_64 = re.sub(RegExp, <span class=\"string\">''</span>, img_64)</span><br><span class=\"line\">                <span class=\"keyword\">print</span> img_64</span><br><span class=\"line\"></span><br><span class=\"line\">                img_64 = <span class=\"string\">''</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'end receive...'</span></span><br><span class=\"line\">        conn.close()</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socket_service()</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"树莓派开机启动和后台运行 Python 程序","date":"2017-12-09T04:02:00.000Z","_content":"\n### 后台运行 Python\n\n使用 nohup\n\n    nohup ~/Desktop/pi/python test.py &\n\n### 修改 rc.local\n\n在 `/etc/rc.local` 添加执行程序，确保最后一句是 void 0\n\n![](http://p8hsqsg3r.bkt.clouddn.com/raspberry-rc-local.png)\n\n但我的程序不能通过这种方式启动，不知道为什么，我用的是第二种方法\n\n### 制作开机启动脚本\n\n在 `/etc/init.d` 文件夹内新建一个文件，如:\n\n    sudo vim /etc/init.d/test\n\n添加内容\n\n```vim\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          test\n# Required-Start:    $remote_fs\n# Required-Stop:     $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start or stop the HTTP Proxy.\n### END INIT INFO\ncase $1 in\n    start)\n        nohup python ~/Desktop/pi/test.py\n        ;;\n    stop)\n        ;;\n*)\necho \"Usage: $0 (start|stop)\"\n;;\nesac\n```\n\n注释里的内容要记得加上\n\n让脚本可执行\n\n    sudo chmod +x /etc/init.d/test\n\n启动脚本\n\n    sudo /etc/init.d/test start\n\n开机启动\n\n    sudo update-rc.d test defaults\n    sudo update-rc.d -f test remove  取消开机启动\n\n\n","source":"_posts/raspberry-startup-boot.markdown","raw":"---\nlayout:     post\ntitle:      \"树莓派开机启动和后台运行 Python 程序\"\ndate:       2017-12-09 12:02:00\ntags:\n    - Raspberry\n---\n\n### 后台运行 Python\n\n使用 nohup\n\n    nohup ~/Desktop/pi/python test.py &\n\n### 修改 rc.local\n\n在 `/etc/rc.local` 添加执行程序，确保最后一句是 void 0\n\n![](http://p8hsqsg3r.bkt.clouddn.com/raspberry-rc-local.png)\n\n但我的程序不能通过这种方式启动，不知道为什么，我用的是第二种方法\n\n### 制作开机启动脚本\n\n在 `/etc/init.d` 文件夹内新建一个文件，如:\n\n    sudo vim /etc/init.d/test\n\n添加内容\n\n```vim\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides:          test\n# Required-Start:    $remote_fs\n# Required-Stop:     $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: Start or stop the HTTP Proxy.\n### END INIT INFO\ncase $1 in\n    start)\n        nohup python ~/Desktop/pi/test.py\n        ;;\n    stop)\n        ;;\n*)\necho \"Usage: $0 (start|stop)\"\n;;\nesac\n```\n\n注释里的内容要记得加上\n\n让脚本可执行\n\n    sudo chmod +x /etc/init.d/test\n\n启动脚本\n\n    sudo /etc/init.d/test start\n\n开机启动\n\n    sudo update-rc.d test defaults\n    sudo update-rc.d -f test remove  取消开机启动\n\n\n","slug":"raspberry-startup-boot","published":1,"updated":"2018-05-10T03:11:29.614Z","comments":1,"photos":[],"link":"","_id":"cjv7qf419001i2mhsqzgamqcy","content":"<h3 id=\"后台运行-Python\"><a href=\"#后台运行-Python\" class=\"headerlink\" title=\"后台运行 Python\"></a>后台运行 Python</h3><p>使用 nohup</p>\n<pre><code>nohup ~/Desktop/pi/python test.py &amp;\n</code></pre><h3 id=\"修改-rc-local\"><a href=\"#修改-rc-local\" class=\"headerlink\" title=\"修改 rc.local\"></a>修改 rc.local</h3><p>在 <code>/etc/rc.local</code> 添加执行程序，确保最后一句是 void 0</p>\n<p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/raspberry-rc-local.png\" alt=\"\"></p>\n<p>但我的程序不能通过这种方式启动，不知道为什么，我用的是第二种方法</p>\n<h3 id=\"制作开机启动脚本\"><a href=\"#制作开机启动脚本\" class=\"headerlink\" title=\"制作开机启动脚本\"></a>制作开机启动脚本</h3><p>在 <code>/etc/init.d</code> 文件夹内新建一个文件，如:</p>\n<pre><code>sudo vim /etc/init.d/test\n</code></pre><p>添加内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/<span class=\"keyword\">sh</span></span><br><span class=\"line\">### BEGIN INIT INFO</span><br><span class=\"line\"># Provide<span class=\"variable\">s:</span>          test</span><br><span class=\"line\"># Required-Star<span class=\"variable\">t:</span>    $remote_fs</span><br><span class=\"line\"># Required-Stop:     $remote_fs</span><br><span class=\"line\"># Default-Star<span class=\"variable\">t:</span>     <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"># Default-Stop:      <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">6</span></span><br><span class=\"line\"># Short-Description: Start <span class=\"built_in\">or</span> <span class=\"keyword\">stop</span> the HTTP Proxy.</span><br><span class=\"line\">### END INIT INFO</span><br><span class=\"line\">case $<span class=\"number\">1</span> in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        nohup <span class=\"keyword\">python</span> ~/Desktop/pi/test.<span class=\"keyword\">py</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"keyword\">stop</span>)</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Usage: $0 (start|stop)\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>注释里的内容要记得加上</p>\n<p>让脚本可执行</p>\n<pre><code>sudo chmod +x /etc/init.d/test\n</code></pre><p>启动脚本</p>\n<pre><code>sudo /etc/init.d/test start\n</code></pre><p>开机启动</p>\n<pre><code>sudo update-rc.d test defaults\nsudo update-rc.d -f test remove  取消开机启动\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"后台运行-Python\"><a href=\"#后台运行-Python\" class=\"headerlink\" title=\"后台运行 Python\"></a>后台运行 Python</h3><p>使用 nohup</p>\n<pre><code>nohup ~/Desktop/pi/python test.py &amp;\n</code></pre><h3 id=\"修改-rc-local\"><a href=\"#修改-rc-local\" class=\"headerlink\" title=\"修改 rc.local\"></a>修改 rc.local</h3><p>在 <code>/etc/rc.local</code> 添加执行程序，确保最后一句是 void 0</p>\n<p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/raspberry-rc-local.png\" alt=\"\"></p>\n<p>但我的程序不能通过这种方式启动，不知道为什么，我用的是第二种方法</p>\n<h3 id=\"制作开机启动脚本\"><a href=\"#制作开机启动脚本\" class=\"headerlink\" title=\"制作开机启动脚本\"></a>制作开机启动脚本</h3><p>在 <code>/etc/init.d</code> 文件夹内新建一个文件，如:</p>\n<pre><code>sudo vim /etc/init.d/test\n</code></pre><p>添加内容</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/<span class=\"keyword\">sh</span></span><br><span class=\"line\">### BEGIN INIT INFO</span><br><span class=\"line\"># Provide<span class=\"variable\">s:</span>          test</span><br><span class=\"line\"># Required-Star<span class=\"variable\">t:</span>    $remote_fs</span><br><span class=\"line\"># Required-Stop:     $remote_fs</span><br><span class=\"line\"># Default-Star<span class=\"variable\">t:</span>     <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\"># Default-Stop:      <span class=\"number\">0</span> <span class=\"number\">1</span> <span class=\"number\">6</span></span><br><span class=\"line\"># Short-Description: Start <span class=\"built_in\">or</span> <span class=\"keyword\">stop</span> the HTTP Proxy.</span><br><span class=\"line\">### END INIT INFO</span><br><span class=\"line\">case $<span class=\"number\">1</span> in</span><br><span class=\"line\">    start)</span><br><span class=\"line\">        nohup <span class=\"keyword\">python</span> ~/Desktop/pi/test.<span class=\"keyword\">py</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    <span class=\"keyword\">stop</span>)</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">\"Usage: $0 (start|stop)\"</span></span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br></pre></td></tr></table></figure>\n<p>注释里的内容要记得加上</p>\n<p>让脚本可执行</p>\n<pre><code>sudo chmod +x /etc/init.d/test\n</code></pre><p>启动脚本</p>\n<pre><code>sudo /etc/init.d/test start\n</code></pre><p>开机启动</p>\n<pre><code>sudo update-rc.d test defaults\nsudo update-rc.d -f test remove  取消开机启动\n</code></pre>"},{"layout":"post","title":"记录我树莓派的玄学日期修改","date":"2017-12-07T04:24:00.000Z","_content":"\nRaspberry 没有电池，时间总会错，一般用 ntp 联网校准。\n\n安装 ntpdate\n\n    sudo apt-get install ntpdate\n    tzselect    // 选择要匹配的时间\n    sudo service ntp stop\n    sudo ntpdate cn.pool.ntp.org    // 更新时间，cn 那个是国内 ntp 源\n    sudo service ntp start\n    date    // 检验校准\n\n如果还有问题，可能显示的是 current time 而不是 local time，可以参考下面这贴\n\nhttp://blog.csdn.net/u010940020/article/details/45420555\n\n反正我是玄学修改成功。。","source":"_posts/raspberry-date-sync.markdown","raw":"---\nlayout:     post\ntitle:      \"记录我树莓派的玄学日期修改\"\ndate:       2017-12-07 12:24:00\ntags:\n    - Raspberry\n---\n\nRaspberry 没有电池，时间总会错，一般用 ntp 联网校准。\n\n安装 ntpdate\n\n    sudo apt-get install ntpdate\n    tzselect    // 选择要匹配的时间\n    sudo service ntp stop\n    sudo ntpdate cn.pool.ntp.org    // 更新时间，cn 那个是国内 ntp 源\n    sudo service ntp start\n    date    // 检验校准\n\n如果还有问题，可能显示的是 current time 而不是 local time，可以参考下面这贴\n\nhttp://blog.csdn.net/u010940020/article/details/45420555\n\n反正我是玄学修改成功。。","slug":"raspberry-date-sync","published":1,"updated":"2018-05-09T09:43:09.805Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41a001j2mhsz44a90eq","content":"<p>Raspberry 没有电池，时间总会错，一般用 ntp 联网校准。</p>\n<p>安装 ntpdate</p>\n<pre><code>sudo apt-get install ntpdate\ntzselect    // 选择要匹配的时间\nsudo service ntp stop\nsudo ntpdate cn.pool.ntp.org    // 更新时间，cn 那个是国内 ntp 源\nsudo service ntp start\ndate    // 检验校准\n</code></pre><p>如果还有问题，可能显示的是 current time 而不是 local time，可以参考下面这贴</p>\n<p><a href=\"http://blog.csdn.net/u010940020/article/details/45420555\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u010940020/article/details/45420555</a></p>\n<p>反正我是玄学修改成功。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Raspberry 没有电池，时间总会错，一般用 ntp 联网校准。</p>\n<p>安装 ntpdate</p>\n<pre><code>sudo apt-get install ntpdate\ntzselect    // 选择要匹配的时间\nsudo service ntp stop\nsudo ntpdate cn.pool.ntp.org    // 更新时间，cn 那个是国内 ntp 源\nsudo service ntp start\ndate    // 检验校准\n</code></pre><p>如果还有问题，可能显示的是 current time 而不是 local time，可以参考下面这贴</p>\n<p><a href=\"http://blog.csdn.net/u010940020/article/details/45420555\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/u010940020/article/details/45420555</a></p>\n<p>反正我是玄学修改成功。。</p>\n"},{"layout":"post","title":"Raspberry 使用 opencv 调用树莓派摄像头模块","date":"2017-11-14T09:32:00.000Z","_content":"\n### 硬件\n\n摄像头用的是排线摄像头，500树莓派摄像头 # MK702\n\n### 连接\n\n![](http://p8hsqsg3r.bkt.clouddn.com/raspberry-camera.jpg)\n\n树莓派排线有两个，一个是显示屏一个是摄像头，看清楚了。\n\n### 开启\n\n    sudo raspi-config\n\n选择 Camera -> Enable，Finsh -> 确定重启\n\n### 测试\n\n截一张图片：\n\n    raspistill -o image.jpg\n\n录一段5秒钟的h264格式的视频：\n\n    raspivid -o video.h264\n\n录一段10秒钟的视频：\n\n    raspivid -o video.h264 -t 10000\n\n在演示模式下录一段10秒钟的视频：\n\n    raspivid -o video.h264 -t 10000 -d\n\n### opencv 调用\n\nraspicam 不是 v4l 驱动，要使用 opencv 调用树莓派摄像头需要添加 v4l 驱动。\n\n首先先更新，国内建议换<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/raspbian/\" target=\"_blank\">清华源</a>\n\n##### 更新 raspberry firmware\n\n    sudo rpi-update\n\n##### 重启后更新系统\n\n    sudo apt-get update\n    sudo apt-get upgrade\n\n##### 增加 source.list\n\n    sudo vim /etc/sources.list\n\n添加以下资讯\n\n    deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/ jessie main\n\n##### 加入 GPG key\n\n    sudo wget http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc ~/\n    sudo apt-key add ./lrkey.asc\n\n再次更新系统\n\n    sudo apt-get update\n    sudo apt-get upgrade\n\n##### 安装 v4l 套件\n\n    sudo apt-get install uv4l uv4l-raspicam\n\n让系统开机自动组入模块\n\n    sudo vim /etc/modules\n\n于 modules 文件末尾添加 `bcm2835-v4l2`  \n\n也可安裝以下套件，開機後自動載入模組\n\n    sudo apt-get install uv4l-raspicam-extras\n\n写一段代码测试一下\n\n```python\nimport cv2\nimport numpy as np\n\ncap = cv2.VideoCapture(0)\n\nwhile True:\n    ret, frame = cap.read()\n\n    cv2.imshow('frame',frame)\n    \n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n```\n","source":"_posts/raspberry-opencv-open-camera.markdown","raw":"---\nlayout:     post\ntitle:      \"Raspberry 使用 opencv 调用树莓派摄像头模块\"\ndate:       2017-11-14 17:32:00\ntags:\n    - Raspberry\n    - OpenCV\n---\n\n### 硬件\n\n摄像头用的是排线摄像头，500树莓派摄像头 # MK702\n\n### 连接\n\n![](http://p8hsqsg3r.bkt.clouddn.com/raspberry-camera.jpg)\n\n树莓派排线有两个，一个是显示屏一个是摄像头，看清楚了。\n\n### 开启\n\n    sudo raspi-config\n\n选择 Camera -> Enable，Finsh -> 确定重启\n\n### 测试\n\n截一张图片：\n\n    raspistill -o image.jpg\n\n录一段5秒钟的h264格式的视频：\n\n    raspivid -o video.h264\n\n录一段10秒钟的视频：\n\n    raspivid -o video.h264 -t 10000\n\n在演示模式下录一段10秒钟的视频：\n\n    raspivid -o video.h264 -t 10000 -d\n\n### opencv 调用\n\nraspicam 不是 v4l 驱动，要使用 opencv 调用树莓派摄像头需要添加 v4l 驱动。\n\n首先先更新，国内建议换<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/raspbian/\" target=\"_blank\">清华源</a>\n\n##### 更新 raspberry firmware\n\n    sudo rpi-update\n\n##### 重启后更新系统\n\n    sudo apt-get update\n    sudo apt-get upgrade\n\n##### 增加 source.list\n\n    sudo vim /etc/sources.list\n\n添加以下资讯\n\n    deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/ jessie main\n\n##### 加入 GPG key\n\n    sudo wget http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc ~/\n    sudo apt-key add ./lrkey.asc\n\n再次更新系统\n\n    sudo apt-get update\n    sudo apt-get upgrade\n\n##### 安装 v4l 套件\n\n    sudo apt-get install uv4l uv4l-raspicam\n\n让系统开机自动组入模块\n\n    sudo vim /etc/modules\n\n于 modules 文件末尾添加 `bcm2835-v4l2`  \n\n也可安裝以下套件，開機後自動載入模組\n\n    sudo apt-get install uv4l-raspicam-extras\n\n写一段代码测试一下\n\n```python\nimport cv2\nimport numpy as np\n\ncap = cv2.VideoCapture(0)\n\nwhile True:\n    ret, frame = cap.read()\n\n    cv2.imshow('frame',frame)\n    \n    if cv2.waitKey(1) & 0xFF == ord('q'):\n        break\n\ncap.release()\ncv2.destroyAllWindows()\n```\n","slug":"raspberry-opencv-open-camera","published":1,"updated":"2018-05-10T03:11:05.999Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41b001m2mhskcp20jdh","content":"<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>摄像头用的是排线摄像头，500树莓派摄像头 # MK702</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/raspberry-camera.jpg\" alt=\"\"></p>\n<p>树莓派排线有两个，一个是显示屏一个是摄像头，看清楚了。</p>\n<h3 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h3><pre><code>sudo raspi-config\n</code></pre><p>选择 Camera -&gt; Enable，Finsh -&gt; 确定重启</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>截一张图片：</p>\n<pre><code>raspistill -o image.jpg\n</code></pre><p>录一段5秒钟的h264格式的视频：</p>\n<pre><code>raspivid -o video.h264\n</code></pre><p>录一段10秒钟的视频：</p>\n<pre><code>raspivid -o video.h264 -t 10000\n</code></pre><p>在演示模式下录一段10秒钟的视频：</p>\n<pre><code>raspivid -o video.h264 -t 10000 -d\n</code></pre><h3 id=\"opencv-调用\"><a href=\"#opencv-调用\" class=\"headerlink\" title=\"opencv 调用\"></a>opencv 调用</h3><p>raspicam 不是 v4l 驱动，要使用 opencv 调用树莓派摄像头需要添加 v4l 驱动。</p>\n<p>首先先更新，国内建议换<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/raspbian/\" target=\"_blank\">清华源</a></p>\n<h5 id=\"更新-raspberry-firmware\"><a href=\"#更新-raspberry-firmware\" class=\"headerlink\" title=\"更新 raspberry firmware\"></a>更新 raspberry firmware</h5><pre><code>sudo rpi-update\n</code></pre><h5 id=\"重启后更新系统\"><a href=\"#重启后更新系统\" class=\"headerlink\" title=\"重启后更新系统\"></a>重启后更新系统</h5><pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre><h5 id=\"增加-source-list\"><a href=\"#增加-source-list\" class=\"headerlink\" title=\"增加 source.list\"></a>增加 source.list</h5><pre><code>sudo vim /etc/sources.list\n</code></pre><p>添加以下资讯</p>\n<pre><code>deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/ jessie main\n</code></pre><h5 id=\"加入-GPG-key\"><a href=\"#加入-GPG-key\" class=\"headerlink\" title=\"加入 GPG key\"></a>加入 GPG key</h5><pre><code>sudo wget http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc ~/\nsudo apt-key add ./lrkey.asc\n</code></pre><p>再次更新系统</p>\n<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre><h5 id=\"安装-v4l-套件\"><a href=\"#安装-v4l-套件\" class=\"headerlink\" title=\"安装 v4l 套件\"></a>安装 v4l 套件</h5><pre><code>sudo apt-get install uv4l uv4l-raspicam\n</code></pre><p>让系统开机自动组入模块</p>\n<pre><code>sudo vim /etc/modules\n</code></pre><p>于 modules 文件末尾添加 <code>bcm2835-v4l2</code>  </p>\n<p>也可安裝以下套件，開機後自動載入模組</p>\n<pre><code>sudo apt-get install uv4l-raspicam-extras\n</code></pre><p>写一段代码测试一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">cap = cv2.VideoCapture(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    ret, frame = cap.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'frame'</span>,frame)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == ord(<span class=\"string\">'q'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">cap.release()</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"硬件\"><a href=\"#硬件\" class=\"headerlink\" title=\"硬件\"></a>硬件</h3><p>摄像头用的是排线摄像头，500树莓派摄像头 # MK702</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/raspberry-camera.jpg\" alt=\"\"></p>\n<p>树莓派排线有两个，一个是显示屏一个是摄像头，看清楚了。</p>\n<h3 id=\"开启\"><a href=\"#开启\" class=\"headerlink\" title=\"开启\"></a>开启</h3><pre><code>sudo raspi-config\n</code></pre><p>选择 Camera -&gt; Enable，Finsh -&gt; 确定重启</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>截一张图片：</p>\n<pre><code>raspistill -o image.jpg\n</code></pre><p>录一段5秒钟的h264格式的视频：</p>\n<pre><code>raspivid -o video.h264\n</code></pre><p>录一段10秒钟的视频：</p>\n<pre><code>raspivid -o video.h264 -t 10000\n</code></pre><p>在演示模式下录一段10秒钟的视频：</p>\n<pre><code>raspivid -o video.h264 -t 10000 -d\n</code></pre><h3 id=\"opencv-调用\"><a href=\"#opencv-调用\" class=\"headerlink\" title=\"opencv 调用\"></a>opencv 调用</h3><p>raspicam 不是 v4l 驱动，要使用 opencv 调用树莓派摄像头需要添加 v4l 驱动。</p>\n<p>首先先更新，国内建议换<a href=\"https://mirror.tuna.tsinghua.edu.cn/help/raspbian/\" target=\"_blank\">清华源</a></p>\n<h5 id=\"更新-raspberry-firmware\"><a href=\"#更新-raspberry-firmware\" class=\"headerlink\" title=\"更新 raspberry firmware\"></a>更新 raspberry firmware</h5><pre><code>sudo rpi-update\n</code></pre><h5 id=\"重启后更新系统\"><a href=\"#重启后更新系统\" class=\"headerlink\" title=\"重启后更新系统\"></a>重启后更新系统</h5><pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre><h5 id=\"增加-source-list\"><a href=\"#增加-source-list\" class=\"headerlink\" title=\"增加 source.list\"></a>增加 source.list</h5><pre><code>sudo vim /etc/sources.list\n</code></pre><p>添加以下资讯</p>\n<pre><code>deb http://www.linux-projects.org/listing/uv4l_repo/raspbian/ jessie main\n</code></pre><h5 id=\"加入-GPG-key\"><a href=\"#加入-GPG-key\" class=\"headerlink\" title=\"加入 GPG key\"></a>加入 GPG key</h5><pre><code>sudo wget http://www.linux-projects.org/listing/uv4l_repo/lrkey.asc ~/\nsudo apt-key add ./lrkey.asc\n</code></pre><p>再次更新系统</p>\n<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre><h5 id=\"安装-v4l-套件\"><a href=\"#安装-v4l-套件\" class=\"headerlink\" title=\"安装 v4l 套件\"></a>安装 v4l 套件</h5><pre><code>sudo apt-get install uv4l uv4l-raspicam\n</code></pre><p>让系统开机自动组入模块</p>\n<pre><code>sudo vim /etc/modules\n</code></pre><p>于 modules 文件末尾添加 <code>bcm2835-v4l2</code>  </p>\n<p>也可安裝以下套件，開機後自動載入模組</p>\n<pre><code>sudo apt-get install uv4l-raspicam-extras\n</code></pre><p>写一段代码测试一下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">cap = cv2.VideoCapture(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</span><br><span class=\"line\">    ret, frame = cap.read()</span><br><span class=\"line\"></span><br><span class=\"line\">    cv2.imshow(<span class=\"string\">'frame'</span>,frame)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> cv2.waitKey(<span class=\"number\">1</span>) &amp; <span class=\"number\">0xFF</span> == ord(<span class=\"string\">'q'</span>):</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">cap.release()</span><br><span class=\"line\">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"鼠标滚轮监听事件","date":"2016-12-05T06:20:00.000Z","_content":"\n\n**代码**\n\n```javascript\nfunction scroll( fn ) {\n    var beforeScrollTop = document.body.scrollTop,\n        fn = fn || function() {};\n    window.addEventListener(\"scroll\", function() {\n        var afterScrollTop = document.body.scrollTop,\n            delta = afterScrollTop - beforeScrollTop;\n        if( delta === 0 ) return false;\n        fn( delta > 0 ? false : true );\n        beforeScrollTop = afterScrollTop;\n    }, false);\n}\nscroll(\n    function(direction){\n        <!--  -->\n    }\n);\n```\n\n**分析**  \n通过监听滚轮的 beforeScrollTop 和 afterScrollTop ，如果等于或小于 0，return false ，如果大于 0，return true\n","source":"_posts/scroll-monitor.markdown","raw":"---\nlayout:     post\ntitle:      \"鼠标滚轮监听事件\"\ndate:       2016-12-05 14:20:00\ntags:\n    - JavaScript\n---\n\n\n**代码**\n\n```javascript\nfunction scroll( fn ) {\n    var beforeScrollTop = document.body.scrollTop,\n        fn = fn || function() {};\n    window.addEventListener(\"scroll\", function() {\n        var afterScrollTop = document.body.scrollTop,\n            delta = afterScrollTop - beforeScrollTop;\n        if( delta === 0 ) return false;\n        fn( delta > 0 ? false : true );\n        beforeScrollTop = afterScrollTop;\n    }, false);\n}\nscroll(\n    function(direction){\n        <!--  -->\n    }\n);\n```\n\n**分析**  \n通过监听滚轮的 beforeScrollTop 和 afterScrollTop ，如果等于或小于 0，return false ，如果大于 0，return true\n","slug":"scroll-monitor","published":1,"updated":"2018-05-09T07:56:11.231Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41c001o2mhsn6vsdwtq","content":"<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"> fn </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beforeScrollTop = <span class=\"built_in\">document</span>.body.scrollTop,</span><br><span class=\"line\">        fn = fn || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> afterScrollTop = <span class=\"built_in\">document</span>.body.scrollTop,</span><br><span class=\"line\">            delta = afterScrollTop - beforeScrollTop;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( delta === <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        fn( delta &gt; <span class=\"number\">0</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> );</span><br><span class=\"line\">        beforeScrollTop = afterScrollTop;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>)</span>&#123;</span><br><span class=\"line\">        &lt;!--  --&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong><br>通过监听滚轮的 beforeScrollTop 和 afterScrollTop ，如果等于或小于 0，return false ，如果大于 0，return true</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>代码</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scroll</span>(<span class=\"params\"> fn </span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> beforeScrollTop = <span class=\"built_in\">document</span>.body.scrollTop,</span><br><span class=\"line\">        fn = fn || <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"scroll\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> afterScrollTop = <span class=\"built_in\">document</span>.body.scrollTop,</span><br><span class=\"line\">            delta = afterScrollTop - beforeScrollTop;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( delta === <span class=\"number\">0</span> ) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        fn( delta &gt; <span class=\"number\">0</span> ? <span class=\"literal\">false</span> : <span class=\"literal\">true</span> );</span><br><span class=\"line\">        beforeScrollTop = afterScrollTop;</span><br><span class=\"line\">    &#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">scroll(</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">direction</span>)</span>&#123;</span><br><span class=\"line\">        &lt;!--  --&gt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><strong>分析</strong><br>通过监听滚轮的 beforeScrollTop 和 afterScrollTop ，如果等于或小于 0，return false ，如果大于 0，return true</p>\n"},{"layout":"post","title":"js 关于 removeChild() 移除不完全的问题","date":"2016-12-19T14:00:00.000Z","_content":"\n**代码**  \n\n```js\n<ul id='oul'>\n    <li>1 <span>删除</span></li>\n    <li>2 <span>删除</span></li>\n    <li>3 <span>删除</span></li>\n    <li>4 <span>删除</span></li>\n    <li>5 <span>删除</span></li>\n</ul>\n<script>\n    var oUl = document.getElementById('oul');\n    var aSpan = oUl.getElementsByTagName('span');\n    for(var i=0;i<aSpan.length;i++){\n        (function(i){\n            var Remove = function () {\n                oUl.removeChild(aSpan[i].parentNode);   \n            }\n            aSpan[i].addEventListener('click',Remove,false);\n        })(i);\n    }\n</script>\n```\n\n在点击第一个元素时，删除第一个元素，而点击第二个元素时，删除第三个元素。最后会剩下2和5两个元素无法删除\n  \n**分析** \n\n```js \nvar aSpan = oUl.getElementsByTagName('span')\n```\n\n获取的 NodeList 是一个动态的集合，而非静态的，所以当每添加或删除元素时，oSpan 对象会立马变换。  \n\n\n**解决方案** \n\n添加 \n\n```js \noSpan = Array.prototype.slice.call(oSpan);\n// [].slice.call()\n```\n\n将元素强制转化为数组。为什么这样可以转换？主要的原因是 slice 方法只需要参数有 length 属性即可。首先，slice 方法得到的结果是一个新的数组，通过 Array.prototype.slice.call 传入的参数，添加数据进去。如果没有 length 属性，或者 length 属性值不是 Number 类型，或者为负，那么直接返回一个空数组。\n\n**问题**\n\n1. IE 兼容\nIE 下 Array.prototype.slice.call() 会抛出错误，因为 IE 下 DOM 节点列表不是 JavaScript 对象，兼容写法如下  \n\n```js\nfunction nodeListToArray(list) {\n    var arr,len;\n    try {\n        arr = [].slice.call(list);\n        return arr;\n    } catch(err) {\n        arr = [],len = list.length;\n        for(var i=0; i<len; i++) {\n            arr.push(list[i]);\n        }\n\n        return arr;\n    }\n}\n```\n\n2. 性能优化  \n\n如果是在将 arguments 转为数组时，因为传递 arguments 给任何参数，将导致 Chrome 和 Node 中使用的 V8 引擎跳过对其的优化，这也将使性能相当慢，如果是将 arguments 转为数组，最好单独创建一个数组。<a href=\"http://www.jstips.co/zh_cn/javascript/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/\" target=\"_blank\">参考文章</a> \n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\n\n","source":"_posts/removeChild-default.markdown","raw":"---\nlayout:     post\ntitle:      \"js 关于 removeChild() 移除不完全的问题\"\ndate:       2016-12-19 22:00:00\ntags:\n    - JavaScript\n---\n\n**代码**  \n\n```js\n<ul id='oul'>\n    <li>1 <span>删除</span></li>\n    <li>2 <span>删除</span></li>\n    <li>3 <span>删除</span></li>\n    <li>4 <span>删除</span></li>\n    <li>5 <span>删除</span></li>\n</ul>\n<script>\n    var oUl = document.getElementById('oul');\n    var aSpan = oUl.getElementsByTagName('span');\n    for(var i=0;i<aSpan.length;i++){\n        (function(i){\n            var Remove = function () {\n                oUl.removeChild(aSpan[i].parentNode);   \n            }\n            aSpan[i].addEventListener('click',Remove,false);\n        })(i);\n    }\n</script>\n```\n\n在点击第一个元素时，删除第一个元素，而点击第二个元素时，删除第三个元素。最后会剩下2和5两个元素无法删除\n  \n**分析** \n\n```js \nvar aSpan = oUl.getElementsByTagName('span')\n```\n\n获取的 NodeList 是一个动态的集合，而非静态的，所以当每添加或删除元素时，oSpan 对象会立马变换。  \n\n\n**解决方案** \n\n添加 \n\n```js \noSpan = Array.prototype.slice.call(oSpan);\n// [].slice.call()\n```\n\n将元素强制转化为数组。为什么这样可以转换？主要的原因是 slice 方法只需要参数有 length 属性即可。首先，slice 方法得到的结果是一个新的数组，通过 Array.prototype.slice.call 传入的参数，添加数据进去。如果没有 length 属性，或者 length 属性值不是 Number 类型，或者为负，那么直接返回一个空数组。\n\n**问题**\n\n1. IE 兼容\nIE 下 Array.prototype.slice.call() 会抛出错误，因为 IE 下 DOM 节点列表不是 JavaScript 对象，兼容写法如下  \n\n```js\nfunction nodeListToArray(list) {\n    var arr,len;\n    try {\n        arr = [].slice.call(list);\n        return arr;\n    } catch(err) {\n        arr = [],len = list.length;\n        for(var i=0; i<len; i++) {\n            arr.push(list[i]);\n        }\n\n        return arr;\n    }\n}\n```\n\n2. 性能优化  \n\n如果是在将 arguments 转为数组时，因为传递 arguments 给任何参数，将导致 Chrome 和 Node 中使用的 V8 引擎跳过对其的优化，这也将使性能相当慢，如果是将 arguments 转为数组，最好单独创建一个数组。<a href=\"http://www.jstips.co/zh_cn/javascript/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/\" target=\"_blank\">参考文章</a> \n\n```js\nvar args = new Array(arguments.length);\nfor(var i = 0; i < args.length; ++i) {\n  args[i] = arguments[i];\n}\n```\n\n\n","slug":"removeChild-default","published":1,"updated":"2018-05-09T08:05:31.478Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41d001r2mhsqmu7jcog","content":"<p><strong>代码</strong>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">'oul'</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">1</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">2</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">3</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">4</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">5</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var oUl = document.getElementById('oul');</span></span><br><span class=\"line\"><span class=\"regexp\">    var aSpan = oUl.getElementsByTagName('span');</span></span><br><span class=\"line\"><span class=\"regexp\">    for(var i=0;i&lt;aSpan.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        (function(i)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            var Remove = function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                oUl.removeChild(aSpan[i].parentNode);   </span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            aSpan[i].addEventListener('click',Remove,false);</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;)(i);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>在点击第一个元素时，删除第一个元素，而点击第二个元素时，删除第三个元素。最后会剩下2和5两个元素无法删除</p>\n<p><strong>分析</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aSpan = oUl.getElementsByTagName(<span class=\"string\">'span'</span>)</span><br></pre></td></tr></table></figure>\n<p>获取的 NodeList 是一个动态的集合，而非静态的，所以当每添加或删除元素时，oSpan 对象会立马变换。  </p>\n<p><strong>解决方案</strong> </p>\n<p>添加 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oSpan = <span class=\"built_in\">Array</span>.prototype.slice.call(oSpan);</span><br><span class=\"line\"><span class=\"comment\">// [].slice.call()</span></span><br></pre></td></tr></table></figure>\n<p>将元素强制转化为数组。为什么这样可以转换？主要的原因是 slice 方法只需要参数有 length 属性即可。首先，slice 方法得到的结果是一个新的数组，通过 Array.prototype.slice.call 传入的参数，添加数据进去。如果没有 length 属性，或者 length 属性值不是 Number 类型，或者为负，那么直接返回一个空数组。</p>\n<p><strong>问题</strong></p>\n<ol>\n<li>IE 兼容<br>IE 下 Array.prototype.slice.call() 会抛出错误，因为 IE 下 DOM 节点列表不是 JavaScript 对象，兼容写法如下  </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nodeListToArray</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr,len;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        arr = [].slice.call(list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        arr = [],len = list.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">            arr.push(list[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>性能优化  </li>\n</ol>\n<p>如果是在将 arguments 转为数组时，因为传递 arguments 给任何参数，将导致 Chrome 和 Node 中使用的 V8 引擎跳过对其的优化，这也将使性能相当慢，如果是将 arguments 转为数组，最好单独创建一个数组。<a href=\"http://www.jstips.co/zh_cn/javascript/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/\" target=\"_blank\">参考文章</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class=\"line\">  args[i] = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>代码</strong>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">'oul'</span>&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">1</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">2</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">3</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">4</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">    &lt;li&gt;<span class=\"number\">5</span> &lt;span&gt;删除&lt;<span class=\"regexp\">/span&gt;&lt;/</span>li&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/ul&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    var oUl = document.getElementById('oul');</span></span><br><span class=\"line\"><span class=\"regexp\">    var aSpan = oUl.getElementsByTagName('span');</span></span><br><span class=\"line\"><span class=\"regexp\">    for(var i=0;i&lt;aSpan.length;i++)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">        (function(i)&#123;</span></span><br><span class=\"line\"><span class=\"regexp\">            var Remove = function () &#123;</span></span><br><span class=\"line\"><span class=\"regexp\">                oUl.removeChild(aSpan[i].parentNode);   </span></span><br><span class=\"line\"><span class=\"regexp\">            &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">            aSpan[i].addEventListener('click',Remove,false);</span></span><br><span class=\"line\"><span class=\"regexp\">        &#125;)(i);</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>\n<p>在点击第一个元素时，删除第一个元素，而点击第二个元素时，删除第三个元素。最后会剩下2和5两个元素无法删除</p>\n<p><strong>分析</strong> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> aSpan = oUl.getElementsByTagName(<span class=\"string\">'span'</span>)</span><br></pre></td></tr></table></figure>\n<p>获取的 NodeList 是一个动态的集合，而非静态的，所以当每添加或删除元素时，oSpan 对象会立马变换。  </p>\n<p><strong>解决方案</strong> </p>\n<p>添加 </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">oSpan = <span class=\"built_in\">Array</span>.prototype.slice.call(oSpan);</span><br><span class=\"line\"><span class=\"comment\">// [].slice.call()</span></span><br></pre></td></tr></table></figure>\n<p>将元素强制转化为数组。为什么这样可以转换？主要的原因是 slice 方法只需要参数有 length 属性即可。首先，slice 方法得到的结果是一个新的数组，通过 Array.prototype.slice.call 传入的参数，添加数据进去。如果没有 length 属性，或者 length 属性值不是 Number 类型，或者为负，那么直接返回一个空数组。</p>\n<p><strong>问题</strong></p>\n<ol>\n<li>IE 兼容<br>IE 下 Array.prototype.slice.call() 会抛出错误，因为 IE 下 DOM 节点列表不是 JavaScript 对象，兼容写法如下  </li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">nodeListToArray</span>(<span class=\"params\">list</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr,len;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        arr = [].slice.call(list);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span>(err) &#123;</span><br><span class=\"line\">        arr = [],len = list.length;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;len; i++) &#123;</span><br><span class=\"line\">            arr.push(list[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>性能优化  </li>\n</ol>\n<p>如果是在将 arguments 转为数组时，因为传递 arguments 给任何参数，将导致 Chrome 和 Node 中使用的 V8 引擎跳过对其的优化，这也将使性能相当慢，如果是将 arguments 转为数组，最好单独创建一个数组。<a href=\"http://www.jstips.co/zh_cn/javascript/avoid-modifying-or-passing-arguments-into-other-functions-it-kills-optimization/\" target=\"_blank\">参考文章</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"built_in\">arguments</span>.length);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; args.length; ++i) &#123;</span><br><span class=\"line\">  args[i] = <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Sublime Text 编译C语言设置","date":"2016-08-18T05:23:00.000Z","_content":"\n### 配置 gcc 环境\n\n下载安装 MinGW。右键点击第三行，选择 Mark for Installation \n左上角 Installation，点击 Apply Change  \n安装完成后。计算机属性—高级系统设置—环境变量—找到 path，添加 `;../bin`（`..`为你安装 MinGW 的路径，`;`不要漏掉）  \n在 CMD 中运行 `gcc -v`，查看是否成功。\n \n### 创建批处理文件\n\n此步骤是为了能够使用快捷键直接打开 CMD  \n新建两个批处理文件，一个名为 runp.bat，内容如下：\n\n    @echo off\n    %1\n    pause\n    exit\n    \n一个为 callrunp.bat，内容如下：\n\n    @echo off\n    start runp.bat %1\n\n将这两个文件放在 MinGW 的 bin 目录下。\n\n### 编译系统设置\n工具—编译系统—新编译系统，将代码改为如下：\n    \n    {\n    \"cmd\" : [\"gcc\", \"$file_name\", \"-o\", \"${file_base_name}.exe\", \"-lm\", \"-Wall\"],\n    \"selector\" : \"source.c\",\n    \"shell\":true,\n    \"working_dir\" : \"$file_path\",\n    \"variants\":\n    [\n    {\n    \"name\": \"Run\",\n    \"cmd\": [\"callrunp.bat\", \"${file_base_name}.exe\"],\n    \"working_dir\": \"${file_path}\"\n    }\n    ]\n    }\n    \n\n保存。名字命名为 `C.sublime-build` \n工具—编译系统—选择C  \n\n测试是否成功，END\n","source":"_posts/sublime-text-C-Setting.markdown","raw":"---\nlayout:     post\ntitle:      \"Sublime Text 编译C语言设置\"\ndate:       2016-08-18 13:23:00\ntags:\n    - Tool\n---\n\n### 配置 gcc 环境\n\n下载安装 MinGW。右键点击第三行，选择 Mark for Installation \n左上角 Installation，点击 Apply Change  \n安装完成后。计算机属性—高级系统设置—环境变量—找到 path，添加 `;../bin`（`..`为你安装 MinGW 的路径，`;`不要漏掉）  \n在 CMD 中运行 `gcc -v`，查看是否成功。\n \n### 创建批处理文件\n\n此步骤是为了能够使用快捷键直接打开 CMD  \n新建两个批处理文件，一个名为 runp.bat，内容如下：\n\n    @echo off\n    %1\n    pause\n    exit\n    \n一个为 callrunp.bat，内容如下：\n\n    @echo off\n    start runp.bat %1\n\n将这两个文件放在 MinGW 的 bin 目录下。\n\n### 编译系统设置\n工具—编译系统—新编译系统，将代码改为如下：\n    \n    {\n    \"cmd\" : [\"gcc\", \"$file_name\", \"-o\", \"${file_base_name}.exe\", \"-lm\", \"-Wall\"],\n    \"selector\" : \"source.c\",\n    \"shell\":true,\n    \"working_dir\" : \"$file_path\",\n    \"variants\":\n    [\n    {\n    \"name\": \"Run\",\n    \"cmd\": [\"callrunp.bat\", \"${file_base_name}.exe\"],\n    \"working_dir\": \"${file_path}\"\n    }\n    ]\n    }\n    \n\n保存。名字命名为 `C.sublime-build` \n工具—编译系统—选择C  \n\n测试是否成功，END\n","slug":"sublime-text-C-Setting","published":1,"updated":"2018-05-09T08:05:43.574Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41e001t2mhs5oc5y0gq","content":"<h3 id=\"配置-gcc-环境\"><a href=\"#配置-gcc-环境\" class=\"headerlink\" title=\"配置 gcc 环境\"></a>配置 gcc 环境</h3><p>下载安装 MinGW。右键点击第三行，选择 Mark for Installation<br>左上角 Installation，点击 Apply Change<br>安装完成后。计算机属性—高级系统设置—环境变量—找到 path，添加 <code>;../bin</code>（<code>..</code>为你安装 MinGW 的路径，<code>;</code>不要漏掉）<br>在 CMD 中运行 <code>gcc -v</code>，查看是否成功。</p>\n<h3 id=\"创建批处理文件\"><a href=\"#创建批处理文件\" class=\"headerlink\" title=\"创建批处理文件\"></a>创建批处理文件</h3><p>此步骤是为了能够使用快捷键直接打开 CMD<br>新建两个批处理文件，一个名为 runp.bat，内容如下：</p>\n<pre><code>@echo off\n%1\npause\nexit\n</code></pre><p>一个为 callrunp.bat，内容如下：</p>\n<pre><code>@echo off\nstart runp.bat %1\n</code></pre><p>将这两个文件放在 MinGW 的 bin 目录下。</p>\n<h3 id=\"编译系统设置\"><a href=\"#编译系统设置\" class=\"headerlink\" title=\"编译系统设置\"></a>编译系统设置</h3><p>工具—编译系统—新编译系统，将代码改为如下：</p>\n<pre><code>{\n&quot;cmd&quot; : [&quot;gcc&quot;, &quot;$file_name&quot;, &quot;-o&quot;, &quot;${file_base_name}.exe&quot;, &quot;-lm&quot;, &quot;-Wall&quot;],\n&quot;selector&quot; : &quot;source.c&quot;,\n&quot;shell&quot;:true,\n&quot;working_dir&quot; : &quot;$file_path&quot;,\n&quot;variants&quot;:\n[\n{\n&quot;name&quot;: &quot;Run&quot;,\n&quot;cmd&quot;: [&quot;callrunp.bat&quot;, &quot;${file_base_name}.exe&quot;],\n&quot;working_dir&quot;: &quot;${file_path}&quot;\n}\n]\n}\n</code></pre><p>保存。名字命名为 <code>C.sublime-build</code><br>工具—编译系统—选择C  </p>\n<p>测试是否成功，END</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"配置-gcc-环境\"><a href=\"#配置-gcc-环境\" class=\"headerlink\" title=\"配置 gcc 环境\"></a>配置 gcc 环境</h3><p>下载安装 MinGW。右键点击第三行，选择 Mark for Installation<br>左上角 Installation，点击 Apply Change<br>安装完成后。计算机属性—高级系统设置—环境变量—找到 path，添加 <code>;../bin</code>（<code>..</code>为你安装 MinGW 的路径，<code>;</code>不要漏掉）<br>在 CMD 中运行 <code>gcc -v</code>，查看是否成功。</p>\n<h3 id=\"创建批处理文件\"><a href=\"#创建批处理文件\" class=\"headerlink\" title=\"创建批处理文件\"></a>创建批处理文件</h3><p>此步骤是为了能够使用快捷键直接打开 CMD<br>新建两个批处理文件，一个名为 runp.bat，内容如下：</p>\n<pre><code>@echo off\n%1\npause\nexit\n</code></pre><p>一个为 callrunp.bat，内容如下：</p>\n<pre><code>@echo off\nstart runp.bat %1\n</code></pre><p>将这两个文件放在 MinGW 的 bin 目录下。</p>\n<h3 id=\"编译系统设置\"><a href=\"#编译系统设置\" class=\"headerlink\" title=\"编译系统设置\"></a>编译系统设置</h3><p>工具—编译系统—新编译系统，将代码改为如下：</p>\n<pre><code>{\n&quot;cmd&quot; : [&quot;gcc&quot;, &quot;$file_name&quot;, &quot;-o&quot;, &quot;${file_base_name}.exe&quot;, &quot;-lm&quot;, &quot;-Wall&quot;],\n&quot;selector&quot; : &quot;source.c&quot;,\n&quot;shell&quot;:true,\n&quot;working_dir&quot; : &quot;$file_path&quot;,\n&quot;variants&quot;:\n[\n{\n&quot;name&quot;: &quot;Run&quot;,\n&quot;cmd&quot;: [&quot;callrunp.bat&quot;, &quot;${file_base_name}.exe&quot;],\n&quot;working_dir&quot;: &quot;${file_path}&quot;\n}\n]\n}\n</code></pre><p>保存。名字命名为 <code>C.sublime-build</code><br>工具—编译系统—选择C  </p>\n<p>测试是否成功，END</p>\n"},{"layout":"post","title":"Ubuntu wubi 安装时检测磁盘时出现严重错误修复方法","date":"2016-08-18T05:40:00.000Z","_content":"\n- 进入 Ubuntu 启动菜单时，光标选中 *Ubuntu 后，按键盘上的 e 键，即可进入启动项编辑模式。\n- 使用光标定位到倒数第三行，将 ro 改成 rw 后，按 F10 键，即可按照修改后的参数引导进入系统。\n- 使用快捷键 ctrl+ alt + t 打开终端输入 `sudo gedit /etc/grub.d/10_lupin`\n\n- 然后输入用户密码并回车，即可调用文本编辑器打开启动项配置文件。在打开的编辑中搜索 `ro ${args}` 并定位到该文字项。\n- 将定位位置的 ro 修改为 rw ,然后保存并退出文本编辑器。\n- 最后在终端中输入 `sudo update-grub` 并回车,开始更新启动项配置。\n这样就解决该问题了。\n\n\n","source":"_posts/ubuntu-wubi-install.markdown","raw":"---\nlayout:     post\ntitle:      \"Ubuntu wubi 安装时检测磁盘时出现严重错误修复方法\"\ndate:       2016-08-18 13:40:00\ntags:\n    - Linux\n    - System\n---\n\n- 进入 Ubuntu 启动菜单时，光标选中 *Ubuntu 后，按键盘上的 e 键，即可进入启动项编辑模式。\n- 使用光标定位到倒数第三行，将 ro 改成 rw 后，按 F10 键，即可按照修改后的参数引导进入系统。\n- 使用快捷键 ctrl+ alt + t 打开终端输入 `sudo gedit /etc/grub.d/10_lupin`\n\n- 然后输入用户密码并回车，即可调用文本编辑器打开启动项配置文件。在打开的编辑中搜索 `ro ${args}` 并定位到该文字项。\n- 将定位位置的 ro 修改为 rw ,然后保存并退出文本编辑器。\n- 最后在终端中输入 `sudo update-grub` 并回车,开始更新启动项配置。\n这样就解决该问题了。\n\n\n","slug":"ubuntu-wubi-install","published":1,"updated":"2018-05-09T06:52:48.547Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41g001w2mhseg3p6yaa","content":"<ul>\n<li>进入 Ubuntu 启动菜单时，光标选中 *Ubuntu 后，按键盘上的 e 键，即可进入启动项编辑模式。</li>\n<li>使用光标定位到倒数第三行，将 ro 改成 rw 后，按 F10 键，即可按照修改后的参数引导进入系统。</li>\n<li><p>使用快捷键 ctrl+ alt + t 打开终端输入 <code>sudo gedit /etc/grub.d/10_lupin</code></p>\n</li>\n<li><p>然后输入用户密码并回车，即可调用文本编辑器打开启动项配置文件。在打开的编辑中搜索 <code>ro ${args}</code> 并定位到该文字项。</p>\n</li>\n<li>将定位位置的 ro 修改为 rw ,然后保存并退出文本编辑器。</li>\n<li>最后在终端中输入 <code>sudo update-grub</code> 并回车,开始更新启动项配置。<br>这样就解决该问题了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>进入 Ubuntu 启动菜单时，光标选中 *Ubuntu 后，按键盘上的 e 键，即可进入启动项编辑模式。</li>\n<li>使用光标定位到倒数第三行，将 ro 改成 rw 后，按 F10 键，即可按照修改后的参数引导进入系统。</li>\n<li><p>使用快捷键 ctrl+ alt + t 打开终端输入 <code>sudo gedit /etc/grub.d/10_lupin</code></p>\n</li>\n<li><p>然后输入用户密码并回车，即可调用文本编辑器打开启动项配置文件。在打开的编辑中搜索 <code>ro ${args}</code> 并定位到该文字项。</p>\n</li>\n<li>将定位位置的 ro 修改为 rw ,然后保存并退出文本编辑器。</li>\n<li>最后在终端中输入 <code>sudo update-grub</code> 并回车,开始更新启动项配置。<br>这样就解决该问题了。</li>\n</ul>\n"},{"layout":"post","title":"underscore.js 源码之 JavaScript 常见类型判断","date":"2017-06-06T07:38:00.000Z","_content":"\nunderscore.js 封装了一些常用类型判断的方法，归类于 Objects 方法内。由于源码很多方法都用到了类型判断，所以打算先从类型判断讲起。  \n\n### void 0 代替 undefined\n\nundefined 并不是 JS 保留字，在低版本 IE 下可被重写，在 ES5 中为全局对象的一个只读属性，但在局部作用域中仍然可被重写。  \n而 void 运算符为对给定表达式进行求值，然后返回 undefined 。所以 underscore.js 内采用 void 0 代替 undefined。  \n\n### Object.prototype.toString()\n\n在 JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 'number'，'string'，'undefined'，'boolean'，'object' 五种。对于数组、函数、对象来说，其关系错综复杂，使用 typeof 都会统一返回 'object' 字符串。这时我们就得用到 Object.prototype.toString() 方法  \n\nObject.prototype.toString() 在 ECMA 中的解释：  \n\n>When the toString method is called, the following steps are taken:  \n>1、Get the [[Class]] property of this object.  \n>2、Compute a string value by concatenating the three strings “[object “,Result (1), and “]”.  \n\n代码实现如下  \n\n```js\nvar toString = Object.prototype.toString;\n\nconsole.log(toString.call([]));             //[object Array]\nconsole.log(toString.call(''));             //[object String]\nconsole.log(toString.call({a: '1'}));       //[object Object]\nconsole.log(toString.call(arguments);       //[object Arguments]\nconsole.log(toString.call(/./));            //[object RegExp]\nconsole.log(toString.call(new Date()));     //[object Date]\nconsole.log(toString.call(1));              //[object Number]\nconsole.log(toString.call(true));           //[object Boolean]\nconsole.log(toString.call(new Error()));    //[object Error]\nconsole.log(toString.call(new Function())); //[object Function]\n\nconsole.log(toString.call(undefined));      //[object Undefined]\nconsole.log(toString.call(null));           //[object Null]\n\n```\n\n在 IE8 下 'Arguments','undefined','null' 这三个有 Bug，返回的是 Object\n\n```js\n// IE8 下\nconsole.log(toString.call(arguments));      //[object Object]\nconsole.log(toString.call(undefined));      //[object Object]\nconsole.log(toString.call(null));           //[object Object]\n```\n\nnull 和 undefined 判断不需要太复杂，分别用 ` obj === null ` 、和 ` obj === void 0 ` 判断即可。  \n如果要同时判断 null 和 undefined ，使用 ` obj == null `。因为 `undefined == null`。  \n\narguments 则在 IE8 下通过特性检测是否含有 callee 属性值来判断 arguments  \n\n```js\n_.isArguments = function(obj) {   \n    // null 时 hasOwnProperty 会抛出错误，要排除 null 的情况\n    return Object.prototype.toString.call(obj) === '[object Arguments]' ||\n             obj != null &&\n             Object.prototype.hasOwnProperty.call(obj, 'callee');\n};\n```\n\nArray 类型除了以上方法，ES5 还新增了 Array.isArray 方法  \n\n```js\n_.isArray = function(obj) {\n    return Array.isArray ? Array.isArray(obj) : \n            Object.prototype.toString.call(obj) === '[object Array]';\n  };\n```\n\nunderscore.js 认为 function 也应属于 object  \n\n```js\n_.isObject = function(obj) {\n    // !!obj 排除 null 的情况\n    return typeof obj === 'function' || typeof obj === 'object' && !!obj;\n};\n```\n\n其他的都直接使用 toString() 方法判断  \n\n```js\n// underscore 使用了自建的 _.each() 方法，我原生写了一个以防看不懂\n(function(){\n    var obj = ['Function', 'String', 'Number', 'Date', 'RegExp', 'Error', \n            'Boolean'];\n\n    for(var i in obj) {\n      (function(i){\n        var name = obj[i];\n        \n        _['is' + name] = function(obj) {\n          return toString.call(obj) === '[object ' + name + ']';\n        }\n      })(i)\n    }\n})();\n```\n\n### 其他实用工具判断  \n\n_.isEmpty 如果 object 不包含任何值(没有可枚举的属性)，返回 true。  \n对于字符串和类数组 「array-like」 对象，如果 length 属性为 0，那么 _.isEmpty 检查返回 true。\n\n```js\n// 我写的也和源码不一样，我觉得这样好懂\n\n_.isEmpty = function(obj) {\n\n    // 排除 null 和 undefined\n    if(obj == null)  return true;\n    \n    // 对象单独判断，判断 keys 的个数\n    if(_.isObject(obj)) {\n      var keys = [];\n\n      for(var i in obj) \n        keys.push(i);\n\n      return !keys.length;\n    } \n\n    // 数组及类数组都含有 length 方法，统一判断\n    return !(obj.length);\n  };\n```\n\n判读是否是 DOM 元素\n\n```js\n_.isElement = function(obj) {\n    // 排除 obj 为 null 或 undefined 时报错\n    return !!(obj && obj.nodeType === 1);\n}\n```\n\nisFinite 和 isNaN 都使用原生方法\n\n```js\n_.isFinite = function(obj) {\n    // isFinite(null) 返回 true\n    return obj != null && isFinite(obj);\n};\n\n_.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n};\n```\n\n--- \n\n这些几乎就是所有 undescore.js 判断方式，我把他重写了一遍，和源码还是有区别，可以去 GitHub 看看 这部分 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1192-L1263\" target=\"_blank\">代码</a>  \n\n当然，还少了一个 `_.isEqual()` 方法，比较复杂，打算单独留出一个篇幅，下一篇在写。","source":"_posts/underscore-read-01-type-judgment.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 JavaScript 常见类型判断\"\ndate:       2017-06-06 15:38:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\nunderscore.js 封装了一些常用类型判断的方法，归类于 Objects 方法内。由于源码很多方法都用到了类型判断，所以打算先从类型判断讲起。  \n\n### void 0 代替 undefined\n\nundefined 并不是 JS 保留字，在低版本 IE 下可被重写，在 ES5 中为全局对象的一个只读属性，但在局部作用域中仍然可被重写。  \n而 void 运算符为对给定表达式进行求值，然后返回 undefined 。所以 underscore.js 内采用 void 0 代替 undefined。  \n\n### Object.prototype.toString()\n\n在 JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 'number'，'string'，'undefined'，'boolean'，'object' 五种。对于数组、函数、对象来说，其关系错综复杂，使用 typeof 都会统一返回 'object' 字符串。这时我们就得用到 Object.prototype.toString() 方法  \n\nObject.prototype.toString() 在 ECMA 中的解释：  \n\n>When the toString method is called, the following steps are taken:  \n>1、Get the [[Class]] property of this object.  \n>2、Compute a string value by concatenating the three strings “[object “,Result (1), and “]”.  \n\n代码实现如下  \n\n```js\nvar toString = Object.prototype.toString;\n\nconsole.log(toString.call([]));             //[object Array]\nconsole.log(toString.call(''));             //[object String]\nconsole.log(toString.call({a: '1'}));       //[object Object]\nconsole.log(toString.call(arguments);       //[object Arguments]\nconsole.log(toString.call(/./));            //[object RegExp]\nconsole.log(toString.call(new Date()));     //[object Date]\nconsole.log(toString.call(1));              //[object Number]\nconsole.log(toString.call(true));           //[object Boolean]\nconsole.log(toString.call(new Error()));    //[object Error]\nconsole.log(toString.call(new Function())); //[object Function]\n\nconsole.log(toString.call(undefined));      //[object Undefined]\nconsole.log(toString.call(null));           //[object Null]\n\n```\n\n在 IE8 下 'Arguments','undefined','null' 这三个有 Bug，返回的是 Object\n\n```js\n// IE8 下\nconsole.log(toString.call(arguments));      //[object Object]\nconsole.log(toString.call(undefined));      //[object Object]\nconsole.log(toString.call(null));           //[object Object]\n```\n\nnull 和 undefined 判断不需要太复杂，分别用 ` obj === null ` 、和 ` obj === void 0 ` 判断即可。  \n如果要同时判断 null 和 undefined ，使用 ` obj == null `。因为 `undefined == null`。  \n\narguments 则在 IE8 下通过特性检测是否含有 callee 属性值来判断 arguments  \n\n```js\n_.isArguments = function(obj) {   \n    // null 时 hasOwnProperty 会抛出错误，要排除 null 的情况\n    return Object.prototype.toString.call(obj) === '[object Arguments]' ||\n             obj != null &&\n             Object.prototype.hasOwnProperty.call(obj, 'callee');\n};\n```\n\nArray 类型除了以上方法，ES5 还新增了 Array.isArray 方法  \n\n```js\n_.isArray = function(obj) {\n    return Array.isArray ? Array.isArray(obj) : \n            Object.prototype.toString.call(obj) === '[object Array]';\n  };\n```\n\nunderscore.js 认为 function 也应属于 object  \n\n```js\n_.isObject = function(obj) {\n    // !!obj 排除 null 的情况\n    return typeof obj === 'function' || typeof obj === 'object' && !!obj;\n};\n```\n\n其他的都直接使用 toString() 方法判断  \n\n```js\n// underscore 使用了自建的 _.each() 方法，我原生写了一个以防看不懂\n(function(){\n    var obj = ['Function', 'String', 'Number', 'Date', 'RegExp', 'Error', \n            'Boolean'];\n\n    for(var i in obj) {\n      (function(i){\n        var name = obj[i];\n        \n        _['is' + name] = function(obj) {\n          return toString.call(obj) === '[object ' + name + ']';\n        }\n      })(i)\n    }\n})();\n```\n\n### 其他实用工具判断  \n\n_.isEmpty 如果 object 不包含任何值(没有可枚举的属性)，返回 true。  \n对于字符串和类数组 「array-like」 对象，如果 length 属性为 0，那么 _.isEmpty 检查返回 true。\n\n```js\n// 我写的也和源码不一样，我觉得这样好懂\n\n_.isEmpty = function(obj) {\n\n    // 排除 null 和 undefined\n    if(obj == null)  return true;\n    \n    // 对象单独判断，判断 keys 的个数\n    if(_.isObject(obj)) {\n      var keys = [];\n\n      for(var i in obj) \n        keys.push(i);\n\n      return !keys.length;\n    } \n\n    // 数组及类数组都含有 length 方法，统一判断\n    return !(obj.length);\n  };\n```\n\n判读是否是 DOM 元素\n\n```js\n_.isElement = function(obj) {\n    // 排除 obj 为 null 或 undefined 时报错\n    return !!(obj && obj.nodeType === 1);\n}\n```\n\nisFinite 和 isNaN 都使用原生方法\n\n```js\n_.isFinite = function(obj) {\n    // isFinite(null) 返回 true\n    return obj != null && isFinite(obj);\n};\n\n_.isNaN = function(obj) {\n    return _.isNumber(obj) && isNaN(obj);\n};\n```\n\n--- \n\n这些几乎就是所有 undescore.js 判断方式，我把他重写了一遍，和源码还是有区别，可以去 GitHub 看看 这部分 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1192-L1263\" target=\"_blank\">代码</a>  \n\n当然，还少了一个 `_.isEqual()` 方法，比较复杂，打算单独留出一个篇幅，下一篇在写。","slug":"underscore-read-01-type-judgment","published":1,"updated":"2018-05-09T08:47:14.379Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41h001y2mhsu17l9ttw","content":"<p>underscore.js 封装了一些常用类型判断的方法，归类于 Objects 方法内。由于源码很多方法都用到了类型判断，所以打算先从类型判断讲起。  </p>\n<h3 id=\"void-0-代替-undefined\"><a href=\"#void-0-代替-undefined\" class=\"headerlink\" title=\"void 0 代替 undefined\"></a>void 0 代替 undefined</h3><p>undefined 并不是 JS 保留字，在低版本 IE 下可被重写，在 ES5 中为全局对象的一个只读属性，但在局部作用域中仍然可被重写。<br>而 void 运算符为对给定表达式进行求值，然后返回 undefined 。所以 underscore.js 内采用 void 0 代替 undefined。  </p>\n<h3 id=\"Object-prototype-toString\"><a href=\"#Object-prototype-toString\" class=\"headerlink\" title=\"Object.prototype.toString()\"></a>Object.prototype.toString()</h3><p>在 JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 ‘number’，’string’，’undefined’，’boolean’，’object’ 五种。对于数组、函数、对象来说，其关系错综复杂，使用 typeof 都会统一返回 ‘object’ 字符串。这时我们就得用到 Object.prototype.toString() 方法  </p>\n<p>Object.prototype.toString() 在 ECMA 中的解释：  </p>\n<blockquote>\n<p>When the toString method is called, the following steps are taken:<br>1、Get the [[Class]] property of this object.<br>2、Compute a string value by concatenating the three strings “[object “,Result (1), and “]”.  </p>\n</blockquote>\n<p>代码实现如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toString = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call([]));             <span class=\"comment\">//[object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"string\">''</span>));             <span class=\"comment\">//[object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(&#123;<span class=\"attr\">a</span>: <span class=\"string\">'1'</span>&#125;));       <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"built_in\">arguments</span>);       <span class=\"comment\">//[object Arguments]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"regexp\">/./</span>));            <span class=\"comment\">//[object RegExp]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));     <span class=\"comment\">//[object Date]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"number\">1</span>));              <span class=\"comment\">//[object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">true</span>));           <span class=\"comment\">//[object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>()));    <span class=\"comment\">//[object Error]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>())); <span class=\"comment\">//[object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">undefined</span>));      <span class=\"comment\">//[object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">null</span>));           <span class=\"comment\">//[object Null]</span></span><br></pre></td></tr></table></figure>\n<p>在 IE8 下 ‘Arguments’,’undefined’,’null’ 这三个有 Bug，返回的是 Object</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE8 下</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"built_in\">arguments</span>));      <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">undefined</span>));      <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">null</span>));           <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure>\n<p>null 和 undefined 判断不需要太复杂，分别用 <code>obj === null</code> 、和 <code>obj === void 0</code> 判断即可。<br>如果要同时判断 null 和 undefined ，使用 <code>obj == null</code>。因为 <code>undefined == null</code>。  </p>\n<p>arguments 则在 IE8 下通过特性检测是否含有 callee 属性值来判断 arguments  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// null 时 hasOwnProperty 会抛出错误，要排除 null 的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Arguments]'</span> ||</span><br><span class=\"line\">             obj != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">             <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, <span class=\"string\">'callee'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Array 类型除了以上方法，ES5 还新增了 Array.isArray 方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray ? <span class=\"built_in\">Array</span>.isArray(obj) : </span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>underscore.js 认为 function 也应属于 object  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// !!obj 排除 null 的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span> || <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他的都直接使用 toString() 方法判断  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// underscore 使用了自建的 _.each() 方法，我原生写了一个以防看不懂</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = [<span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>, </span><br><span class=\"line\">            <span class=\"string\">'Boolean'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = obj[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">        _[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object '</span> + name + <span class=\"string\">']'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他实用工具判断\"><a href=\"#其他实用工具判断\" class=\"headerlink\" title=\"其他实用工具判断\"></a>其他实用工具判断</h3><p>_.isEmpty 如果 object 不包含任何值(没有可枚举的属性)，返回 true。<br>对于字符串和类数组 「array-like」 对象，如果 length 属性为 0，那么 _.isEmpty 检查返回 true。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我写的也和源码不一样，我觉得这样好懂</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排除 null 和 undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对象单独判断，判断 keys 的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(_.isObject(obj)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) </span><br><span class=\"line\">        keys.push(i);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> !keys.length;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数组及类数组都含有 length 方法，统一判断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(obj.length);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>判读是否是 DOM 元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 排除 obj 为 null 或 undefined 时报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>isFinite 和 isNaN 都使用原生方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// isFinite(null) 返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">isFinite</span>(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; <span class=\"built_in\">isNaN</span>(obj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>这些几乎就是所有 undescore.js 判断方式，我把他重写了一遍，和源码还是有区别，可以去 GitHub 看看 这部分 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1192-L1263\" target=\"_blank\">代码</a>  </p>\n<p>当然，还少了一个 <code>_.isEqual()</code> 方法，比较复杂，打算单独留出一个篇幅，下一篇在写。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>underscore.js 封装了一些常用类型判断的方法，归类于 Objects 方法内。由于源码很多方法都用到了类型判断，所以打算先从类型判断讲起。  </p>\n<h3 id=\"void-0-代替-undefined\"><a href=\"#void-0-代替-undefined\" class=\"headerlink\" title=\"void 0 代替 undefined\"></a>void 0 代替 undefined</h3><p>undefined 并不是 JS 保留字，在低版本 IE 下可被重写，在 ES5 中为全局对象的一个只读属性，但在局部作用域中仍然可被重写。<br>而 void 运算符为对给定表达式进行求值，然后返回 undefined 。所以 underscore.js 内采用 void 0 代替 undefined。  </p>\n<h3 id=\"Object-prototype-toString\"><a href=\"#Object-prototype-toString\" class=\"headerlink\" title=\"Object.prototype.toString()\"></a>Object.prototype.toString()</h3><p>在 JavaScript 里使用 typeof 来判断数据类型，只能区分基本类型，即 ‘number’，’string’，’undefined’，’boolean’，’object’ 五种。对于数组、函数、对象来说，其关系错综复杂，使用 typeof 都会统一返回 ‘object’ 字符串。这时我们就得用到 Object.prototype.toString() 方法  </p>\n<p>Object.prototype.toString() 在 ECMA 中的解释：  </p>\n<blockquote>\n<p>When the toString method is called, the following steps are taken:<br>1、Get the [[Class]] property of this object.<br>2、Compute a string value by concatenating the three strings “[object “,Result (1), and “]”.  </p>\n</blockquote>\n<p>代码实现如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> toString = <span class=\"built_in\">Object</span>.prototype.toString;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call([]));             <span class=\"comment\">//[object Array]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"string\">''</span>));             <span class=\"comment\">//[object String]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(&#123;<span class=\"attr\">a</span>: <span class=\"string\">'1'</span>&#125;));       <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"built_in\">arguments</span>);       <span class=\"comment\">//[object Arguments]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"regexp\">/./</span>));            <span class=\"comment\">//[object RegExp]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()));     <span class=\"comment\">//[object Date]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"number\">1</span>));              <span class=\"comment\">//[object Number]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">true</span>));           <span class=\"comment\">//[object Boolean]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>()));    <span class=\"comment\">//[object Error]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>())); <span class=\"comment\">//[object Function]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">undefined</span>));      <span class=\"comment\">//[object Undefined]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">null</span>));           <span class=\"comment\">//[object Null]</span></span><br></pre></td></tr></table></figure>\n<p>在 IE8 下 ‘Arguments’,’undefined’,’null’ 这三个有 Bug，返回的是 Object</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IE8 下</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"built_in\">arguments</span>));      <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">undefined</span>));      <span class=\"comment\">//[object Object]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(toString.call(<span class=\"literal\">null</span>));           <span class=\"comment\">//[object Object]</span></span><br></pre></td></tr></table></figure>\n<p>null 和 undefined 判断不需要太复杂，分别用 <code>obj === null</code> 、和 <code>obj === void 0</code> 判断即可。<br>如果要同时判断 null 和 undefined ，使用 <code>obj == null</code>。因为 <code>undefined == null</code>。  </p>\n<p>arguments 则在 IE8 下通过特性检测是否含有 callee 属性值来判断 arguments  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isArguments = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// null 时 hasOwnProperty 会抛出错误，要排除 null 的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Arguments]'</span> ||</span><br><span class=\"line\">             obj != <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">             <span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(obj, <span class=\"string\">'callee'</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Array 类型除了以上方法，ES5 还新增了 Array.isArray 方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isArray = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.isArray ? <span class=\"built_in\">Array</span>.isArray(obj) : </span><br><span class=\"line\">            <span class=\"built_in\">Object</span>.prototype.toString.call(obj) === <span class=\"string\">'[object Array]'</span>;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>underscore.js 认为 function 也应属于 object  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isObject = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// !!obj 排除 null 的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'function'</span> || <span class=\"keyword\">typeof</span> obj === <span class=\"string\">'object'</span> &amp;&amp; !!obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其他的都直接使用 toString() 方法判断  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// underscore 使用了自建的 _.each() 方法，我原生写了一个以防看不懂</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> obj = [<span class=\"string\">'Function'</span>, <span class=\"string\">'String'</span>, <span class=\"string\">'Number'</span>, <span class=\"string\">'Date'</span>, <span class=\"string\">'RegExp'</span>, <span class=\"string\">'Error'</span>, </span><br><span class=\"line\">            <span class=\"string\">'Boolean'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">      (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> name = obj[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">        _[<span class=\"string\">'is'</span> + name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> toString.call(obj) === <span class=\"string\">'[object '</span> + name + <span class=\"string\">']'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)(i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他实用工具判断\"><a href=\"#其他实用工具判断\" class=\"headerlink\" title=\"其他实用工具判断\"></a>其他实用工具判断</h3><p>_.isEmpty 如果 object 不包含任何值(没有可枚举的属性)，返回 true。<br>对于字符串和类数组 「array-like」 对象，如果 length 属性为 0，那么 _.isEmpty 检查返回 true。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 我写的也和源码不一样，我觉得这样好懂</span></span><br><span class=\"line\"></span><br><span class=\"line\">_.isEmpty = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 排除 null 和 undefined</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 对象单独判断，判断 keys 的个数</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(_.isObject(obj)) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> keys = [];</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> obj) </span><br><span class=\"line\">        keys.push(i);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> !keys.length;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 数组及类数组都含有 length 方法，统一判断</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !(obj.length);</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>判读是否是 DOM 元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isElement = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 排除 obj 为 null 或 undefined 时报错</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !!(obj &amp;&amp; obj.nodeType === <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>isFinite 和 isNaN 都使用原生方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.isFinite = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// isFinite(null) 返回 true</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj != <span class=\"literal\">null</span> &amp;&amp; <span class=\"built_in\">isFinite</span>(obj);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.isNaN = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.isNumber(obj) &amp;&amp; <span class=\"built_in\">isNaN</span>(obj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>这些几乎就是所有 undescore.js 判断方式，我把他重写了一遍，和源码还是有区别，可以去 GitHub 看看 这部分 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1192-L1263\" target=\"_blank\">代码</a>  </p>\n<p>当然，还少了一个 <code>_.isEqual()</code> 方法，比较复杂，打算单独留出一个篇幅，下一篇在写。</p>\n"},{"layout":"post","title":"underscore.js 源码之 闭包与 createAssigner 方法","date":"2017-06-07T14:24:00.000Z","_content":"\n这篇我们来讲讲 underscore.js 的 `createAssigner()` 这个函数的作用与如何实现，在此之前。先来看看 **闭包** 这个概念  \n\n### 闭包\n\n《JavaScript 高级程序设计》 书中说：「闭包」是指有权访问另一个函数作用域的变量的函数。  \n创建闭包的常见方式，是在一个函数内部创建另一个函数，看一下高程的例子。  \n\n```js\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var value1 = obj1[propertyName];\n        var value2 = obj2[propertyName];\n\n        if(value1 < value2) {\n            <!--  -->\n        }\n    }\n}\n```\n\n此时调用 `var compare = createComparisonFunction('name')` , compare 得到的是 return 的匿名函数。  \n而在调用 `compare({name: 'a'}, {name: b});` 匿名函数仍然可以访问到变量 propertyName。之所以能够访问，是因为内部函数的作用域链中包含 `createComparisonFunction()` 的作用域。  \n一般来说，在函数中访问一个变量，会优先在局部变量中查找，然后在进入全局域中查找，当函数执行完毕时，局部活动变量被销毁，内存中仅全局变量保留。而闭包又不同。  \n在函数内部定义函数会将外部函数的活动对象添加到它的作用域中。如上代码，当 \n`createComparisonFunction()` 函数在执行后，执行环境的作用域链会被销毁，而活动对象仍然在内存中，直到匿名函数被销毁。  \n\n说到这，就想起经典的问题，即闭包只能取得函数中任何变量的最终值：\n\n```js\nfunction createFunction() {\n    var result = {};\n\n    for(var i = 0; i < 10; i++) {\n        result[i] = function() {\n            return i\n        };\n    }\n    return result;\n}\n```\n\n所以内部函数访问的闭包只有最终值 10，而不是 0 - 9。  \n\n之所以写了这么多，是因为之前看的时候浑浑噩噩，不明所以。如今看了源码的 return function 的方法后，在回头看高程，才把这里看懂了，故记下以便将来查阅。 \n\n### arguments  \n\n记录自 《JavaScript 忍者秘籍》：\n>当一个参数列表作为函数调用的一部分时，这些参数会按照函数声明里的形参顺序，依次赋值给这些形参。  \n>如果传入的参数不一样，不会报错。如果传入的参数小于形参，剩下的形参会赋值为 undefined ，而传入的参数大于形参，则可以通过隐式参数 arguments 获取。\n\narguments 是传递给函数的所有参数的一个集合，是一个类数组对象，比如 arguments[2] 为传入的第三个参数。利用好这个特性，可以简化我们使用函数的方法 \n\n### _.extend() 与 _.default() 方法  \n\n官方文档是这么写这两个函数的作用的  \n`_.extend(destination, *sources)`   复制 source 对象中的所有属性覆盖到 destination 对象上，并且返回 destination 对象. 复制是按顺序的, 所以后面的对象属性会把前面的对象属性覆盖掉(如果有重复)。  \n`_.defaults(destination, *defaults)` 类似，不过只填充 destination 中 undefined 的属性。即不会将已有的属性覆盖掉。  \n例如：  \n\n```js\nvar destinate = {a:1, b:2};\nvar source = {b:3, d:4};\n\n_.extend(a,b)        // {a:1, b:3, d:4};\n_.default(a,b)        // {a:1, b:2, d:4};\n```\n\n源码中还有一个 `_.extendOwn()` 方法，文档中没有，区别就在与传入的是含继承过来的属性方法。  \n这三个功能这么相似，看看 underscore 是怎么抽象出来的。  \n\n```js\n_.extend = createAssigner(_.keys);\n_.extendOwn = createAssigner(_.allKeys);\n_.default = createAssigner(_.keys, true);\n```\n\n他们都调用了 `createAssigner` 一个方法，不同的在于传入的参数。`_.keys` 是 underscore 方法，用于储存对象属性值，不含继承过来的属性。返回一个数组，而 `_.allKeys` 则包含继承的属性。  \n`_.defult()` 则是传入的第二个参数。来看看 `createAssigner` 是怎么写的。  \n\n```js\nvar createAssigner = function(keysFun, underfinedObj) {\n    // 闭包，返回的函数仍可以获取 KeysFun 和 underfinedObj 两个参数\n    return function(obj) {\n        var length = arguments.length;\n        \n        // 传入的参数小于1 或者第一个为 null 直接返回\n        if (length <2 && obj == null)  return obj;\n        \n        // 从 arguments 的第二个参数开始\n        for(var index = 1; index < length; index++) {\n            var source = arguments[index],\n                /* 闭包传入的第一个参数是函数，_.keys 或 _.allKeys\n                 * 调用  _.keys 或 _.allkeys 获取对象属性值\n                 */\n                keys = keysFun(source),\n                l = keys.length;\n\n            for(var i = 0; i < l; i++) {\n                var key = keys[i];\n                \n                /*\n                 * 不传入 underfinedObj参数 时，!underfinedObj = true，第二个不进行判断\n                 * _.default 传入 true，判断第二个条件\n                 * obj[key] === void 0 如果 obj[key] 不存在，才执行。就不覆盖已有属性\n                 */\n                if(!underfinedObj || obj[key] === void 0) {\n                    obj[key] = source[key];\n                }\n            }\n        }\n        return obj;\n    };\n};\n```\n\n函数返回函数，并且返回的函数引用了外面的一个变量，就是上头讲的闭包。  \n传入的变量与定义的形参不一定需要对应上。可以使用 arguments 去获取变量。  \n使用 arguments 枚举除去第一个参数外的其他参数，然后将属性拷贝到第一个对象上。  \n\n至此，Object 部分主要几个点都在这里了，类型判断，比较相同，还有闭包的方法。其他的类似 `_.keys`, `_.values` 方法都是很简单的方法，就不赘述了。","source":"_posts/underscore-read-03-clouser-createAssigner.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 闭包与 createAssigner 方法\"\ndate:       2017-06-07 22:24:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n这篇我们来讲讲 underscore.js 的 `createAssigner()` 这个函数的作用与如何实现，在此之前。先来看看 **闭包** 这个概念  \n\n### 闭包\n\n《JavaScript 高级程序设计》 书中说：「闭包」是指有权访问另一个函数作用域的变量的函数。  \n创建闭包的常见方式，是在一个函数内部创建另一个函数，看一下高程的例子。  \n\n```js\nfunction createComparisonFunction(propertyName) {\n    return function(obj1, obj2) {\n        var value1 = obj1[propertyName];\n        var value2 = obj2[propertyName];\n\n        if(value1 < value2) {\n            <!--  -->\n        }\n    }\n}\n```\n\n此时调用 `var compare = createComparisonFunction('name')` , compare 得到的是 return 的匿名函数。  \n而在调用 `compare({name: 'a'}, {name: b});` 匿名函数仍然可以访问到变量 propertyName。之所以能够访问，是因为内部函数的作用域链中包含 `createComparisonFunction()` 的作用域。  \n一般来说，在函数中访问一个变量，会优先在局部变量中查找，然后在进入全局域中查找，当函数执行完毕时，局部活动变量被销毁，内存中仅全局变量保留。而闭包又不同。  \n在函数内部定义函数会将外部函数的活动对象添加到它的作用域中。如上代码，当 \n`createComparisonFunction()` 函数在执行后，执行环境的作用域链会被销毁，而活动对象仍然在内存中，直到匿名函数被销毁。  \n\n说到这，就想起经典的问题，即闭包只能取得函数中任何变量的最终值：\n\n```js\nfunction createFunction() {\n    var result = {};\n\n    for(var i = 0; i < 10; i++) {\n        result[i] = function() {\n            return i\n        };\n    }\n    return result;\n}\n```\n\n所以内部函数访问的闭包只有最终值 10，而不是 0 - 9。  \n\n之所以写了这么多，是因为之前看的时候浑浑噩噩，不明所以。如今看了源码的 return function 的方法后，在回头看高程，才把这里看懂了，故记下以便将来查阅。 \n\n### arguments  \n\n记录自 《JavaScript 忍者秘籍》：\n>当一个参数列表作为函数调用的一部分时，这些参数会按照函数声明里的形参顺序，依次赋值给这些形参。  \n>如果传入的参数不一样，不会报错。如果传入的参数小于形参，剩下的形参会赋值为 undefined ，而传入的参数大于形参，则可以通过隐式参数 arguments 获取。\n\narguments 是传递给函数的所有参数的一个集合，是一个类数组对象，比如 arguments[2] 为传入的第三个参数。利用好这个特性，可以简化我们使用函数的方法 \n\n### _.extend() 与 _.default() 方法  \n\n官方文档是这么写这两个函数的作用的  \n`_.extend(destination, *sources)`   复制 source 对象中的所有属性覆盖到 destination 对象上，并且返回 destination 对象. 复制是按顺序的, 所以后面的对象属性会把前面的对象属性覆盖掉(如果有重复)。  \n`_.defaults(destination, *defaults)` 类似，不过只填充 destination 中 undefined 的属性。即不会将已有的属性覆盖掉。  \n例如：  \n\n```js\nvar destinate = {a:1, b:2};\nvar source = {b:3, d:4};\n\n_.extend(a,b)        // {a:1, b:3, d:4};\n_.default(a,b)        // {a:1, b:2, d:4};\n```\n\n源码中还有一个 `_.extendOwn()` 方法，文档中没有，区别就在与传入的是含继承过来的属性方法。  \n这三个功能这么相似，看看 underscore 是怎么抽象出来的。  \n\n```js\n_.extend = createAssigner(_.keys);\n_.extendOwn = createAssigner(_.allKeys);\n_.default = createAssigner(_.keys, true);\n```\n\n他们都调用了 `createAssigner` 一个方法，不同的在于传入的参数。`_.keys` 是 underscore 方法，用于储存对象属性值，不含继承过来的属性。返回一个数组，而 `_.allKeys` 则包含继承的属性。  \n`_.defult()` 则是传入的第二个参数。来看看 `createAssigner` 是怎么写的。  \n\n```js\nvar createAssigner = function(keysFun, underfinedObj) {\n    // 闭包，返回的函数仍可以获取 KeysFun 和 underfinedObj 两个参数\n    return function(obj) {\n        var length = arguments.length;\n        \n        // 传入的参数小于1 或者第一个为 null 直接返回\n        if (length <2 && obj == null)  return obj;\n        \n        // 从 arguments 的第二个参数开始\n        for(var index = 1; index < length; index++) {\n            var source = arguments[index],\n                /* 闭包传入的第一个参数是函数，_.keys 或 _.allKeys\n                 * 调用  _.keys 或 _.allkeys 获取对象属性值\n                 */\n                keys = keysFun(source),\n                l = keys.length;\n\n            for(var i = 0; i < l; i++) {\n                var key = keys[i];\n                \n                /*\n                 * 不传入 underfinedObj参数 时，!underfinedObj = true，第二个不进行判断\n                 * _.default 传入 true，判断第二个条件\n                 * obj[key] === void 0 如果 obj[key] 不存在，才执行。就不覆盖已有属性\n                 */\n                if(!underfinedObj || obj[key] === void 0) {\n                    obj[key] = source[key];\n                }\n            }\n        }\n        return obj;\n    };\n};\n```\n\n函数返回函数，并且返回的函数引用了外面的一个变量，就是上头讲的闭包。  \n传入的变量与定义的形参不一定需要对应上。可以使用 arguments 去获取变量。  \n使用 arguments 枚举除去第一个参数外的其他参数，然后将属性拷贝到第一个对象上。  \n\n至此，Object 部分主要几个点都在这里了，类型判断，比较相同，还有闭包的方法。其他的类似 `_.keys`, `_.values` 方法都是很简单的方法，就不赘述了。","slug":"underscore-read-03-clouser-createAssigner","published":1,"updated":"2018-05-09T08:53:16.193Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41i00212mhs8hmtzcll","content":"<p>这篇我们来讲讲 underscore.js 的 <code>createAssigner()</code> 这个函数的作用与如何实现，在此之前。先来看看 <strong>闭包</strong> 这个概念  </p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>《JavaScript 高级程序设计》 书中说：「闭包」是指有权访问另一个函数作用域的变量的函数。<br>创建闭包的常见方式，是在一个函数内部创建另一个函数，看一下高程的例子。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj1, obj2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value1 = obj1[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value2 = obj2[propertyName];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value1 &lt; value2) &#123;</span><br><span class=\"line\">            &lt;!--  --&gt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时调用 <code>var compare = createComparisonFunction(&#39;name&#39;)</code> , compare 得到的是 return 的匿名函数。<br>而在调用 <code>compare({name: &#39;a&#39;}, {name: b});</code> 匿名函数仍然可以访问到变量 propertyName。之所以能够访问，是因为内部函数的作用域链中包含 <code>createComparisonFunction()</code> 的作用域。<br>一般来说，在函数中访问一个变量，会优先在局部变量中查找，然后在进入全局域中查找，当函数执行完毕时，局部活动变量被销毁，内存中仅全局变量保留。而闭包又不同。<br>在函数内部定义函数会将外部函数的活动对象添加到它的作用域中。如上代码，当<br><code>createComparisonFunction()</code> 函数在执行后，执行环境的作用域链会被销毁，而活动对象仍然在内存中，直到匿名函数被销毁。  </p>\n<p>说到这，就想起经典的问题，即闭包只能取得函数中任何变量的最终值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以内部函数访问的闭包只有最终值 10，而不是 0 - 9。  </p>\n<p>之所以写了这么多，是因为之前看的时候浑浑噩噩，不明所以。如今看了源码的 return function 的方法后，在回头看高程，才把这里看懂了，故记下以便将来查阅。 </p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><p>记录自 《JavaScript 忍者秘籍》：</p>\n<blockquote>\n<p>当一个参数列表作为函数调用的一部分时，这些参数会按照函数声明里的形参顺序，依次赋值给这些形参。<br>如果传入的参数不一样，不会报错。如果传入的参数小于形参，剩下的形参会赋值为 undefined ，而传入的参数大于形参，则可以通过隐式参数 arguments 获取。</p>\n</blockquote>\n<p>arguments 是传递给函数的所有参数的一个集合，是一个类数组对象，比如 arguments[2] 为传入的第三个参数。利用好这个特性，可以简化我们使用函数的方法 </p>\n<h3 id=\"extend-与-default-方法\"><a href=\"#extend-与-default-方法\" class=\"headerlink\" title=\"_.extend() 与 _.default() 方法\"></a>_.extend() 与 _.default() 方法</h3><p>官方文档是这么写这两个函数的作用的<br><code>_.extend(destination, *sources)</code>   复制 source 对象中的所有属性覆盖到 destination 对象上，并且返回 destination 对象. 复制是按顺序的, 所以后面的对象属性会把前面的对象属性覆盖掉(如果有重复)。<br><code>_.defaults(destination, *defaults)</code> 类似，不过只填充 destination 中 undefined 的属性。即不会将已有的属性覆盖掉。<br>例如：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> destinate = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = &#123;<span class=\"attr\">b</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.extend(a,b)        <span class=\"comment\">// &#123;a:1, b:3, d:4&#125;;</span></span><br><span class=\"line\">_.default(a,b)        <span class=\"comment\">// &#123;a:1, b:2, d:4&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>源码中还有一个 <code>_.extendOwn()</code> 方法，文档中没有，区别就在与传入的是含继承过来的属性方法。<br>这三个功能这么相似，看看 underscore 是怎么抽象出来的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.extend = createAssigner(_.keys);</span><br><span class=\"line\">_.extendOwn = createAssigner(_.allKeys);</span><br><span class=\"line\">_.default = createAssigner(_.keys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>他们都调用了 <code>createAssigner</code> 一个方法，不同的在于传入的参数。<code>_.keys</code> 是 underscore 方法，用于储存对象属性值，不含继承过来的属性。返回一个数组，而 <code>_.allKeys</code> 则包含继承的属性。<br><code>_.defult()</code> 则是传入的第二个参数。来看看 <code>createAssigner</code> 是怎么写的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFun, underfinedObj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包，返回的函数仍可以获取 KeysFun 和 underfinedObj 两个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 传入的参数小于1 或者第一个为 null 直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt;<span class=\"number\">2</span> &amp;&amp; obj == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 从 arguments 的第二个参数开始</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],</span><br><span class=\"line\">                <span class=\"comment\">/* 闭包传入的第一个参数是函数，_.keys 或 _.allKeys</span></span><br><span class=\"line\"><span class=\"comment\">                 * 调用  _.keys 或 _.allkeys 获取对象属性值</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                keys = keysFun(source),</span><br><span class=\"line\">                l = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * 不传入 underfinedObj参数 时，!underfinedObj = true，第二个不进行判断</span></span><br><span class=\"line\"><span class=\"comment\">                 * _.default 传入 true，判断第二个条件</span></span><br><span class=\"line\"><span class=\"comment\">                 * obj[key] === void 0 如果 obj[key] 不存在，才执行。就不覆盖已有属性</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!underfinedObj || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    obj[key] = source[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数返回函数，并且返回的函数引用了外面的一个变量，就是上头讲的闭包。<br>传入的变量与定义的形参不一定需要对应上。可以使用 arguments 去获取变量。<br>使用 arguments 枚举除去第一个参数外的其他参数，然后将属性拷贝到第一个对象上。  </p>\n<p>至此，Object 部分主要几个点都在这里了，类型判断，比较相同，还有闭包的方法。其他的类似 <code>_.keys</code>, <code>_.values</code> 方法都是很简单的方法，就不赘述了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇我们来讲讲 underscore.js 的 <code>createAssigner()</code> 这个函数的作用与如何实现，在此之前。先来看看 <strong>闭包</strong> 这个概念  </p>\n<h3 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h3><p>《JavaScript 高级程序设计》 书中说：「闭包」是指有权访问另一个函数作用域的变量的函数。<br>创建闭包的常见方式，是在一个函数内部创建另一个函数，看一下高程的例子。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createComparisonFunction</span>(<span class=\"params\">propertyName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj1, obj2</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value1 = obj1[propertyName];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value2 = obj2[propertyName];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(value1 &lt; value2) &#123;</span><br><span class=\"line\">            &lt;!--  --&gt;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时调用 <code>var compare = createComparisonFunction(&#39;name&#39;)</code> , compare 得到的是 return 的匿名函数。<br>而在调用 <code>compare({name: &#39;a&#39;}, {name: b});</code> 匿名函数仍然可以访问到变量 propertyName。之所以能够访问，是因为内部函数的作用域链中包含 <code>createComparisonFunction()</code> 的作用域。<br>一般来说，在函数中访问一个变量，会优先在局部变量中查找，然后在进入全局域中查找，当函数执行完毕时，局部活动变量被销毁，内存中仅全局变量保留。而闭包又不同。<br>在函数内部定义函数会将外部函数的活动对象添加到它的作用域中。如上代码，当<br><code>createComparisonFunction()</code> 函数在执行后，执行环境的作用域链会被销毁，而活动对象仍然在内存中，直到匿名函数被销毁。  </p>\n<p>说到这，就想起经典的问题，即闭包只能取得函数中任何变量的最终值：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">        result[i] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以内部函数访问的闭包只有最终值 10，而不是 0 - 9。  </p>\n<p>之所以写了这么多，是因为之前看的时候浑浑噩噩，不明所以。如今看了源码的 return function 的方法后，在回头看高程，才把这里看懂了，故记下以便将来查阅。 </p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"headerlink\" title=\"arguments\"></a>arguments</h3><p>记录自 《JavaScript 忍者秘籍》：</p>\n<blockquote>\n<p>当一个参数列表作为函数调用的一部分时，这些参数会按照函数声明里的形参顺序，依次赋值给这些形参。<br>如果传入的参数不一样，不会报错。如果传入的参数小于形参，剩下的形参会赋值为 undefined ，而传入的参数大于形参，则可以通过隐式参数 arguments 获取。</p>\n</blockquote>\n<p>arguments 是传递给函数的所有参数的一个集合，是一个类数组对象，比如 arguments[2] 为传入的第三个参数。利用好这个特性，可以简化我们使用函数的方法 </p>\n<h3 id=\"extend-与-default-方法\"><a href=\"#extend-与-default-方法\" class=\"headerlink\" title=\"_.extend() 与 _.default() 方法\"></a>_.extend() 与 _.default() 方法</h3><p>官方文档是这么写这两个函数的作用的<br><code>_.extend(destination, *sources)</code>   复制 source 对象中的所有属性覆盖到 destination 对象上，并且返回 destination 对象. 复制是按顺序的, 所以后面的对象属性会把前面的对象属性覆盖掉(如果有重复)。<br><code>_.defaults(destination, *defaults)</code> 类似，不过只填充 destination 中 undefined 的属性。即不会将已有的属性覆盖掉。<br>例如：  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> destinate = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>, <span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = &#123;<span class=\"attr\">b</span>:<span class=\"number\">3</span>, <span class=\"attr\">d</span>:<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.extend(a,b)        <span class=\"comment\">// &#123;a:1, b:3, d:4&#125;;</span></span><br><span class=\"line\">_.default(a,b)        <span class=\"comment\">// &#123;a:1, b:2, d:4&#125;;</span></span><br></pre></td></tr></table></figure>\n<p>源码中还有一个 <code>_.extendOwn()</code> 方法，文档中没有，区别就在与传入的是含继承过来的属性方法。<br>这三个功能这么相似，看看 underscore 是怎么抽象出来的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.extend = createAssigner(_.keys);</span><br><span class=\"line\">_.extendOwn = createAssigner(_.allKeys);</span><br><span class=\"line\">_.default = createAssigner(_.keys, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>他们都调用了 <code>createAssigner</code> 一个方法，不同的在于传入的参数。<code>_.keys</code> 是 underscore 方法，用于储存对象属性值，不含继承过来的属性。返回一个数组，而 <code>_.allKeys</code> 则包含继承的属性。<br><code>_.defult()</code> 则是传入的第二个参数。来看看 <code>createAssigner</code> 是怎么写的。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> createAssigner = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">keysFun, underfinedObj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 闭包，返回的函数仍可以获取 KeysFun 和 underfinedObj 两个参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> length = <span class=\"built_in\">arguments</span>.length;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 传入的参数小于1 或者第一个为 null 直接返回</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (length &lt;<span class=\"number\">2</span> &amp;&amp; obj == <span class=\"literal\">null</span>)  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 从 arguments 的第二个参数开始</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> index = <span class=\"number\">1</span>; index &lt; length; index++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> source = <span class=\"built_in\">arguments</span>[index],</span><br><span class=\"line\">                <span class=\"comment\">/* 闭包传入的第一个参数是函数，_.keys 或 _.allKeys</span></span><br><span class=\"line\"><span class=\"comment\">                 * 调用  _.keys 或 _.allkeys 获取对象属性值</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                keys = keysFun(source),</span><br><span class=\"line\">                l = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; l; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> key = keys[i];</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">                 * 不传入 underfinedObj参数 时，!underfinedObj = true，第二个不进行判断</span></span><br><span class=\"line\"><span class=\"comment\">                 * _.default 传入 true，判断第二个条件</span></span><br><span class=\"line\"><span class=\"comment\">                 * obj[key] === void 0 如果 obj[key] 不存在，才执行。就不覆盖已有属性</span></span><br><span class=\"line\"><span class=\"comment\">                 */</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!underfinedObj || obj[key] === <span class=\"keyword\">void</span> <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    obj[key] = source[key];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数返回函数，并且返回的函数引用了外面的一个变量，就是上头讲的闭包。<br>传入的变量与定义的形参不一定需要对应上。可以使用 arguments 去获取变量。<br>使用 arguments 枚举除去第一个参数外的其他参数，然后将属性拷贝到第一个对象上。  </p>\n<p>至此，Object 部分主要几个点都在这里了，类型判断，比较相同，还有闭包的方法。其他的类似 <code>_.keys</code>, <code>_.values</code> 方法都是很简单的方法，就不赘述了。</p>\n"},{"layout":"post","title":"underscore.js 源码之 数组查找","date":"2017-06-10T07:22:00.000Z","_content":"\n在 ES5 中， Array.prototype 内置了 indexOf() 方法。方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1  \n而在 ES6 中，Array.prototype 添加了 findIndex() 方法。方法返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。 \n\n使用方法和 Polyfill 可以参考 MDN，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\">indexOf</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\">findIndex</a>\n\n在 underscore 中都实现了这些方法，例如 findIndex() 和 lastFindIndex() 这两个相似的方法，看看 underscore 是怎么写的。\n\n### createPredicateIndexFinder() \n\n```js\nfunction createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      var length = array.length;\n      var index = dir > 0 ? 0 : length - 1;\n\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n\n      return -1;\n    }\n}\n_.findIndex = createPredicateIndexFinder(1);\n_.findLastIndex = createPredicateIndexFinder(-1);\n```\n\n实现很简单，和前面讲的一样，这里也是使用闭包的方法，通过判断 dir 来确定是正向查找还是反向查找。  \n\n然后是 indexOf() 和 lastIndexOf() 方法。  \n\n### createIndexFinder\n\n```js\nfunction createIndexFinder(dir, predicate, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0,\n          length = array.length;\n\n      // 如果 idx 为数字，则从 idx 指定处开始查找\n      if (_.isNumber(idx)) {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if(sortedIndex && idx && length) {\n        // 如果 idx 为 true，则说明使用二分查找法\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n\n      // NaN 的情况\n      if(item !== item) {\n        idx = predicate(slice.call(array, i, length), _.isNaN);\n        return idx > 0 ? idx + i : -1;\n      }\n\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n\n      return -1;\n    }\n  }\n\n_.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n_.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n```\n\n看 idx 这个参数，当 idx 为 number 类时，表示从指定位置开始查找。当 idx 为 true 时，表示数组已排序，可使用 `_.sortedIndex` 方法，即二分查找法。然后当 item 为 NaN 时，使用 findIndex 特判一下有没有 NaN  \n\n这几个方法不是太难懂，但设计的挺巧妙地，这篇比较水，主要是源码写得好。 ","source":"_posts/underscore-read-05-array-search.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 数组查找\"\ndate:       2017-06-10 15:22:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n在 ES5 中， Array.prototype 内置了 indexOf() 方法。方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1  \n而在 ES6 中，Array.prototype 添加了 findIndex() 方法。方法返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。 \n\n使用方法和 Polyfill 可以参考 MDN，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\">indexOf</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\">findIndex</a>\n\n在 underscore 中都实现了这些方法，例如 findIndex() 和 lastFindIndex() 这两个相似的方法，看看 underscore 是怎么写的。\n\n### createPredicateIndexFinder() \n\n```js\nfunction createPredicateIndexFinder(dir) {\n    return function(array, predicate, context) {\n      var length = array.length;\n      var index = dir > 0 ? 0 : length - 1;\n\n      for (; index >= 0 && index < length; index += dir) {\n        if (predicate(array[index], index, array)) {\n          return index;\n        }\n      }\n\n      return -1;\n    }\n}\n_.findIndex = createPredicateIndexFinder(1);\n_.findLastIndex = createPredicateIndexFinder(-1);\n```\n\n实现很简单，和前面讲的一样，这里也是使用闭包的方法，通过判断 dir 来确定是正向查找还是反向查找。  \n\n然后是 indexOf() 和 lastIndexOf() 方法。  \n\n### createIndexFinder\n\n```js\nfunction createIndexFinder(dir, predicate, sortedIndex) {\n    return function(array, item, idx) {\n      var i = 0,\n          length = array.length;\n\n      // 如果 idx 为数字，则从 idx 指定处开始查找\n      if (_.isNumber(idx)) {\n        if (dir > 0) {\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\n        } else {\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\n        }\n      } else if(sortedIndex && idx && length) {\n        // 如果 idx 为 true，则说明使用二分查找法\n        idx = sortedIndex(array, item);\n        return array[idx] === item ? idx : -1;\n      }\n\n      // NaN 的情况\n      if(item !== item) {\n        idx = predicate(slice.call(array, i, length), _.isNaN);\n        return idx > 0 ? idx + i : -1;\n      }\n\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\n        if (array[idx] === item) return idx;\n      }\n\n      return -1;\n    }\n  }\n\n_.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\n_.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\n```\n\n看 idx 这个参数，当 idx 为 number 类时，表示从指定位置开始查找。当 idx 为 true 时，表示数组已排序，可使用 `_.sortedIndex` 方法，即二分查找法。然后当 item 为 NaN 时，使用 findIndex 特判一下有没有 NaN  \n\n这几个方法不是太难懂，但设计的挺巧妙地，这篇比较水，主要是源码写得好。 ","slug":"underscore-read-05-array-search","published":1,"updated":"2018-05-09T08:59:28.948Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41j00232mhs51w73zsi","content":"<p>在 ES5 中， Array.prototype 内置了 indexOf() 方法。方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1<br>而在 ES6 中，Array.prototype 添加了 findIndex() 方法。方法返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。 </p>\n<p>使用方法和 Polyfill 可以参考 MDN，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\">indexOf</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\">findIndex</a></p>\n<p>在 underscore 中都实现了这些方法，例如 findIndex() 和 lastFindIndex() 这两个相似的方法，看看 underscore 是怎么写的。</p>\n<h3 id=\"createPredicateIndexFinder\"><a href=\"#createPredicateIndexFinder\" class=\"headerlink\" title=\"createPredicateIndexFinder()\"></a>createPredicateIndexFinder()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPredicateIndexFinder</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> length = array.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate(array[index], index, array)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.findIndex = createPredicateIndexFinder(<span class=\"number\">1</span>);</span><br><span class=\"line\">_.findLastIndex = createPredicateIndexFinder(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<p>实现很简单，和前面讲的一样，这里也是使用闭包的方法，通过判断 dir 来确定是正向查找还是反向查找。  </p>\n<p>然后是 indexOf() 和 lastIndexOf() 方法。  </p>\n<h3 id=\"createIndexFinder\"><a href=\"#createIndexFinder\" class=\"headerlink\" title=\"createIndexFinder\"></a>createIndexFinder</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIndexFinder</span>(<span class=\"params\">dir, predicate, sortedIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, idx</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">          length = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果 idx 为数字，则从 idx 指定处开始查找</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.isNumber(idx)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          i = idx &gt;= <span class=\"number\">0</span> ? idx : <span class=\"built_in\">Math</span>.max(idx + length, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          length = idx &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(idx + <span class=\"number\">1</span>, length) : idx + length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sortedIndex &amp;&amp; idx &amp;&amp; length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 idx 为 true，则说明使用二分查找法</span></span><br><span class=\"line\">        idx = sortedIndex(array, item);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array[idx] === item ? idx : <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// NaN 的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item !== item) &#123;</span><br><span class=\"line\">        idx = predicate(slice.call(array, i, length), _.isNaN);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idx &gt; <span class=\"number\">0</span> ? idx + i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (idx = dir &gt; <span class=\"number\">0</span> ? i : length - <span class=\"number\">1</span>; idx &gt;= <span class=\"number\">0</span> &amp;&amp; idx &lt; length; idx += dir) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[idx] === item) <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_.indexOf = createIndexFinder(<span class=\"number\">1</span>, _.findIndex, _.sortedIndex);</span><br><span class=\"line\">_.lastIndexOf = createIndexFinder(<span class=\"number\">-1</span>, _.findLastIndex);</span><br></pre></td></tr></table></figure>\n<p>看 idx 这个参数，当 idx 为 number 类时，表示从指定位置开始查找。当 idx 为 true 时，表示数组已排序，可使用 <code>_.sortedIndex</code> 方法，即二分查找法。然后当 item 为 NaN 时，使用 findIndex 特判一下有没有 NaN  </p>\n<p>这几个方法不是太难懂，但设计的挺巧妙地，这篇比较水，主要是源码写得好。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>在 ES5 中， Array.prototype 内置了 indexOf() 方法。方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1<br>而在 ES6 中，Array.prototype 添加了 findIndex() 方法。方法返回数组中满足提供的测试函数的第一个元素的索引，否则返回-1。 </p>\n<p>使用方法和 Polyfill 可以参考 MDN，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\">indexOf</a> 和 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\" target=\"_blank\">findIndex</a></p>\n<p>在 underscore 中都实现了这些方法，例如 findIndex() 和 lastFindIndex() 这两个相似的方法，看看 underscore 是怎么写的。</p>\n<h3 id=\"createPredicateIndexFinder\"><a href=\"#createPredicateIndexFinder\" class=\"headerlink\" title=\"createPredicateIndexFinder()\"></a>createPredicateIndexFinder()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPredicateIndexFinder</span>(<span class=\"params\">dir</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, predicate, context</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> length = array.length;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> index = dir &gt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : length - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (; index &gt;= <span class=\"number\">0</span> &amp;&amp; index &lt; length; index += dir) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (predicate(array[index], index, array)) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> index;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">_.findIndex = createPredicateIndexFinder(<span class=\"number\">1</span>);</span><br><span class=\"line\">_.findLastIndex = createPredicateIndexFinder(<span class=\"number\">-1</span>);</span><br></pre></td></tr></table></figure>\n<p>实现很简单，和前面讲的一样，这里也是使用闭包的方法，通过判断 dir 来确定是正向查找还是反向查找。  </p>\n<p>然后是 indexOf() 和 lastIndexOf() 方法。  </p>\n<h3 id=\"createIndexFinder\"><a href=\"#createIndexFinder\" class=\"headerlink\" title=\"createIndexFinder\"></a>createIndexFinder</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createIndexFinder</span>(<span class=\"params\">dir, predicate, sortedIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, item, idx</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</span><br><span class=\"line\">          length = array.length;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果 idx 为数字，则从 idx 指定处开始查找</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.isNumber(idx)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dir &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          i = idx &gt;= <span class=\"number\">0</span> ? idx : <span class=\"built_in\">Math</span>.max(idx + length, i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          length = idx &gt;= <span class=\"number\">0</span> ? <span class=\"built_in\">Math</span>.min(idx + <span class=\"number\">1</span>, length) : idx + length + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(sortedIndex &amp;&amp; idx &amp;&amp; length) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果 idx 为 true，则说明使用二分查找法</span></span><br><span class=\"line\">        idx = sortedIndex(array, item);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array[idx] === item ? idx : <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// NaN 的情况</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(item !== item) &#123;</span><br><span class=\"line\">        idx = predicate(slice.call(array, i, length), _.isNaN);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idx &gt; <span class=\"number\">0</span> ? idx + i : <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (idx = dir &gt; <span class=\"number\">0</span> ? i : length - <span class=\"number\">1</span>; idx &gt;= <span class=\"number\">0</span> &amp;&amp; idx &lt; length; idx += dir) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (array[idx] === item) <span class=\"keyword\">return</span> idx;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">_.indexOf = createIndexFinder(<span class=\"number\">1</span>, _.findIndex, _.sortedIndex);</span><br><span class=\"line\">_.lastIndexOf = createIndexFinder(<span class=\"number\">-1</span>, _.findLastIndex);</span><br></pre></td></tr></table></figure>\n<p>看 idx 这个参数，当 idx 为 number 类时，表示从指定位置开始查找。当 idx 为 true 时，表示数组已排序，可使用 <code>_.sortedIndex</code> 方法，即二分查找法。然后当 item 为 NaN 时，使用 findIndex 特判一下有没有 NaN  </p>\n<p>这几个方法不是太难懂，但设计的挺巧妙地，这篇比较水，主要是源码写得好。 </p>\n"},{"layout":"post","title":"underscore.js 源码之 比较两个数相等","date":"2017-06-07T05:24:00.000Z","_content":"\n继续上一篇讲的 underscore.js 判断工具，还剩下 `_.isEqual()` 方法没讲。  \n`_.isEqual()` 方法是用来判断两个数「相同」。此时问题来了，相同的定义是什么？是 === 吗，如果仅是这样，那就没有必要写这个函数了。  \n举个例子，`1 === new Number(1)` 返回的是 false ，而 `isEqual()` 方法判定位相等，因为他们都是 `[object Number]` 类型。  \n在比如 `[1] === [1]`，在 JS 中也返回 false，这就很没道理不是，在 `isEqual()` 函数中会对数组进行遍历，比较数组每个数是否相同。 \n在看代码之前，先来复习一下 JS 比较的一些概念。  \n\n### JS 的 相等与全等  \n\n相等(==) —> 先转换后比较，全等(===) —> 不转换直接和比较。  \n在进行转换类型中，有如下规则：\n\n1. true -> 1, false -> 0\n2. 如果是字符串和数值比较，先将字符串转为数组\n3. 如果操作数是对象，则使用 valueOf() 方法转为基本类型在进行判断\n4. null == undefined\n5. NaN != NaN\n\n而全等则不进行比较，比如 1 与 new Number(1)。`typeof 1 = Number` ，`typeof new Number(1) = object`。所以二者是不相等的。\n\n`isEqual()` 方法则是在「全等」的基础上，在添加了一些规则，比如数组和对象的判断，类型相等根据 `toString()` 方法来判断等。  \n\n### +0，+a 和 ''+a\n\n##### +0 === -0\n\n在 JS 中 `+0 === -0 -> true`。而在 isEqual 中则判定为 false  \n至于原因，我想应该是 `1/0 = Infinity, 1/-0 = -Infinity` 吧。  \n\n##### +a 与 ''+a\n\n`+a` 意思是将变量转为数字，`''+a` 则是转为字符串\n\n知道了这些 isEqual() 前半部分的代码就很清晰了      \n\n```js\n// a 与 b 是否全等，若 a === 0 则需要判断 +0 -0;\nif (a === b) return a !== 0 || 1 / a === 1 / b;\n// 如果其中有一个是 null，全等判断\nif (a === null || b === null) return a === b;\n\nvar type = toString.call(a);\n// 如果 toString() 类型不相等判定为 false\nif (type !== toString.call(b)) return false;\n  \nswitch (type) {\n  // 如果是 RegExp 和 String 属性，都可以比较字符串是否相等\n  case '[object RegExp]' :\n  case '[object String]' :\n    return '' + a === '' + b;\n\n  // number 类型要考虑 +0 === -0 这种情况\n  case '[object number]' :\n    \n    if (+a !== +a) return +b !== +b;\n    \n    return +a === 0 ? 1 / +a === 1 / +b : +a === +b;\n\n  // Date 和 Boolean 类型转为数字判断\n  case '[object Date]' :\n  case '[object Boolean]' :\n    return +a === +b;\n\n}\n```\n\n接下来，就是函数数组的判断\n\n### 函数判断  \n\n```js\nvar isArray = toString.call(a);\n\nif (!isArray) {\n    \n    if (typeof a !== 'object' || typeof b !== 'object')\n        return false;\n    // 到这部之前排除非 object 对象\n\n    var aCtor = a.constructor, bCtor = b.constructor;\n    // 判断是否是同一个 constructor\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n            _.isFunction(bCtor) && bCtor instanceof bCtor)\n            && ('constructor' in a && 'constructor' in b)) {\n        return false;\n    }\n}\n```\n\n\n### 数组与对象的判断  \n\n数组和对象由于存在多重嵌套，最好的方法就是使用回调函数  \n\n我们在调用函数时，`_.isEqual(a,b)` 传入两个要比较的函数。而函数实际上定义了 4 个形参 `function(a, b, aStack, bStack)`; 后两个函数在回调时会被添加，用于线性搜索？这里我也不是恨懂  \n\n```js\naStack = aStack || [];\nbStack = bStack || [];\nvar length = aStack.length;\nwhile (length--) {\n  // Linear search. Performance is inversely proportional to the number of\n  // unique nested structures.\n  if (aStack[length] === a) return bStack[length] === b;\n}\n\n// Add the first object to the stack of traversed objects.\naStack.push(a);\nbStack.push(b);\n```\n\n这里不是看得恨懂，不清楚什么结构会调用 while 里面的语句，aStack 储存的是所有的数组元素。先继续往下看  \n\n```js\n// 数组\nif (isArray) {\n    length = a.length;\n\n    if (length !== b.length) return false;\n\n    while (length--) {\n        // 回调，深遍历。同时也传入 aStack 与 bStack\n        if(!_.isEqual(a[length], b[length], aStack, bStack))\n            return false;\n    }\n} else {\n    // 对象，同上面数组\n    // _.keys 是 underscore 方法，用于储存对象 key 值，返回一个数组\n    var keys = _.keys(a), key;\n    length = keys.length;\n\n    if (length !== _.keys(b).length) return false;\n\n    while (length--) {\n        key = keys.length;\n\n        if (!(_.has(b, key) && _.isEqual(a[key], b[key], aStack, bStack)))\n            return false;\n    }\n}\n\nreturn true;\n```\n\n整个代码思想也很好理解，如果是数组，则采用回调传入 a[length] 和 b[length] 进行遍历比较，如果都符合则一路通过，最后输出 true。  \n唯一难理解的是 传入的 aStack ` if (aStack[length] === a) return bStack[length] === b; ` 不知道什么样的数组结构才会进行此判断。\n\nThat's all ，underscore源码 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1094-L1190\" target=\"_blank\">这里</a>","source":"_posts/underscore-read-02-judgment-equal.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 比较两个数相等\"\ndate:       2017-06-07 13:24:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n继续上一篇讲的 underscore.js 判断工具，还剩下 `_.isEqual()` 方法没讲。  \n`_.isEqual()` 方法是用来判断两个数「相同」。此时问题来了，相同的定义是什么？是 === 吗，如果仅是这样，那就没有必要写这个函数了。  \n举个例子，`1 === new Number(1)` 返回的是 false ，而 `isEqual()` 方法判定位相等，因为他们都是 `[object Number]` 类型。  \n在比如 `[1] === [1]`，在 JS 中也返回 false，这就很没道理不是，在 `isEqual()` 函数中会对数组进行遍历，比较数组每个数是否相同。 \n在看代码之前，先来复习一下 JS 比较的一些概念。  \n\n### JS 的 相等与全等  \n\n相等(==) —> 先转换后比较，全等(===) —> 不转换直接和比较。  \n在进行转换类型中，有如下规则：\n\n1. true -> 1, false -> 0\n2. 如果是字符串和数值比较，先将字符串转为数组\n3. 如果操作数是对象，则使用 valueOf() 方法转为基本类型在进行判断\n4. null == undefined\n5. NaN != NaN\n\n而全等则不进行比较，比如 1 与 new Number(1)。`typeof 1 = Number` ，`typeof new Number(1) = object`。所以二者是不相等的。\n\n`isEqual()` 方法则是在「全等」的基础上，在添加了一些规则，比如数组和对象的判断，类型相等根据 `toString()` 方法来判断等。  \n\n### +0，+a 和 ''+a\n\n##### +0 === -0\n\n在 JS 中 `+0 === -0 -> true`。而在 isEqual 中则判定为 false  \n至于原因，我想应该是 `1/0 = Infinity, 1/-0 = -Infinity` 吧。  \n\n##### +a 与 ''+a\n\n`+a` 意思是将变量转为数字，`''+a` 则是转为字符串\n\n知道了这些 isEqual() 前半部分的代码就很清晰了      \n\n```js\n// a 与 b 是否全等，若 a === 0 则需要判断 +0 -0;\nif (a === b) return a !== 0 || 1 / a === 1 / b;\n// 如果其中有一个是 null，全等判断\nif (a === null || b === null) return a === b;\n\nvar type = toString.call(a);\n// 如果 toString() 类型不相等判定为 false\nif (type !== toString.call(b)) return false;\n  \nswitch (type) {\n  // 如果是 RegExp 和 String 属性，都可以比较字符串是否相等\n  case '[object RegExp]' :\n  case '[object String]' :\n    return '' + a === '' + b;\n\n  // number 类型要考虑 +0 === -0 这种情况\n  case '[object number]' :\n    \n    if (+a !== +a) return +b !== +b;\n    \n    return +a === 0 ? 1 / +a === 1 / +b : +a === +b;\n\n  // Date 和 Boolean 类型转为数字判断\n  case '[object Date]' :\n  case '[object Boolean]' :\n    return +a === +b;\n\n}\n```\n\n接下来，就是函数数组的判断\n\n### 函数判断  \n\n```js\nvar isArray = toString.call(a);\n\nif (!isArray) {\n    \n    if (typeof a !== 'object' || typeof b !== 'object')\n        return false;\n    // 到这部之前排除非 object 对象\n\n    var aCtor = a.constructor, bCtor = b.constructor;\n    // 判断是否是同一个 constructor\n    if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\n            _.isFunction(bCtor) && bCtor instanceof bCtor)\n            && ('constructor' in a && 'constructor' in b)) {\n        return false;\n    }\n}\n```\n\n\n### 数组与对象的判断  \n\n数组和对象由于存在多重嵌套，最好的方法就是使用回调函数  \n\n我们在调用函数时，`_.isEqual(a,b)` 传入两个要比较的函数。而函数实际上定义了 4 个形参 `function(a, b, aStack, bStack)`; 后两个函数在回调时会被添加，用于线性搜索？这里我也不是恨懂  \n\n```js\naStack = aStack || [];\nbStack = bStack || [];\nvar length = aStack.length;\nwhile (length--) {\n  // Linear search. Performance is inversely proportional to the number of\n  // unique nested structures.\n  if (aStack[length] === a) return bStack[length] === b;\n}\n\n// Add the first object to the stack of traversed objects.\naStack.push(a);\nbStack.push(b);\n```\n\n这里不是看得恨懂，不清楚什么结构会调用 while 里面的语句，aStack 储存的是所有的数组元素。先继续往下看  \n\n```js\n// 数组\nif (isArray) {\n    length = a.length;\n\n    if (length !== b.length) return false;\n\n    while (length--) {\n        // 回调，深遍历。同时也传入 aStack 与 bStack\n        if(!_.isEqual(a[length], b[length], aStack, bStack))\n            return false;\n    }\n} else {\n    // 对象，同上面数组\n    // _.keys 是 underscore 方法，用于储存对象 key 值，返回一个数组\n    var keys = _.keys(a), key;\n    length = keys.length;\n\n    if (length !== _.keys(b).length) return false;\n\n    while (length--) {\n        key = keys.length;\n\n        if (!(_.has(b, key) && _.isEqual(a[key], b[key], aStack, bStack)))\n            return false;\n    }\n}\n\nreturn true;\n```\n\n整个代码思想也很好理解，如果是数组，则采用回调传入 a[length] 和 b[length] 进行遍历比较，如果都符合则一路通过，最后输出 true。  \n唯一难理解的是 传入的 aStack ` if (aStack[length] === a) return bStack[length] === b; ` 不知道什么样的数组结构才会进行此判断。\n\nThat's all ，underscore源码 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1094-L1190\" target=\"_blank\">这里</a>","slug":"underscore-read-02-judgment-equal","published":1,"updated":"2018-05-09T08:50:31.135Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41k00242mhs1i8m8h7y","content":"<p>继续上一篇讲的 underscore.js 判断工具，还剩下 <code>_.isEqual()</code> 方法没讲。<br><code>_.isEqual()</code> 方法是用来判断两个数「相同」。此时问题来了，相同的定义是什么？是 === 吗，如果仅是这样，那就没有必要写这个函数了。<br>举个例子，<code>1 === new Number(1)</code> 返回的是 false ，而 <code>isEqual()</code> 方法判定位相等，因为他们都是 <code>[object Number]</code> 类型。<br>在比如 <code>[1] === [1]</code>，在 JS 中也返回 false，这就很没道理不是，在 <code>isEqual()</code> 函数中会对数组进行遍历，比较数组每个数是否相同。<br>在看代码之前，先来复习一下 JS 比较的一些概念。  </p>\n<h3 id=\"JS-的-相等与全等\"><a href=\"#JS-的-相等与全等\" class=\"headerlink\" title=\"JS 的 相等与全等\"></a>JS 的 相等与全等</h3><p>相等(==) —&gt; 先转换后比较，全等(===) —&gt; 不转换直接和比较。<br>在进行转换类型中，有如下规则：</p>\n<ol>\n<li>true -&gt; 1, false -&gt; 0</li>\n<li>如果是字符串和数值比较，先将字符串转为数组</li>\n<li>如果操作数是对象，则使用 valueOf() 方法转为基本类型在进行判断</li>\n<li>null == undefined</li>\n<li>NaN != NaN</li>\n</ol>\n<p>而全等则不进行比较，比如 1 与 new Number(1)。<code>typeof 1 = Number</code> ，<code>typeof new Number(1) = object</code>。所以二者是不相等的。</p>\n<p><code>isEqual()</code> 方法则是在「全等」的基础上，在添加了一些规则，比如数组和对象的判断，类型相等根据 <code>toString()</code> 方法来判断等。  </p>\n<h3 id=\"0，-a-和-‘’-a\"><a href=\"#0，-a-和-‘’-a\" class=\"headerlink\" title=\"+0，+a 和 ‘’+a\"></a>+0，+a 和 ‘’+a</h3><h5 id=\"0-0\"><a href=\"#0-0\" class=\"headerlink\" title=\"+0 === -0\"></a>+0 === -0</h5><p>在 JS 中 <code>+0 === -0 -&gt; true</code>。而在 isEqual 中则判定为 false<br>至于原因，我想应该是 <code>1/0 = Infinity, 1/-0 = -Infinity</code> 吧。  </p>\n<h5 id=\"a-与-‘’-a\"><a href=\"#a-与-‘’-a\" class=\"headerlink\" title=\"+a 与 ‘’+a\"></a>+a 与 ‘’+a</h5><p><code>+a</code> 意思是将变量转为数字，<code>&#39;&#39;+a</code> 则是转为字符串</p>\n<p>知道了这些 isEqual() 前半部分的代码就很清晰了      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 与 b 是否全等，若 a === 0 则需要判断 +0 -0;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\"><span class=\"comment\">// 如果其中有一个是 null，全等判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"literal\">null</span> || b === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> type = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 如果 toString() 类型不相等判定为 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是 RegExp 和 String 属性，都可以比较字符串是否相等</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span> :</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// number 类型要考虑 +0 === -0 这种情况</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object number]'</span> :</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / +b : +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Date 和 Boolean 类型转为数字判断</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span> :</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，就是函数数组的判断</p>\n<h3 id=\"函数判断\"><a href=\"#函数判断\" class=\"headerlink\" title=\"函数判断\"></a>函数判断</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = toString.call(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isArray) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 到这部之前排除非 object 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是同一个 constructor</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">            _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor)</span><br><span class=\"line\">            &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组与对象的判断\"><a href=\"#数组与对象的判断\" class=\"headerlink\" title=\"数组与对象的判断\"></a>数组与对象的判断</h3><p>数组和对象由于存在多重嵌套，最好的方法就是使用回调函数  </p>\n<p>我们在调用函数时，<code>_.isEqual(a,b)</code> 传入两个要比较的函数。而函数实际上定义了 4 个形参 <code>function(a, b, aStack, bStack)</code>; 后两个函数在回调时会被添加，用于线性搜索？这里我也不是恨懂  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aStack = aStack || [];</span><br><span class=\"line\">bStack = bStack || [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">  <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>这里不是看得恨懂，不清楚什么结构会调用 while 里面的语句，aStack 储存的是所有的数组元素。先继续往下看  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isArray) &#123;</span><br><span class=\"line\">    length = a.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 回调，深遍历。同时也传入 aStack 与 bStack</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_.isEqual(a[length], b[length], aStack, bStack))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象，同上面数组</span></span><br><span class=\"line\">    <span class=\"comment\">// _.keys 是 underscore 方法，用于储存对象 key 值，返回一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">    length = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== _.keys(b).length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        key = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; _.isEqual(a[key], b[key], aStack, bStack)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>整个代码思想也很好理解，如果是数组，则采用回调传入 a[length] 和 b[length] 进行遍历比较，如果都符合则一路通过，最后输出 true。<br>唯一难理解的是 传入的 aStack <code>if (aStack[length] === a) return bStack[length] === b;</code> 不知道什么样的数组结构才会进行此判断。</p>\n<p>That’s all ，underscore源码 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1094-L1190\" target=\"_blank\">这里</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>继续上一篇讲的 underscore.js 判断工具，还剩下 <code>_.isEqual()</code> 方法没讲。<br><code>_.isEqual()</code> 方法是用来判断两个数「相同」。此时问题来了，相同的定义是什么？是 === 吗，如果仅是这样，那就没有必要写这个函数了。<br>举个例子，<code>1 === new Number(1)</code> 返回的是 false ，而 <code>isEqual()</code> 方法判定位相等，因为他们都是 <code>[object Number]</code> 类型。<br>在比如 <code>[1] === [1]</code>，在 JS 中也返回 false，这就很没道理不是，在 <code>isEqual()</code> 函数中会对数组进行遍历，比较数组每个数是否相同。<br>在看代码之前，先来复习一下 JS 比较的一些概念。  </p>\n<h3 id=\"JS-的-相等与全等\"><a href=\"#JS-的-相等与全等\" class=\"headerlink\" title=\"JS 的 相等与全等\"></a>JS 的 相等与全等</h3><p>相等(==) —&gt; 先转换后比较，全等(===) —&gt; 不转换直接和比较。<br>在进行转换类型中，有如下规则：</p>\n<ol>\n<li>true -&gt; 1, false -&gt; 0</li>\n<li>如果是字符串和数值比较，先将字符串转为数组</li>\n<li>如果操作数是对象，则使用 valueOf() 方法转为基本类型在进行判断</li>\n<li>null == undefined</li>\n<li>NaN != NaN</li>\n</ol>\n<p>而全等则不进行比较，比如 1 与 new Number(1)。<code>typeof 1 = Number</code> ，<code>typeof new Number(1) = object</code>。所以二者是不相等的。</p>\n<p><code>isEqual()</code> 方法则是在「全等」的基础上，在添加了一些规则，比如数组和对象的判断，类型相等根据 <code>toString()</code> 方法来判断等。  </p>\n<h3 id=\"0，-a-和-‘’-a\"><a href=\"#0，-a-和-‘’-a\" class=\"headerlink\" title=\"+0，+a 和 ‘’+a\"></a>+0，+a 和 ‘’+a</h3><h5 id=\"0-0\"><a href=\"#0-0\" class=\"headerlink\" title=\"+0 === -0\"></a>+0 === -0</h5><p>在 JS 中 <code>+0 === -0 -&gt; true</code>。而在 isEqual 中则判定为 false<br>至于原因，我想应该是 <code>1/0 = Infinity, 1/-0 = -Infinity</code> 吧。  </p>\n<h5 id=\"a-与-‘’-a\"><a href=\"#a-与-‘’-a\" class=\"headerlink\" title=\"+a 与 ‘’+a\"></a>+a 与 ‘’+a</h5><p><code>+a</code> 意思是将变量转为数字，<code>&#39;&#39;+a</code> 则是转为字符串</p>\n<p>知道了这些 isEqual() 前半部分的代码就很清晰了      </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a 与 b 是否全等，若 a === 0 则需要判断 +0 -0;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === b) <span class=\"keyword\">return</span> a !== <span class=\"number\">0</span> || <span class=\"number\">1</span> / a === <span class=\"number\">1</span> / b;</span><br><span class=\"line\"><span class=\"comment\">// 如果其中有一个是 null，全等判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (a === <span class=\"literal\">null</span> || b === <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> a === b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> type = toString.call(a);</span><br><span class=\"line\"><span class=\"comment\">// 如果 toString() 类型不相等判定为 false</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (type !== toString.call(b)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果是 RegExp 和 String 属性，都可以比较字符串是否相等</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object RegExp]'</span> :</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object String]'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">''</span> + a === <span class=\"string\">''</span> + b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// number 类型要考虑 +0 === -0 这种情况</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object number]'</span> :</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (+a !== +a) <span class=\"keyword\">return</span> +b !== +b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === <span class=\"number\">0</span> ? <span class=\"number\">1</span> / +a === <span class=\"number\">1</span> / +b : +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Date 和 Boolean 类型转为数字判断</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Date]'</span> :</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'[object Boolean]'</span> :</span><br><span class=\"line\">    <span class=\"keyword\">return</span> +a === +b;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来，就是函数数组的判断</p>\n<h3 id=\"函数判断\"><a href=\"#函数判断\" class=\"headerlink\" title=\"函数判断\"></a>函数判断</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> isArray = toString.call(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isArray) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> a !== <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> b !== <span class=\"string\">'object'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 到这部之前排除非 object 对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aCtor = a.constructor, bCtor = b.constructor;</span><br><span class=\"line\">    <span class=\"comment\">// 判断是否是同一个 constructor</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (aCtor !== bCtor &amp;&amp; !(_.isFunction(aCtor) &amp;&amp; aCtor <span class=\"keyword\">instanceof</span> aCtor &amp;&amp;</span><br><span class=\"line\">            _.isFunction(bCtor) &amp;&amp; bCtor <span class=\"keyword\">instanceof</span> bCtor)</span><br><span class=\"line\">            &amp;&amp; (<span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> a &amp;&amp; <span class=\"string\">'constructor'</span> <span class=\"keyword\">in</span> b)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组与对象的判断\"><a href=\"#数组与对象的判断\" class=\"headerlink\" title=\"数组与对象的判断\"></a>数组与对象的判断</h3><p>数组和对象由于存在多重嵌套，最好的方法就是使用回调函数  </p>\n<p>我们在调用函数时，<code>_.isEqual(a,b)</code> 传入两个要比较的函数。而函数实际上定义了 4 个形参 <code>function(a, b, aStack, bStack)</code>; 后两个函数在回调时会被添加，用于线性搜索？这里我也不是恨懂  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aStack = aStack || [];</span><br><span class=\"line\">bStack = bStack || [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> length = aStack.length;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Linear search. Performance is inversely proportional to the number of</span></span><br><span class=\"line\">  <span class=\"comment\">// unique nested structures.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (aStack[length] === a) <span class=\"keyword\">return</span> bStack[length] === b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Add the first object to the stack of traversed objects.</span></span><br><span class=\"line\">aStack.push(a);</span><br><span class=\"line\">bStack.push(b);</span><br></pre></td></tr></table></figure>\n<p>这里不是看得恨懂，不清楚什么结构会调用 while 里面的语句，aStack 储存的是所有的数组元素。先继续往下看  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isArray) &#123;</span><br><span class=\"line\">    length = a.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== b.length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 回调，深遍历。同时也传入 aStack 与 bStack</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!_.isEqual(a[length], b[length], aStack, bStack))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象，同上面数组</span></span><br><span class=\"line\">    <span class=\"comment\">// _.keys 是 underscore 方法，用于储存对象 key 值，返回一个数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> keys = _.keys(a), key;</span><br><span class=\"line\">    length = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length !== _.keys(b).length) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (length--) &#123;</span><br><span class=\"line\">        key = keys.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(_.has(b, key) &amp;&amp; _.isEqual(a[key], b[key], aStack, bStack)))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n<p>整个代码思想也很好理解，如果是数组，则采用回调传入 a[length] 和 b[length] 进行遍历比较，如果都符合则一路通过，最后输出 true。<br>唯一难理解的是 传入的 aStack <code>if (aStack[length] === a) return bStack[length] === b;</code> 不知道什么样的数组结构才会进行此判断。</p>\n<p>That’s all ，underscore源码 <a href=\"https://github.com/hanzichi/underscore-analysis/blob/master/underscore-1.8.3.js/src/underscore-1.8.3.js#L1094-L1190\" target=\"_blank\">这里</a></p>\n"},{"layout":"post","title":"underscore.js 源码之 optimizeCb cb 和 sortedIndex","date":"2017-06-09T04:24:00.000Z","_content":"\n数组部分的代码要从哪开始写，我纠结了很久。数组部分用到了大量别的部分的方法，在讲数组部分的核心代码实现时，免不得要写把那些常用的工具代码先弄懂。  \n我思前想后，打算先从 optimizeCb 和 cb 这两个函数入手。而 sortedIndex(二分查找) 恰恰用到了 cb 函数的大部分功能，所以感觉放在一起看的话会比较容易理解。  \n\n### optimizeCb\n\n首先先看这段代码的注释：\n>Internal function that returns an efficient (for current engines) version of the passed-in callback, to be repeatedly applied in other Underscore functions.\n\n这是个用于优化回调的函数，代码如下  \n\n```js\nvar optimizeCb = function(func, context, argCount) {\n    // 如果没有传入指定函数上下文，直接返回函数本身\n    if (context === void 0)\n      return func;\n\n    // 提前确定传入函数的数量(argCount)\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    // 被优化的是 apply\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n```\n\n这段函数不难看懂，但不结合具体函数分析，初学者(我)刚看时会有点懵逼，不知道这是在干嘛。  \n其实 optimizeCb 就是用来绑定 this，和传入参数，最简单的方法就是使用 `fun.apply(this,arguments);` 但是由于 apply 会对传入的数组(arguments) 进行一系列的检验和拷贝，所以性能上不如 call。  \noptimizeCb 方法首先会根据 argCount 个数来确定传入参数的个数，用 switch 循环来来尽量使用指定参数而不用 arguments。当然已现在的环境来看，已经没什么必要手动写这类优化了，了解一下这个函数的作用就好。<a href=\"https://github.com/jianjiade/javascript-frame-lib-analyse/issues/4\" target=\"_blank\">关于underscore.js中optimizeCb函数中是否需要switch的问题的解答</a>   \n\n### sortedIndex\n\n本来是要先看 cb 这个函数的，但我觉得，在不知道这函数的使用场景下，看这函数，想了解他的意图是很困难的，庆幸的是。sortedIndex 就使用了 cb 函数的大部分功能。所以我们先看 sortedIndex。\n\n`_.sortedIndex(array, obj, [iteratee], [context])` 使用二分查找确定 obj 在 array 中的位置序号，obj 按此序号插入能保持 array 原有的排序，例如 `_.sortedIndex([1,2,3,4,5],3.5)` 就在 3 与 4 中插入 3.5 返回 3.5 的位置 3  \n\n```js\n_.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    \n    // 二分法\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value)\n        low = mid + 1;\n      else\n        high = mid;\n    }\n\n    return low;\n};\n```\n\n代码很简单，根据 iteratee 作为 array 排序的依据，包括传递的 obj。通过对比 `iteratee(array[mid])` 与 `iteratee(obj)` 来查找 obj 所在的位置。  \n现在问题来了 `iteratee = cb(iteratee, context, 1);` 这行代码执行了什么功能。\n\n### cb\n\n注释如下：\n>A mostly-internal function to generate callbacks that can be applied to each element in a collection, returning the desired result — either identity, an arbitrary callback, a property matcher, or a property accessor.  \n\n大致的意思就是根据传入的参数不同返回不同的函数。我们来看下代码  \n\n```js\nvar cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n};\n```\n\n其中 value 传入函数，对象，字符串或不传入都会调用不同的方法。  \n我们在回过头来，看看 `_.sortedIndex()`  \n\n##### value == null\n\n当只传入 array 与 obj 时，iteratee 为空， `cb()` 判断 `value == null` 返回了一个 `_.identity` 方法。  \n\n```js\n_.identity = function(value) {\n    return value;\n};\n```\n\n代码很简单，就是返回传入的 value 值。  \n\n此时的 iteratee 就返回了一个函数  \n\n```js\niteratee = function(value) {\n    return value;\n}\n```\n\n所以 `iteratee(obj)` 和 `iteartee(array[mid])` 都是返回本身，直接进行比较。  \n\n```js\n_.sortedIndex([1,2,3,4,5],3)    // 2\n```\n\n###### _.isFunction(value)\n\n如果 value 是函数，则返回 `optimizeCb(value, context, argCount);` 此时的 `argCount = 1`。举个例子  \n\n```js\n_.sortedIndex([2,4,6,8,10], 3, function(num) {return num / 2 })  // 1\n```\n\n此时 iteratee 就是一个函数，array 就变成了 [1,2,3,4,5], obj 就变成了 1，在对其进行二分查找。  \n\n##### _.property(value);\n\n若 value 不是函数，空值和对象，则返回一个 `_.property(value)` 方法\n\n```js\n_.property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    }\n};\n```\n\n照样拿 sortedIndex 举例  \n\n```js\nvar stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];\n_.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');    // 1\n```\n\niteratee 返回一个函数，这个函数则返回任何传入对象的 key(即'age') 属性  \n`value = iteratee(obj) = 50`， `iteratee(stooges(i))` 则分别返回 40 和 60 。然后在进行二分查找\n\n--- \n\n最后还剩下一个 value 为对象的情况，也是大同小异，由于 sortedIndex 不太适合传入对象，就不在赘述。可以根据源码追查一下 `_.isMatch()` 方法的作用。\n","source":"_posts/underscore-read-04-optimizeCb-cb-sortedIndex.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 optimizeCb cb 和 sortedIndex\"\ndate:       2017-06-09 12:24:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n数组部分的代码要从哪开始写，我纠结了很久。数组部分用到了大量别的部分的方法，在讲数组部分的核心代码实现时，免不得要写把那些常用的工具代码先弄懂。  \n我思前想后，打算先从 optimizeCb 和 cb 这两个函数入手。而 sortedIndex(二分查找) 恰恰用到了 cb 函数的大部分功能，所以感觉放在一起看的话会比较容易理解。  \n\n### optimizeCb\n\n首先先看这段代码的注释：\n>Internal function that returns an efficient (for current engines) version of the passed-in callback, to be repeatedly applied in other Underscore functions.\n\n这是个用于优化回调的函数，代码如下  \n\n```js\nvar optimizeCb = function(func, context, argCount) {\n    // 如果没有传入指定函数上下文，直接返回函数本身\n    if (context === void 0)\n      return func;\n\n    // 提前确定传入函数的数量(argCount)\n    switch (argCount == null ? 3 : argCount) {\n      case 1: return function(value) {\n        return func.call(context, value);\n      };\n      case 2: return function(value, other) {\n        return func.call(context, value, other);\n      };\n      case 3: return function(value, index, collection) {\n        return func.call(context, value, index, collection);\n      };\n      case 4: return function(accumulator, value, index, collection) {\n        return func.call(context, accumulator, value, index, collection);\n      };\n    }\n    // 被优化的是 apply\n    return function() {\n      return func.apply(context, arguments);\n    };\n  };\n```\n\n这段函数不难看懂，但不结合具体函数分析，初学者(我)刚看时会有点懵逼，不知道这是在干嘛。  \n其实 optimizeCb 就是用来绑定 this，和传入参数，最简单的方法就是使用 `fun.apply(this,arguments);` 但是由于 apply 会对传入的数组(arguments) 进行一系列的检验和拷贝，所以性能上不如 call。  \noptimizeCb 方法首先会根据 argCount 个数来确定传入参数的个数，用 switch 循环来来尽量使用指定参数而不用 arguments。当然已现在的环境来看，已经没什么必要手动写这类优化了，了解一下这个函数的作用就好。<a href=\"https://github.com/jianjiade/javascript-frame-lib-analyse/issues/4\" target=\"_blank\">关于underscore.js中optimizeCb函数中是否需要switch的问题的解答</a>   \n\n### sortedIndex\n\n本来是要先看 cb 这个函数的，但我觉得，在不知道这函数的使用场景下，看这函数，想了解他的意图是很困难的，庆幸的是。sortedIndex 就使用了 cb 函数的大部分功能。所以我们先看 sortedIndex。\n\n`_.sortedIndex(array, obj, [iteratee], [context])` 使用二分查找确定 obj 在 array 中的位置序号，obj 按此序号插入能保持 array 原有的排序，例如 `_.sortedIndex([1,2,3,4,5],3.5)` 就在 3 与 4 中插入 3.5 返回 3.5 的位置 3  \n\n```js\n_.sortedIndex = function(array, obj, iteratee, context) {\n    iteratee = cb(iteratee, context, 1);\n    var value = iteratee(obj);\n    var low = 0, high = getLength(array);\n    \n    // 二分法\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n      if (iteratee(array[mid]) < value)\n        low = mid + 1;\n      else\n        high = mid;\n    }\n\n    return low;\n};\n```\n\n代码很简单，根据 iteratee 作为 array 排序的依据，包括传递的 obj。通过对比 `iteratee(array[mid])` 与 `iteratee(obj)` 来查找 obj 所在的位置。  \n现在问题来了 `iteratee = cb(iteratee, context, 1);` 这行代码执行了什么功能。\n\n### cb\n\n注释如下：\n>A mostly-internal function to generate callbacks that can be applied to each element in a collection, returning the desired result — either identity, an arbitrary callback, a property matcher, or a property accessor.  \n\n大致的意思就是根据传入的参数不同返回不同的函数。我们来看下代码  \n\n```js\nvar cb = function(value, context, argCount) {\n    if (value == null) return _.identity;\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\n    if (_.isObject(value)) return _.matcher(value);\n    return _.property(value);\n};\n```\n\n其中 value 传入函数，对象，字符串或不传入都会调用不同的方法。  \n我们在回过头来，看看 `_.sortedIndex()`  \n\n##### value == null\n\n当只传入 array 与 obj 时，iteratee 为空， `cb()` 判断 `value == null` 返回了一个 `_.identity` 方法。  \n\n```js\n_.identity = function(value) {\n    return value;\n};\n```\n\n代码很简单，就是返回传入的 value 值。  \n\n此时的 iteratee 就返回了一个函数  \n\n```js\niteratee = function(value) {\n    return value;\n}\n```\n\n所以 `iteratee(obj)` 和 `iteartee(array[mid])` 都是返回本身，直接进行比较。  \n\n```js\n_.sortedIndex([1,2,3,4,5],3)    // 2\n```\n\n###### _.isFunction(value)\n\n如果 value 是函数，则返回 `optimizeCb(value, context, argCount);` 此时的 `argCount = 1`。举个例子  \n\n```js\n_.sortedIndex([2,4,6,8,10], 3, function(num) {return num / 2 })  // 1\n```\n\n此时 iteratee 就是一个函数，array 就变成了 [1,2,3,4,5], obj 就变成了 1，在对其进行二分查找。  \n\n##### _.property(value);\n\n若 value 不是函数，空值和对象，则返回一个 `_.property(value)` 方法\n\n```js\n_.property = function(key) {\n    return function(obj) {\n      return obj == null ? void 0 : obj[key];\n    }\n};\n```\n\n照样拿 sortedIndex 举例  \n\n```js\nvar stooges = [{name: 'moe', age: 40}, {name: 'curly', age: 60}];\n_.sortedIndex(stooges, {name: 'larry', age: 50}, 'age');    // 1\n```\n\niteratee 返回一个函数，这个函数则返回任何传入对象的 key(即'age') 属性  \n`value = iteratee(obj) = 50`， `iteratee(stooges(i))` 则分别返回 40 和 60 。然后在进行二分查找\n\n--- \n\n最后还剩下一个 value 为对象的情况，也是大同小异，由于 sortedIndex 不太适合传入对象，就不在赘述。可以根据源码追查一下 `_.isMatch()` 方法的作用。\n","slug":"underscore-read-04-optimizeCb-cb-sortedIndex","published":1,"updated":"2018-05-09T08:56:29.027Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41l00272mhsyn2h8yjp","content":"<p>数组部分的代码要从哪开始写，我纠结了很久。数组部分用到了大量别的部分的方法，在讲数组部分的核心代码实现时，免不得要写把那些常用的工具代码先弄懂。<br>我思前想后，打算先从 optimizeCb 和 cb 这两个函数入手。而 sortedIndex(二分查找) 恰恰用到了 cb 函数的大部分功能，所以感觉放在一起看的话会比较容易理解。  </p>\n<h3 id=\"optimizeCb\"><a href=\"#optimizeCb\" class=\"headerlink\" title=\"optimizeCb\"></a>optimizeCb</h3><p>首先先看这段代码的注释：</p>\n<blockquote>\n<p>Internal function that returns an efficient (for current engines) version of the passed-in callback, to be repeatedly applied in other Underscore functions.</p>\n</blockquote>\n<p>这是个用于优化回调的函数，代码如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有传入指定函数上下文，直接返回函数本身</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提前确定传入函数的数量(argCount)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 被优化的是 apply</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这段函数不难看懂，但不结合具体函数分析，初学者(我)刚看时会有点懵逼，不知道这是在干嘛。<br>其实 optimizeCb 就是用来绑定 this，和传入参数，最简单的方法就是使用 <code>fun.apply(this,arguments);</code> 但是由于 apply 会对传入的数组(arguments) 进行一系列的检验和拷贝，所以性能上不如 call。<br>optimizeCb 方法首先会根据 argCount 个数来确定传入参数的个数，用 switch 循环来来尽量使用指定参数而不用 arguments。当然已现在的环境来看，已经没什么必要手动写这类优化了，了解一下这个函数的作用就好。<a href=\"https://github.com/jianjiade/javascript-frame-lib-analyse/issues/4\" target=\"_blank\">关于underscore.js中optimizeCb函数中是否需要switch的问题的解答</a>   </p>\n<h3 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a>sortedIndex</h3><p>本来是要先看 cb 这个函数的，但我觉得，在不知道这函数的使用场景下，看这函数，想了解他的意图是很困难的，庆幸的是。sortedIndex 就使用了 cb 函数的大部分功能。所以我们先看 sortedIndex。</p>\n<p><code>_.sortedIndex(array, obj, [iteratee], [context])</code> 使用二分查找确定 obj 在 array 中的位置序号，obj 按此序号插入能保持 array 原有的排序，例如 <code>_.sortedIndex([1,2,3,4,5],3.5)</code> 就在 3 与 4 中插入 3.5 返回 3.5 的位置 3  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = iteratee(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = getLength(array);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 二分法</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iteratee(array[mid]) &lt; value)</span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        high = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码很简单，根据 iteratee 作为 array 排序的依据，包括传递的 obj。通过对比 <code>iteratee(array[mid])</code> 与 <code>iteratee(obj)</code> 来查找 obj 所在的位置。<br>现在问题来了 <code>iteratee = cb(iteratee, context, 1);</code> 这行代码执行了什么功能。</p>\n<h3 id=\"cb\"><a href=\"#cb\" class=\"headerlink\" title=\"cb\"></a>cb</h3><p>注释如下：</p>\n<blockquote>\n<p>A mostly-internal function to generate callbacks that can be applied to each element in a collection, returning the desired result — either identity, an arbitrary callback, a property matcher, or a property accessor.  </p>\n</blockquote>\n<p>大致的意思就是根据传入的参数不同返回不同的函数。我们来看下代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 value 传入函数，对象，字符串或不传入都会调用不同的方法。<br>我们在回过头来，看看 <code>_.sortedIndex()</code>  </p>\n<h5 id=\"value-null\"><a href=\"#value-null\" class=\"headerlink\" title=\"value == null\"></a>value == null</h5><p>当只传入 array 与 obj 时，iteratee 为空， <code>cb()</code> 判断 <code>value == null</code> 返回了一个 <code>_.identity</code> 方法。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.identity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码很简单，就是返回传入的 value 值。  </p>\n<p>此时的 iteratee 就返回了一个函数  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以 <code>iteratee(obj)</code> 和 <code>iteartee(array[mid])</code> 都是返回本身，直接进行比较。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],<span class=\"number\">3</span>)    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"isFunction-value\"><a href=\"#isFunction-value\" class=\"headerlink\" title=\"_.isFunction(value)\"></a>_.isFunction(value)</h6><p>如果 value 是函数，则返回 <code>optimizeCb(value, context, argCount);</code> 此时的 <code>argCount = 1</code>。举个例子  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">3</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num / <span class=\"number\">2</span> &#125;)  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>此时 iteratee 就是一个函数，array 就变成了 [1,2,3,4,5], obj 就变成了 1，在对其进行二分查找。  </p>\n<h5 id=\"property-value\"><a href=\"#property-value\" class=\"headerlink\" title=\"_.property(value);\"></a>_.property(value);</h5><p>若 value 不是函数，空值和对象，则返回一个 <code>_.property(value)</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>照样拿 sortedIndex 举例  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.sortedIndex(stooges, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, <span class=\"string\">'age'</span>);    <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>iteratee 返回一个函数，这个函数则返回任何传入对象的 key(即’age’) 属性<br><code>value = iteratee(obj) = 50</code>， <code>iteratee(stooges(i))</code> 则分别返回 40 和 60 。然后在进行二分查找</p>\n<hr>\n<p>最后还剩下一个 value 为对象的情况，也是大同小异，由于 sortedIndex 不太适合传入对象，就不在赘述。可以根据源码追查一下 <code>_.isMatch()</code> 方法的作用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>数组部分的代码要从哪开始写，我纠结了很久。数组部分用到了大量别的部分的方法，在讲数组部分的核心代码实现时，免不得要写把那些常用的工具代码先弄懂。<br>我思前想后，打算先从 optimizeCb 和 cb 这两个函数入手。而 sortedIndex(二分查找) 恰恰用到了 cb 函数的大部分功能，所以感觉放在一起看的话会比较容易理解。  </p>\n<h3 id=\"optimizeCb\"><a href=\"#optimizeCb\" class=\"headerlink\" title=\"optimizeCb\"></a>optimizeCb</h3><p>首先先看这段代码的注释：</p>\n<blockquote>\n<p>Internal function that returns an efficient (for current engines) version of the passed-in callback, to be repeatedly applied in other Underscore functions.</p>\n</blockquote>\n<p>这是个用于优化回调的函数，代码如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> optimizeCb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context, argCount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果没有传入指定函数上下文，直接返回函数本身</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (context === <span class=\"keyword\">void</span> <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 提前确定传入函数的数量(argCount)</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (argCount == <span class=\"literal\">null</span> ? <span class=\"number\">3</span> : argCount) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, other</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, other);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index, collection</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">accumulator, value, index, collection</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func.call(context, accumulator, value, index, collection);</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 被优化的是 apply</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(context, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>这段函数不难看懂，但不结合具体函数分析，初学者(我)刚看时会有点懵逼，不知道这是在干嘛。<br>其实 optimizeCb 就是用来绑定 this，和传入参数，最简单的方法就是使用 <code>fun.apply(this,arguments);</code> 但是由于 apply 会对传入的数组(arguments) 进行一系列的检验和拷贝，所以性能上不如 call。<br>optimizeCb 方法首先会根据 argCount 个数来确定传入参数的个数，用 switch 循环来来尽量使用指定参数而不用 arguments。当然已现在的环境来看，已经没什么必要手动写这类优化了，了解一下这个函数的作用就好。<a href=\"https://github.com/jianjiade/javascript-frame-lib-analyse/issues/4\" target=\"_blank\">关于underscore.js中optimizeCb函数中是否需要switch的问题的解答</a>   </p>\n<h3 id=\"sortedIndex\"><a href=\"#sortedIndex\" class=\"headerlink\" title=\"sortedIndex\"></a>sortedIndex</h3><p>本来是要先看 cb 这个函数的，但我觉得，在不知道这函数的使用场景下，看这函数，想了解他的意图是很困难的，庆幸的是。sortedIndex 就使用了 cb 函数的大部分功能。所以我们先看 sortedIndex。</p>\n<p><code>_.sortedIndex(array, obj, [iteratee], [context])</code> 使用二分查找确定 obj 在 array 中的位置序号，obj 按此序号插入能保持 array 原有的排序，例如 <code>_.sortedIndex([1,2,3,4,5],3.5)</code> 就在 3 与 4 中插入 3.5 返回 3.5 的位置 3  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, obj, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    iteratee = cb(iteratee, context, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> value = iteratee(obj);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> low = <span class=\"number\">0</span>, high = getLength(array);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 二分法</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> mid = <span class=\"built_in\">Math</span>.floor((low + high) / <span class=\"number\">2</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (iteratee(array[mid]) &lt; value)</span><br><span class=\"line\">        low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        high = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码很简单，根据 iteratee 作为 array 排序的依据，包括传递的 obj。通过对比 <code>iteratee(array[mid])</code> 与 <code>iteratee(obj)</code> 来查找 obj 所在的位置。<br>现在问题来了 <code>iteratee = cb(iteratee, context, 1);</code> 这行代码执行了什么功能。</p>\n<h3 id=\"cb\"><a href=\"#cb\" class=\"headerlink\" title=\"cb\"></a>cb</h3><p>注释如下：</p>\n<blockquote>\n<p>A mostly-internal function to generate callbacks that can be applied to each element in a collection, returning the desired result — either identity, an arbitrary callback, a property matcher, or a property accessor.  </p>\n</blockquote>\n<p>大致的意思就是根据传入的参数不同返回不同的函数。我们来看下代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> cb = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, context, argCount</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> _.identity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isFunction(value)) <span class=\"keyword\">return</span> optimizeCb(value, context, argCount);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_.isObject(value)) <span class=\"keyword\">return</span> _.matcher(value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _.property(value);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中 value 传入函数，对象，字符串或不传入都会调用不同的方法。<br>我们在回过头来，看看 <code>_.sortedIndex()</code>  </p>\n<h5 id=\"value-null\"><a href=\"#value-null\" class=\"headerlink\" title=\"value == null\"></a>value == null</h5><p>当只传入 array 与 obj 时，iteratee 为空， <code>cb()</code> 判断 <code>value == null</code> 返回了一个 <code>_.identity</code> 方法。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.identity = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>代码很简单，就是返回传入的 value 值。  </p>\n<p>此时的 iteratee 就返回了一个函数  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iteratee = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所以 <code>iteratee(obj)</code> 和 <code>iteartee(array[mid])</code> 都是返回本身，直接进行比较。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>],<span class=\"number\">3</span>)    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<h6 id=\"isFunction-value\"><a href=\"#isFunction-value\" class=\"headerlink\" title=\"_.isFunction(value)\"></a>_.isFunction(value)</h6><p>如果 value 是函数，则返回 <code>optimizeCb(value, context, argCount);</code> 此时的 <code>argCount = 1</code>。举个例子  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.sortedIndex([<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>], <span class=\"number\">3</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">num</span>) </span>&#123;<span class=\"keyword\">return</span> num / <span class=\"number\">2</span> &#125;)  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>此时 iteratee 就是一个函数，array 就变成了 [1,2,3,4,5], obj 就变成了 1，在对其进行二分查找。  </p>\n<h5 id=\"property-value\"><a href=\"#property-value\" class=\"headerlink\" title=\"_.property(value);\"></a>_.property(value);</h5><p>若 value 不是函数，空值和对象，则返回一个 <code>_.property(value)</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.property = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> obj == <span class=\"literal\">null</span> ? <span class=\"keyword\">void</span> <span class=\"number\">0</span> : obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>照样拿 sortedIndex 举例  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> stooges = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">'moe'</span>, <span class=\"attr\">age</span>: <span class=\"number\">40</span>&#125;, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'curly'</span>, <span class=\"attr\">age</span>: <span class=\"number\">60</span>&#125;];</span><br><span class=\"line\">_.sortedIndex(stooges, &#123;<span class=\"attr\">name</span>: <span class=\"string\">'larry'</span>, <span class=\"attr\">age</span>: <span class=\"number\">50</span>&#125;, <span class=\"string\">'age'</span>);    <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<p>iteratee 返回一个函数，这个函数则返回任何传入对象的 key(即’age’) 属性<br><code>value = iteratee(obj) = 50</code>， <code>iteratee(stooges(i))</code> 则分别返回 40 和 60 。然后在进行二分查找</p>\n<hr>\n<p>最后还剩下一个 value 为对象的情况，也是大同小异，由于 sortedIndex 不太适合传入对象，就不在赘述。可以根据源码追查一下 <code>_.isMatch()</code> 方法的作用。</p>\n"},{"layout":"post","title":"underscore.js 源码之 Fisher-Yates shuffle 数组乱序","date":"2017-06-11T07:36:00.000Z","_content":"\n昨天晚上竟然失眠了，早上还是 8 点就醒了。在找不到实习压力是越来越大了......  \n\n### Fisher-Yates shuffle\n\nFisher–Yates shuffle(洗牌算法) 是一个用来将一个有限集合生成一个随机排列的算法。这个算法生成的随机排列是等概率且高效的，具体步骤如下：\n\n1. 写下从 1 到 N 的数字\n2. 取一个从 1 到剩下的数字（包括这个数字）的随机数 k\n3. 从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位\n4. 重复第 2 步，直到所有的数字都被取出\n5. 第 3 步写出的这个序列，现在就是原始数字的随机排列\n\n这是最原始版的洗牌算法，若是在计算机当中，第 3 步得到第 k 个数字后，还需要将 k 删除，比如在 JS 中代码实现为 `js array.slice(i,1) ` 每执一次，时间复杂度为 O(n)，这样下来，总的时间复杂度就为 O(n^2)。当数据很大时十分浪费时间。  \n\n为了解决这个问题，新的版本将第三步改为：每次迭代时将第 k 个数和原始列表的 开头/结尾 数对换，这就省去了删除元素的步骤，时间复杂度为 O(n)。  \n\n### _.shuffle() 方法  \n\nunderscore.js 里是这么写的  \n\n```js\n_.shuffle = function(obj) {\n    // Object 则取出值进行乱序\n    var set = _.isArray(obj) ? obj : _.values(obj) ;\n    var length = set.length;\n    var results = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      var rand = Math.floor(Math.random() * (i+1));\n\n      if (rand != i) \n        results[i] = results[rand];\n\n      results[rand] = set[i];\n    } \n\n    return results;\n};\n```\n\n使用 Math.random() 随机生成数字，将 随机数 rand 与 i 进行对换  \n\n\n参考文章：<a href=\"https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/\" target=\"_blank\">Fisher–Yates shuffle 洗牌算法</a>\n","source":"_posts/underscore-read-07-Fisher-Yates-shuffle.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore.js 源码之 Fisher-Yates shuffle 数组乱序\"\ndate:       2017-06-11 15:36:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n昨天晚上竟然失眠了，早上还是 8 点就醒了。在找不到实习压力是越来越大了......  \n\n### Fisher-Yates shuffle\n\nFisher–Yates shuffle(洗牌算法) 是一个用来将一个有限集合生成一个随机排列的算法。这个算法生成的随机排列是等概率且高效的，具体步骤如下：\n\n1. 写下从 1 到 N 的数字\n2. 取一个从 1 到剩下的数字（包括这个数字）的随机数 k\n3. 从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位\n4. 重复第 2 步，直到所有的数字都被取出\n5. 第 3 步写出的这个序列，现在就是原始数字的随机排列\n\n这是最原始版的洗牌算法，若是在计算机当中，第 3 步得到第 k 个数字后，还需要将 k 删除，比如在 JS 中代码实现为 `js array.slice(i,1) ` 每执一次，时间复杂度为 O(n)，这样下来，总的时间复杂度就为 O(n^2)。当数据很大时十分浪费时间。  \n\n为了解决这个问题，新的版本将第三步改为：每次迭代时将第 k 个数和原始列表的 开头/结尾 数对换，这就省去了删除元素的步骤，时间复杂度为 O(n)。  \n\n### _.shuffle() 方法  \n\nunderscore.js 里是这么写的  \n\n```js\n_.shuffle = function(obj) {\n    // Object 则取出值进行乱序\n    var set = _.isArray(obj) ? obj : _.values(obj) ;\n    var length = set.length;\n    var results = Array(length);\n\n    for (var i = 0; i < length; i++) {\n      var rand = Math.floor(Math.random() * (i+1));\n\n      if (rand != i) \n        results[i] = results[rand];\n\n      results[rand] = set[i];\n    } \n\n    return results;\n};\n```\n\n使用 Math.random() 随机生成数字，将 随机数 rand 与 i 进行对换  \n\n\n参考文章：<a href=\"https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/\" target=\"_blank\">Fisher–Yates shuffle 洗牌算法</a>\n","slug":"underscore-read-07-Fisher-Yates-shuffle","published":1,"updated":"2018-05-09T09:02:34.003Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41m00292mhs7sbo1umy","content":"<p>昨天晚上竟然失眠了，早上还是 8 点就醒了。在找不到实习压力是越来越大了……  </p>\n<h3 id=\"Fisher-Yates-shuffle\"><a href=\"#Fisher-Yates-shuffle\" class=\"headerlink\" title=\"Fisher-Yates shuffle\"></a>Fisher-Yates shuffle</h3><p>Fisher–Yates shuffle(洗牌算法) 是一个用来将一个有限集合生成一个随机排列的算法。这个算法生成的随机排列是等概率且高效的，具体步骤如下：</p>\n<ol>\n<li>写下从 1 到 N 的数字</li>\n<li>取一个从 1 到剩下的数字（包括这个数字）的随机数 k</li>\n<li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li>\n<li>重复第 2 步，直到所有的数字都被取出</li>\n<li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li>\n</ol>\n<p>这是最原始版的洗牌算法，若是在计算机当中，第 3 步得到第 k 个数字后，还需要将 k 删除，比如在 JS 中代码实现为 <code>js array.slice(i,1)</code> 每执一次，时间复杂度为 O(n)，这样下来，总的时间复杂度就为 O(n^2)。当数据很大时十分浪费时间。  </p>\n<p>为了解决这个问题，新的版本将第三步改为：每次迭代时将第 k 个数和原始列表的 开头/结尾 数对换，这就省去了删除元素的步骤，时间复杂度为 O(n)。  </p>\n<h3 id=\"shuffle-方法\"><a href=\"#shuffle-方法\" class=\"headerlink\" title=\"_.shuffle() 方法\"></a>_.shuffle() 方法</h3><p>underscore.js 里是这么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Object 则取出值进行乱序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> set = _.isArray(obj) ? obj : _.values(obj) ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> rand = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (i+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand != i) </span><br><span class=\"line\">        results[i] = results[rand];</span><br><span class=\"line\"></span><br><span class=\"line\">      results[rand] = set[i];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 Math.random() 随机生成数字，将 随机数 rand 与 i 进行对换  </p>\n<p>参考文章：<a href=\"https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/\" target=\"_blank\">Fisher–Yates shuffle 洗牌算法</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天晚上竟然失眠了，早上还是 8 点就醒了。在找不到实习压力是越来越大了……  </p>\n<h3 id=\"Fisher-Yates-shuffle\"><a href=\"#Fisher-Yates-shuffle\" class=\"headerlink\" title=\"Fisher-Yates shuffle\"></a>Fisher-Yates shuffle</h3><p>Fisher–Yates shuffle(洗牌算法) 是一个用来将一个有限集合生成一个随机排列的算法。这个算法生成的随机排列是等概率且高效的，具体步骤如下：</p>\n<ol>\n<li>写下从 1 到 N 的数字</li>\n<li>取一个从 1 到剩下的数字（包括这个数字）的随机数 k</li>\n<li>从低位开始，得到第 k 个数字（这个数字还没有被取出），把它写在独立的一个列表的最后一位</li>\n<li>重复第 2 步，直到所有的数字都被取出</li>\n<li>第 3 步写出的这个序列，现在就是原始数字的随机排列</li>\n</ol>\n<p>这是最原始版的洗牌算法，若是在计算机当中，第 3 步得到第 k 个数字后，还需要将 k 删除，比如在 JS 中代码实现为 <code>js array.slice(i,1)</code> 每执一次，时间复杂度为 O(n)，这样下来，总的时间复杂度就为 O(n^2)。当数据很大时十分浪费时间。  </p>\n<p>为了解决这个问题，新的版本将第三步改为：每次迭代时将第 k 个数和原始列表的 开头/结尾 数对换，这就省去了删除元素的步骤，时间复杂度为 O(n)。  </p>\n<h3 id=\"shuffle-方法\"><a href=\"#shuffle-方法\" class=\"headerlink\" title=\"_.shuffle() 方法\"></a>_.shuffle() 方法</h3><p>underscore.js 里是这么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Object 则取出值进行乱序</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> set = _.isArray(obj) ? obj : _.values(obj) ;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = set.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = <span class=\"built_in\">Array</span>(length);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> rand = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (i+<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rand != i) </span><br><span class=\"line\">        results[i] = results[rand];</span><br><span class=\"line\"></span><br><span class=\"line\">      results[rand] = set[i];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>使用 Math.random() 随机生成数字，将 随机数 rand 与 i 进行对换  </p>\n<p>参考文章：<a href=\"https://gaohaoyang.github.io/2016/10/16/shuffle-algorithm/\" target=\"_blank\">Fisher–Yates shuffle 洗牌算法</a></p>\n"},{"layout":"post","title":"underscore.js 源码之 数组展开和数组去重","date":"2017-06-10T14:36:00.000Z","_content":"\n### 数组展开\n\n数组展开，就是把嵌套的数组解开，分为深展开和浅展开  \n\n    [[[1,2,3],[4,5]],[6,7],8] => [1,2,3,4,5,6,7,8]        深展开\n    [[[1,2,3],[4,5]],[6,7],8] => [[1,2,3],[4,5],6,7,8]    浅展开\n\n```js\n_.flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    // startIndex 规定从哪开始展开\n    for (var i = startIndex || 0; i < input.length; i++) {\n      var value = input[i];\n      // 如果数组内还是数组，则需要考虑深遍历或浅遍历\n      if (_.isArrayLike(input[i])) {\n\n        // shallow 为 false 或不填为深拷贝，递归\n        if (!shallow) {\n          // 将 flatten函数返回值赋予 value\n          value = _.flatten(value, shallow, strict);\n        }\n\n        // 浅遍历只执行一层\n        var j = 0, len = value.length;\n\n        while(j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if(!strict) {\n        // strict 为 true 时，不进入循环，意味着 最外层数组内若是数字则舍去\n        output[idx++] = value;\n      }\n    }\n    return output;\n};\n```\n\n先来看看四个参数各自的用处  \n\n- input         展开的数组\n- shallow       等于 true 时代表浅拷贝\n- strict        为 true 时，最外层的数组元素若为数字，则被舍去。当 `shallow = false`, `strict = true` 时，数组递归到最后都是数字，而数字被舍去，输出 `[]`\n- startIndex    从第几个元素开始展开\n\n代码首先循环判断数组值是否为数组  \n\n- 如果是数组，判断 shallow 值\n    + 若深拷贝，进入递归继续展开判断直至不为数组，进入 `else if(!strict)` 的判断内，把值存入 output，在返回给 value ，接下来执行和浅拷贝一样的步骤  \n    + 若浅拷贝，只展开一层，把 value 内的值赋给 output\n- 如果不是数组，判断 strict 不为 true 时，把值存入 output  \n\n总的来说，就是循环每个数组，在根据数组值的情况和传入的参数不同，分别返回不同的方法，最后把值传给 output\n\n### 数组去重\n\n据说这是到笔试经常出的题目  \n如果支持 ES5 ，可以用 indexOf 和 unique 方法\n\n```js\nfunction unique(arr) {\n  var results = arr.filter(function(item, index, array) {\n    return array.indexOf(item) === index;\n  });\n\n  return results;\n}\n```\n\nES6，就更简单了\n\n```\nfunction unique(arr){\n    return Array.from(new Set(arr));\n}\n```\n\n如果都不支持，代码就比较难看了  \n\n```js\nfunction unique(arr) {\n  var results = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    var item = a[i];\n\n    for (var j = 0, jLen = res.length; j < jLen; j++) {\n      if (res[j] === item) break;\n    }\n\n    if (j === jLen)\n      res.push(item);\n  }\n\n  return res;\n}\n```\n\n这里用到了两重循环  \n\n可以这么修改下\n```js\nfunction unique(arr) {\n  var res = []\n  var hash = {}\n\n  for (var i = 0; i < arr.length; i++) {\n    var item = arr[i]\n    var key = typeof(item) + item\n    if (hash[key] !== 1) {\n      res.push(item)\n      hash[key] = 1\n    }\n  }\n\n  return ret\n}\n```\n\n这里创建了一个对象来代替 indexOf，把「数组值的属性 + 数组值」作为对象属性传入，只需要查找对象属性是否已经存在，就可以判断这个值存不存在  \n\n这样就完美了吗？[new String(1), new Number(1)] 的 typeof 可都是 object 呢，当然这情况很少，可根据实际情况取舍。  \n\n看看 underscore.js 的方法  \n\n```js\n_.unique = function(array, isSorted, iteratee, context) {\n    // 如果 isSorted 不是 boolean，变成 (array, false, isSorted, iteratee)\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n\n    if (iteratee != null) {\n      iteratee = cb(iteratee, context,);\n    }\n\n    var results = [],\n        seen = [];\n\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n          // 有传入函数就计算函数返回值，否则直接返回数组值\n          computed = iteratee ? iteratee(value, i, array) : value;\n\n      // isSorted 为 true 时，代表 array 有序，直接对比两个相邻元素\n      if (isSorted) {\n\n        if (!i || seen != computed) results.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        // 如果有传入函数，需要保存对比函数执行后的结果\n        // _.contains(array, item) 如果 item 存在与 array，返回 true\n        if (!_.contains(seen, computed)) {\n          results.push(value);\n          seen.push(computed);\n        }\n      } else if (!_.contains(results, value)) {\n        // 不计算函数，就不需要存入 seen 变量\n        results.push(value);\n      }\n    }\n    return results;\n}\n```\n\n注意这段  \n\n```js\nif (!_.isBoolean(isSorted)) {\n  context = iteratee;\n  iteratee = isSorted;\n  isSorted = false;\n}\n```\n\n根据传入参数的不同，对传入参数的顺序进行调整，这倒是很令我惊奇，居然还能这么用，虽然我感觉在这里用处不大。  \n\n然后分两种情况，一种传入了函数则先执行函数，对比返回值是否重复，若没传入函数，则直接对比数组是否重复。都是将第一次出现的数传入了 results 数组，然后通过 `_.contains(results, value)` 方法判断有没有重复， 而 `_.contains()` 用到了 `_.indexOf()`\n 的方法，在 underscore 里，实际上也是执行了两重循环。  \n不过 underscore 对这两个方法都进行了优化。indexOf() 的优化上一篇已经讲过，`_.contains()` 则是当数组有序时，isSorted 传入 true，代码就会只判断前后两个数是否相同。  \n\n看了这么多篇，我感觉到 underscore 除了对各种方法进行了封装以外，更令我惊喜的是对参数不同而执行不同的代码，让相似的功能只需要通过传入参数的不一样而有不同的方法。我自认做不到如此，就算是有意模仿也是相形见挫，不知什么时候才能做到想原作者这般随心所欲。  \n","source":"_posts/underscore-read-06-flatten-unique.markdown","raw":"---\nlayout: \tpost\ntitle:\t\t\"underscore.js 源码之 数组展开和数组去重\"\ndate:       2017-06-10 22:36:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n### 数组展开\n\n数组展开，就是把嵌套的数组解开，分为深展开和浅展开  \n\n    [[[1,2,3],[4,5]],[6,7],8] => [1,2,3,4,5,6,7,8]        深展开\n    [[[1,2,3],[4,5]],[6,7],8] => [[1,2,3],[4,5],6,7,8]    浅展开\n\n```js\n_.flatten = function(input, shallow, strict, startIndex) {\n    var output = [], idx = 0;\n    // startIndex 规定从哪开始展开\n    for (var i = startIndex || 0; i < input.length; i++) {\n      var value = input[i];\n      // 如果数组内还是数组，则需要考虑深遍历或浅遍历\n      if (_.isArrayLike(input[i])) {\n\n        // shallow 为 false 或不填为深拷贝，递归\n        if (!shallow) {\n          // 将 flatten函数返回值赋予 value\n          value = _.flatten(value, shallow, strict);\n        }\n\n        // 浅遍历只执行一层\n        var j = 0, len = value.length;\n\n        while(j < len) {\n          output[idx++] = value[j++];\n        }\n      } else if(!strict) {\n        // strict 为 true 时，不进入循环，意味着 最外层数组内若是数字则舍去\n        output[idx++] = value;\n      }\n    }\n    return output;\n};\n```\n\n先来看看四个参数各自的用处  \n\n- input         展开的数组\n- shallow       等于 true 时代表浅拷贝\n- strict        为 true 时，最外层的数组元素若为数字，则被舍去。当 `shallow = false`, `strict = true` 时，数组递归到最后都是数字，而数字被舍去，输出 `[]`\n- startIndex    从第几个元素开始展开\n\n代码首先循环判断数组值是否为数组  \n\n- 如果是数组，判断 shallow 值\n    + 若深拷贝，进入递归继续展开判断直至不为数组，进入 `else if(!strict)` 的判断内，把值存入 output，在返回给 value ，接下来执行和浅拷贝一样的步骤  \n    + 若浅拷贝，只展开一层，把 value 内的值赋给 output\n- 如果不是数组，判断 strict 不为 true 时，把值存入 output  \n\n总的来说，就是循环每个数组，在根据数组值的情况和传入的参数不同，分别返回不同的方法，最后把值传给 output\n\n### 数组去重\n\n据说这是到笔试经常出的题目  \n如果支持 ES5 ，可以用 indexOf 和 unique 方法\n\n```js\nfunction unique(arr) {\n  var results = arr.filter(function(item, index, array) {\n    return array.indexOf(item) === index;\n  });\n\n  return results;\n}\n```\n\nES6，就更简单了\n\n```\nfunction unique(arr){\n    return Array.from(new Set(arr));\n}\n```\n\n如果都不支持，代码就比较难看了  \n\n```js\nfunction unique(arr) {\n  var results = [];\n\n  for (var i = 0; i < arr.length; i++) {\n    var item = a[i];\n\n    for (var j = 0, jLen = res.length; j < jLen; j++) {\n      if (res[j] === item) break;\n    }\n\n    if (j === jLen)\n      res.push(item);\n  }\n\n  return res;\n}\n```\n\n这里用到了两重循环  \n\n可以这么修改下\n```js\nfunction unique(arr) {\n  var res = []\n  var hash = {}\n\n  for (var i = 0; i < arr.length; i++) {\n    var item = arr[i]\n    var key = typeof(item) + item\n    if (hash[key] !== 1) {\n      res.push(item)\n      hash[key] = 1\n    }\n  }\n\n  return ret\n}\n```\n\n这里创建了一个对象来代替 indexOf，把「数组值的属性 + 数组值」作为对象属性传入，只需要查找对象属性是否已经存在，就可以判断这个值存不存在  \n\n这样就完美了吗？[new String(1), new Number(1)] 的 typeof 可都是 object 呢，当然这情况很少，可根据实际情况取舍。  \n\n看看 underscore.js 的方法  \n\n```js\n_.unique = function(array, isSorted, iteratee, context) {\n    // 如果 isSorted 不是 boolean，变成 (array, false, isSorted, iteratee)\n    if (!_.isBoolean(isSorted)) {\n      context = iteratee;\n      iteratee = isSorted;\n      isSorted = false;\n    }\n\n    if (iteratee != null) {\n      iteratee = cb(iteratee, context,);\n    }\n\n    var results = [],\n        seen = [];\n\n    for (var i = 0, length = array.length; i < length; i++) {\n      var value = array[i],\n          // 有传入函数就计算函数返回值，否则直接返回数组值\n          computed = iteratee ? iteratee(value, i, array) : value;\n\n      // isSorted 为 true 时，代表 array 有序，直接对比两个相邻元素\n      if (isSorted) {\n\n        if (!i || seen != computed) results.push(value);\n        seen = computed;\n      } else if (iteratee) {\n        // 如果有传入函数，需要保存对比函数执行后的结果\n        // _.contains(array, item) 如果 item 存在与 array，返回 true\n        if (!_.contains(seen, computed)) {\n          results.push(value);\n          seen.push(computed);\n        }\n      } else if (!_.contains(results, value)) {\n        // 不计算函数，就不需要存入 seen 变量\n        results.push(value);\n      }\n    }\n    return results;\n}\n```\n\n注意这段  \n\n```js\nif (!_.isBoolean(isSorted)) {\n  context = iteratee;\n  iteratee = isSorted;\n  isSorted = false;\n}\n```\n\n根据传入参数的不同，对传入参数的顺序进行调整，这倒是很令我惊奇，居然还能这么用，虽然我感觉在这里用处不大。  \n\n然后分两种情况，一种传入了函数则先执行函数，对比返回值是否重复，若没传入函数，则直接对比数组是否重复。都是将第一次出现的数传入了 results 数组，然后通过 `_.contains(results, value)` 方法判断有没有重复， 而 `_.contains()` 用到了 `_.indexOf()`\n 的方法，在 underscore 里，实际上也是执行了两重循环。  \n不过 underscore 对这两个方法都进行了优化。indexOf() 的优化上一篇已经讲过，`_.contains()` 则是当数组有序时，isSorted 传入 true，代码就会只判断前后两个数是否相同。  \n\n看了这么多篇，我感觉到 underscore 除了对各种方法进行了封装以外，更令我惊喜的是对参数不同而执行不同的代码，让相似的功能只需要通过传入参数的不一样而有不同的方法。我自认做不到如此，就算是有意模仿也是相形见挫，不知什么时候才能做到想原作者这般随心所欲。  \n","slug":"underscore-read-06-flatten-unique","published":1,"updated":"2018-05-09T09:01:13.736Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41n002b2mhsizxejjbd","content":"<h3 id=\"数组展开\"><a href=\"#数组展开\" class=\"headerlink\" title=\"数组展开\"></a>数组展开</h3><p>数组展开，就是把嵌套的数组解开，分为深展开和浅展开  </p>\n<pre><code>[[[1,2,3],[4,5]],[6,7],8] =&gt; [1,2,3,4,5,6,7,8]        深展开\n[[[1,2,3],[4,5]],[6,7],8] =&gt; [[1,2,3],[4,5],6,7,8]    浅展开\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// startIndex 规定从哪开始展开</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 如果数组内还是数组，则需要考虑深遍历或浅遍历</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.isArrayLike(input[i])) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// shallow 为 false 或不填为深拷贝，递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将 flatten函数返回值赋予 value</span></span><br><span class=\"line\">          value = _.flatten(value, shallow, strict);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 浅遍历只执行一层</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; len) &#123;</span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!strict) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// strict 为 true 时，不进入循环，意味着 最外层数组内若是数字则舍去</span></span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先来看看四个参数各自的用处  </p>\n<ul>\n<li>input         展开的数组</li>\n<li>shallow       等于 true 时代表浅拷贝</li>\n<li>strict        为 true 时，最外层的数组元素若为数字，则被舍去。当 <code>shallow = false</code>, <code>strict = true</code> 时，数组递归到最后都是数字，而数字被舍去，输出 <code>[]</code></li>\n<li>startIndex    从第几个元素开始展开</li>\n</ul>\n<p>代码首先循环判断数组值是否为数组  </p>\n<ul>\n<li>如果是数组，判断 shallow 值<ul>\n<li>若深拷贝，进入递归继续展开判断直至不为数组，进入 <code>else if(!strict)</code> 的判断内，把值存入 output，在返回给 value ，接下来执行和浅拷贝一样的步骤  </li>\n<li>若浅拷贝，只展开一层，把 value 内的值赋给 output</li>\n</ul>\n</li>\n<li>如果不是数组，判断 strict 不为 true 时，把值存入 output  </li>\n</ul>\n<p>总的来说，就是循环每个数组，在根据数组值的情况和传入的参数不同，分别返回不同的方法，最后把值传给 output</p>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>据说这是到笔试经常出的题目<br>如果支持 ES5 ，可以用 indexOf 和 unique 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.indexOf(item) === index;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6，就更简单了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return Array.from(new Set(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果都不支持，代码就比较难看了  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, jLen = res.length; j &lt; jLen; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res[j] === item) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === jLen)</span><br><span class=\"line\">      res.push(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用到了两重循环  </p>\n<p>可以这么修改下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">typeof</span>(item) + item</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash[key] !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res.push(item)</span><br><span class=\"line\">      hash[key] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里创建了一个对象来代替 indexOf，把「数组值的属性 + 数组值」作为对象属性传入，只需要查找对象属性是否已经存在，就可以判断这个值存不存在  </p>\n<p>这样就完美了吗？[new String(1), new Number(1)] 的 typeof 可都是 object 呢，当然这情况很少，可根据实际情况取舍。  </p>\n<p>看看 underscore.js 的方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted 不是 boolean，变成 (array, false, isSorted, iteratee)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context,);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [],</span><br><span class=\"line\">        seen = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">          <span class=\"comment\">// 有传入函数就计算函数返回值，否则直接返回数组值</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// isSorted 为 true 时，代表 array 有序，直接对比两个相邻元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen != computed) results.push(value);</span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有传入函数，需要保存对比函数执行后的结果</span></span><br><span class=\"line\">        <span class=\"comment\">// _.contains(array, item) 如果 item 存在与 array，返回 true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          results.push(value);</span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(results, value)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不计算函数，就不需要存入 seen 变量</span></span><br><span class=\"line\">        results.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这段  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">  context = iteratee;</span><br><span class=\"line\">  iteratee = isSorted;</span><br><span class=\"line\">  isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据传入参数的不同，对传入参数的顺序进行调整，这倒是很令我惊奇，居然还能这么用，虽然我感觉在这里用处不大。  </p>\n<p>然后分两种情况，一种传入了函数则先执行函数，对比返回值是否重复，若没传入函数，则直接对比数组是否重复。都是将第一次出现的数传入了 results 数组，然后通过 <code>_.contains(results, value)</code> 方法判断有没有重复， 而 <code>_.contains()</code> 用到了 <code>_.indexOf()</code><br> 的方法，在 underscore 里，实际上也是执行了两重循环。<br>不过 underscore 对这两个方法都进行了优化。indexOf() 的优化上一篇已经讲过，<code>_.contains()</code> 则是当数组有序时，isSorted 传入 true，代码就会只判断前后两个数是否相同。  </p>\n<p>看了这么多篇，我感觉到 underscore 除了对各种方法进行了封装以外，更令我惊喜的是对参数不同而执行不同的代码，让相似的功能只需要通过传入参数的不一样而有不同的方法。我自认做不到如此，就算是有意模仿也是相形见挫，不知什么时候才能做到想原作者这般随心所欲。  </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数组展开\"><a href=\"#数组展开\" class=\"headerlink\" title=\"数组展开\"></a>数组展开</h3><p>数组展开，就是把嵌套的数组解开，分为深展开和浅展开  </p>\n<pre><code>[[[1,2,3],[4,5]],[6,7],8] =&gt; [1,2,3,4,5,6,7,8]        深展开\n[[[1,2,3],[4,5]],[6,7],8] =&gt; [[1,2,3],[4,5],6,7,8]    浅展开\n</code></pre><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.flatten = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">input, shallow, strict, startIndex</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> output = [], idx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// startIndex 规定从哪开始展开</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = startIndex || <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = input[i];</span><br><span class=\"line\">      <span class=\"comment\">// 如果数组内还是数组，则需要考虑深遍历或浅遍历</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_.isArrayLike(input[i])) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// shallow 为 false 或不填为深拷贝，递归</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!shallow) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 将 flatten函数返回值赋予 value</span></span><br><span class=\"line\">          value = _.flatten(value, shallow, strict);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 浅遍历只执行一层</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, len = value.length;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j &lt; len) &#123;</span><br><span class=\"line\">          output[idx++] = value[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(!strict) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// strict 为 true 时，不进入循环，意味着 最外层数组内若是数字则舍去</span></span><br><span class=\"line\">        output[idx++] = value;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>先来看看四个参数各自的用处  </p>\n<ul>\n<li>input         展开的数组</li>\n<li>shallow       等于 true 时代表浅拷贝</li>\n<li>strict        为 true 时，最外层的数组元素若为数字，则被舍去。当 <code>shallow = false</code>, <code>strict = true</code> 时，数组递归到最后都是数字，而数字被舍去，输出 <code>[]</code></li>\n<li>startIndex    从第几个元素开始展开</li>\n</ul>\n<p>代码首先循环判断数组值是否为数组  </p>\n<ul>\n<li>如果是数组，判断 shallow 值<ul>\n<li>若深拷贝，进入递归继续展开判断直至不为数组，进入 <code>else if(!strict)</code> 的判断内，把值存入 output，在返回给 value ，接下来执行和浅拷贝一样的步骤  </li>\n<li>若浅拷贝，只展开一层，把 value 内的值赋给 output</li>\n</ul>\n</li>\n<li>如果不是数组，判断 strict 不为 true 时，把值存入 output  </li>\n</ul>\n<p>总的来说，就是循环每个数组，在根据数组值的情况和传入的参数不同，分别返回不同的方法，最后把值传给 output</p>\n<h3 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h3><p>据说这是到笔试经常出的题目<br>如果支持 ES5 ，可以用 indexOf 和 unique 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, index, array</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> array.indexOf(item) === index;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ES6，就更简单了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(arr)&#123;</span><br><span class=\"line\">    return Array.from(new Set(arr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果都不支持，代码就比较难看了  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> results = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, jLen = res.length; j &lt; jLen; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (res[j] === item) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j === jLen)</span><br><span class=\"line\">      res.push(item);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用到了两重循环  </p>\n<p>可以这么修改下<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = []</span><br><span class=\"line\">  <span class=\"keyword\">var</span> hash = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> item = arr[i]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"keyword\">typeof</span>(item) + item</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash[key] !== <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      res.push(item)</span><br><span class=\"line\">      hash[key] = <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里创建了一个对象来代替 indexOf，把「数组值的属性 + 数组值」作为对象属性传入，只需要查找对象属性是否已经存在，就可以判断这个值存不存在  </p>\n<p>这样就完美了吗？[new String(1), new Number(1)] 的 typeof 可都是 object 呢，当然这情况很少，可根据实际情况取舍。  </p>\n<p>看看 underscore.js 的方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">array, isSorted, iteratee, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果 isSorted 不是 boolean，变成 (array, false, isSorted, iteratee)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">      context = iteratee;</span><br><span class=\"line\">      iteratee = isSorted;</span><br><span class=\"line\">      isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (iteratee != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      iteratee = cb(iteratee, context,);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> results = [],</span><br><span class=\"line\">        seen = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, length = array.length; i &lt; length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> value = array[i],</span><br><span class=\"line\">          <span class=\"comment\">// 有传入函数就计算函数返回值，否则直接返回数组值</span></span><br><span class=\"line\">          computed = iteratee ? iteratee(value, i, array) : value;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// isSorted 为 true 时，代表 array 有序，直接对比两个相邻元素</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (isSorted) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!i || seen != computed) results.push(value);</span><br><span class=\"line\">        seen = computed;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (iteratee) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果有传入函数，需要保存对比函数执行后的结果</span></span><br><span class=\"line\">        <span class=\"comment\">// _.contains(array, item) 如果 item 存在与 array，返回 true</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!_.contains(seen, computed)) &#123;</span><br><span class=\"line\">          results.push(value);</span><br><span class=\"line\">          seen.push(computed);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!_.contains(results, value)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不计算函数，就不需要存入 seen 变量</span></span><br><span class=\"line\">        results.push(value);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> results;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意这段  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!_.isBoolean(isSorted)) &#123;</span><br><span class=\"line\">  context = iteratee;</span><br><span class=\"line\">  iteratee = isSorted;</span><br><span class=\"line\">  isSorted = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据传入参数的不同，对传入参数的顺序进行调整，这倒是很令我惊奇，居然还能这么用，虽然我感觉在这里用处不大。  </p>\n<p>然后分两种情况，一种传入了函数则先执行函数，对比返回值是否重复，若没传入函数，则直接对比数组是否重复。都是将第一次出现的数传入了 results 数组，然后通过 <code>_.contains(results, value)</code> 方法判断有没有重复， 而 <code>_.contains()</code> 用到了 <code>_.indexOf()</code><br> 的方法，在 underscore 里，实际上也是执行了两重循环。<br>不过 underscore 对这两个方法都进行了优化。indexOf() 的优化上一篇已经讲过，<code>_.contains()</code> 则是当数组有序时，isSorted 传入 true，代码就会只判断前后两个数是否相同。  </p>\n<p>看了这么多篇，我感觉到 underscore 除了对各种方法进行了封装以外，更令我惊喜的是对参数不同而执行不同的代码，让相似的功能只需要通过传入参数的不一样而有不同的方法。我自认做不到如此，就算是有意模仿也是相形见挫，不知什么时候才能做到想原作者这般随心所欲。  </p>\n"},{"layout":"post","title":"underscore.js 源码之 bind 方法和原型式继承","date":"2017-06-11T07:36:00.000Z","_content":"\n### call() and apply()\n\ncall() 和 apply() 都是用于改变函数上下文而存在，即修改内部 this 指向\n\n```js\nvar obj = {\n    x: 10\n};\nvar getX = function() {\n    return this.x;\n}\n\nconsole.log(getX())     // undefined\nconsole.log(getX.call(obj))     // 10\n```\n\n### bind()\n\nbind() 和 call()、apply() 函数一样，也是改变 this 指向。  \nbind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。  \n什么意思呢，举个例子  \n\n##### 创建绑定函数\n\n依然是上面那个代码  \n\n```js\nconsole.log(getX.bind(obj)) \n/*\n * function () {\n *   return this.x;\n * }\n * 创建一个函数\n */\nconsole.log(getX.bind(obj)())   // 10\n```\n\nbind() 方法返回一个函数，继承 getX 方法和将 this 绑定给了 obj  \n\n##### 给定参数序列  \n\nbind() 的另一个常用方法为给定函数的参数序列，作为 bind() 的第二个参数跟在 this 后面。也称偏函数(Partial Functions)。看看使用方法  \n\n```js\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\nvar bindList = list.bind(undefined, 5);\n\nconsole.log(bindList(1,2,3,4))  // [5,1,2,3,4]\n```\n\nbind() 的第二个参数开始，会作为预设值传递给返回的函数  \n\n### polyfill\n\nbind() 在 ES5 中才被加入，看看 MDN 给的 polyfill 是怎么写的  \n\n```js\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    // this 为 func.bind() 中的 func\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n    // 除了传入的第一个参数用于绑定，其他参数会被预设为返回函数的传入值\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          /* instanceof 这步不是很理解，fNop 应该是空函数\n           * oThis 不存在时，传入的 this 为返回函数当前执行的 this\n           * Array.prototype.slice.call(arguments) 是调用返回函数时传入的参数\n           * 把 bind 时预设的参数和后面传入的参数 concat 拼接在一起\n           * 使用 apply 绑定 this 和参数\n           */\n          return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || this,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n    // 返回函数继承 oThis 的原型链\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n代码的思路大致如下  \n- 判断被绑定函数是否为函数\n- 将 bind() 第二个及后面参数和返回函数的传入参数添加到一起\n- 创建一个新函数，使用 apply 绑定 this 和参数\n- 添加新函数原型链，继承自绑定对象\n\n函数实现依赖于 slice() concat() apply() 这些原生方法，并且创建的函数具有 prototype ，bind()没有。所以关于 prototype 这部分不是恨懂为什么要添加。  \n\n### 原型式继承\n\n刚才 polyfil 一段代码  \n\n```js\nfNOP = function () {};\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n```\n\n这种方式被称为原型式继承(Prototypal Inheritance)，《JavaScript 高级程序设计》里有介绍  \n原型式继承借助原型可以基于已有对象创建新对象，同时还不必因此闯将自定义类型，实现函数如下  \n\n```js\nfunction object(o) {\n    function F(){};\n    F.prototype = o;\n    return new F();\n}\n```\n\n从本质上讲，object() 对传入函数执行了一次浅复制。  \n\n在 ES5 中添加了 Object.create() 方法来规范原型式继承 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\">Object.create</a>\n\n在 underscore.js 代码中也出现了类似的方法，看看是如何实现的  \n\n```js\nvar Ctor = function(){}     // 全局的一个空函数\nvar baseCreate = function(prototype) {\n    \n    if(!_.isObject(prototype)) return {};\n    // 如果支持原生 Object.create()\n    if(nativeCreate) return nativeCreate(prototype);\n\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n\n    return result;\n  };\n```\n\n方法也是一样的，通过这方法就可以很方便的创建原型式继承的函数\n\n\n--- \n\n其实此篇文章和 underscore.js 源码关系不大，我看源码 1.8.3 的实现方法有问题，在浏览器下会报错，所以这是我根据 polyfill 自己实现的 _.bind() 方法，顺便复习一下 bind() 函数的作用。  \n\n```js\n_.bind = function(func, context) {\n    // 如果支持原生 bind 方法\n    if (nativeBind) \n      return nativeBind.apply(func, slice.call(arguments, 1));\n\n    if(!_.isFunction(func))\n      throw new TypeError('bind must be a function');\n    var aArgs = slice.call(arguments, 2);\n    var fBound = function() {\n      return func.apply(context || this, aArgs.concat(slice.call(arguments)));\n    };\n    // 原型式继承\n    fBound.prototype = baseCreate(this.prototype);\n\n    return fBound;\n  };\n```\n\n\n参考文章：\n- 《JavaScript 高级程序设计》\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\">MDN - Function.prototype.bind()</a>\n- <a href=\"http://web.jobbole.com/83642/\" target=\"_blank\">伯乐在线 - 深入浅出妙用 Javascript 中 apply、call、bind</a>\n\n\n\n","source":"_posts/underscore-read-08-bind-polyfill-and-prototypal-inheritance.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore.js 源码之 bind 方法和原型式继承\"\ndate:       2017-06-11 15:36:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n### call() and apply()\n\ncall() 和 apply() 都是用于改变函数上下文而存在，即修改内部 this 指向\n\n```js\nvar obj = {\n    x: 10\n};\nvar getX = function() {\n    return this.x;\n}\n\nconsole.log(getX())     // undefined\nconsole.log(getX.call(obj))     // 10\n```\n\n### bind()\n\nbind() 和 call()、apply() 函数一样，也是改变 this 指向。  \nbind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。  \n什么意思呢，举个例子  \n\n##### 创建绑定函数\n\n依然是上面那个代码  \n\n```js\nconsole.log(getX.bind(obj)) \n/*\n * function () {\n *   return this.x;\n * }\n * 创建一个函数\n */\nconsole.log(getX.bind(obj)())   // 10\n```\n\nbind() 方法返回一个函数，继承 getX 方法和将 this 绑定给了 obj  \n\n##### 给定参数序列  \n\nbind() 的另一个常用方法为给定函数的参数序列，作为 bind() 的第二个参数跟在 this 后面。也称偏函数(Partial Functions)。看看使用方法  \n\n```js\nfunction list() {\n  return Array.prototype.slice.call(arguments);\n}\nvar bindList = list.bind(undefined, 5);\n\nconsole.log(bindList(1,2,3,4))  // [5,1,2,3,4]\n```\n\nbind() 的第二个参数开始，会作为预设值传递给返回的函数  \n\n### polyfill\n\nbind() 在 ES5 中才被加入，看看 MDN 给的 polyfill 是怎么写的  \n\n```js\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    // this 为 func.bind() 中的 func\n    if (typeof this !== \"function\") {\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\n    // 除了传入的第一个参数用于绑定，其他参数会被预设为返回函数的传入值\n    var aArgs = Array.prototype.slice.call(arguments, 1), \n        fToBind = this, \n        fNOP = function () {},\n        fBound = function () {\n          /* instanceof 这步不是很理解，fNop 应该是空函数\n           * oThis 不存在时，传入的 this 为返回函数当前执行的 this\n           * Array.prototype.slice.call(arguments) 是调用返回函数时传入的参数\n           * 把 bind 时预设的参数和后面传入的参数 concat 拼接在一起\n           * 使用 apply 绑定 this 和参数\n           */\n          return fToBind.apply(this instanceof fNOP\n                                 ? this\n                                 : oThis || this,\n                               aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n    // 返回函数继承 oThis 的原型链\n    fNOP.prototype = this.prototype;\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n代码的思路大致如下  \n- 判断被绑定函数是否为函数\n- 将 bind() 第二个及后面参数和返回函数的传入参数添加到一起\n- 创建一个新函数，使用 apply 绑定 this 和参数\n- 添加新函数原型链，继承自绑定对象\n\n函数实现依赖于 slice() concat() apply() 这些原生方法，并且创建的函数具有 prototype ，bind()没有。所以关于 prototype 这部分不是恨懂为什么要添加。  \n\n### 原型式继承\n\n刚才 polyfil 一段代码  \n\n```js\nfNOP = function () {};\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n```\n\n这种方式被称为原型式继承(Prototypal Inheritance)，《JavaScript 高级程序设计》里有介绍  \n原型式继承借助原型可以基于已有对象创建新对象，同时还不必因此闯将自定义类型，实现函数如下  \n\n```js\nfunction object(o) {\n    function F(){};\n    F.prototype = o;\n    return new F();\n}\n```\n\n从本质上讲，object() 对传入函数执行了一次浅复制。  \n\n在 ES5 中添加了 Object.create() 方法来规范原型式继承 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\">Object.create</a>\n\n在 underscore.js 代码中也出现了类似的方法，看看是如何实现的  \n\n```js\nvar Ctor = function(){}     // 全局的一个空函数\nvar baseCreate = function(prototype) {\n    \n    if(!_.isObject(prototype)) return {};\n    // 如果支持原生 Object.create()\n    if(nativeCreate) return nativeCreate(prototype);\n\n    Ctor.prototype = prototype;\n    var result = new Ctor;\n    Ctor.prototype = null;\n\n    return result;\n  };\n```\n\n方法也是一样的，通过这方法就可以很方便的创建原型式继承的函数\n\n\n--- \n\n其实此篇文章和 underscore.js 源码关系不大，我看源码 1.8.3 的实现方法有问题，在浏览器下会报错，所以这是我根据 polyfill 自己实现的 _.bind() 方法，顺便复习一下 bind() 函数的作用。  \n\n```js\n_.bind = function(func, context) {\n    // 如果支持原生 bind 方法\n    if (nativeBind) \n      return nativeBind.apply(func, slice.call(arguments, 1));\n\n    if(!_.isFunction(func))\n      throw new TypeError('bind must be a function');\n    var aArgs = slice.call(arguments, 2);\n    var fBound = function() {\n      return func.apply(context || this, aArgs.concat(slice.call(arguments)));\n    };\n    // 原型式继承\n    fBound.prototype = baseCreate(this.prototype);\n\n    return fBound;\n  };\n```\n\n\n参考文章：\n- 《JavaScript 高级程序设计》\n- <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\">MDN - Function.prototype.bind()</a>\n- <a href=\"http://web.jobbole.com/83642/\" target=\"_blank\">伯乐在线 - 深入浅出妙用 Javascript 中 apply、call、bind</a>\n\n\n\n","slug":"underscore-read-08-bind-polyfill-and-prototypal-inheritance","published":1,"updated":"2018-05-09T09:05:01.512Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41p002c2mhs36e2n9fx","content":"<h3 id=\"call-and-apply\"><a href=\"#call-and-apply\" class=\"headerlink\" title=\"call() and apply()\"></a>call() and apply()</h3><p>call() 和 apply() 都是用于改变函数上下文而存在，即修改内部 this 指向</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX())     <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.call(obj))     <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h3><p>bind() 和 call()、apply() 函数一样，也是改变 this 指向。<br>bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。<br>什么意思呢，举个例子  </p>\n<h5 id=\"创建绑定函数\"><a href=\"#创建绑定函数\" class=\"headerlink\" title=\"创建绑定函数\"></a>创建绑定函数</h5><p>依然是上面那个代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.bind(obj)) </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   return this.x;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.bind(obj)())   <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>bind() 方法返回一个函数，继承 getX 方法和将 this 绑定给了 obj  </p>\n<h5 id=\"给定参数序列\"><a href=\"#给定参数序列\" class=\"headerlink\" title=\"给定参数序列\"></a>给定参数序列</h5><p>bind() 的另一个常用方法为给定函数的参数序列，作为 bind() 的第二个参数跟在 this 后面。也称偏函数(Partial Functions)。看看使用方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bindList = list.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bindList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))  <span class=\"comment\">// [5,1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p>bind() 的第二个参数开始，会作为预设值传递给返回的函数  </p>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>bind() 在 ES5 中才被加入，看看 MDN 给的 polyfill 是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this 为 func.bind() 中的 func</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 除了传入的第一个参数用于绑定，其他参数会被预设为返回函数的传入值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">        fToBind = <span class=\"keyword\">this</span>, </span><br><span class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">/* instanceof 这步不是很理解，fNop 应该是空函数</span></span><br><span class=\"line\"><span class=\"comment\">           * oThis 不存在时，传入的 this 为返回函数当前执行的 this</span></span><br><span class=\"line\"><span class=\"comment\">           * Array.prototype.slice.call(arguments) 是调用返回函数时传入的参数</span></span><br><span class=\"line\"><span class=\"comment\">           * 把 bind 时预设的参数和后面传入的参数 concat 拼接在一起</span></span><br><span class=\"line\"><span class=\"comment\">           * 使用 apply 绑定 this 和参数</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP</span><br><span class=\"line\">                                 ? <span class=\"keyword\">this</span></span><br><span class=\"line\">                                 : oThis || <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                               aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 返回函数继承 oThis 的原型链</span></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码的思路大致如下  </p>\n<ul>\n<li>判断被绑定函数是否为函数</li>\n<li>将 bind() 第二个及后面参数和返回函数的传入参数添加到一起</li>\n<li>创建一个新函数，使用 apply 绑定 this 和参数</li>\n<li>添加新函数原型链，继承自绑定对象</li>\n</ul>\n<p>函数实现依赖于 slice() concat() apply() 这些原生方法，并且创建的函数具有 prototype ，bind()没有。所以关于 prototype 这部分不是恨懂为什么要添加。  </p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><p>刚才 polyfil 一段代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br></pre></td></tr></table></figure>\n<p>这种方式被称为原型式继承(Prototypal Inheritance)，《JavaScript 高级程序设计》里有介绍<br>原型式继承借助原型可以基于已有对象创建新对象，同时还不必因此闯将自定义类型，实现函数如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从本质上讲，object() 对传入函数执行了一次浅复制。  </p>\n<p>在 ES5 中添加了 Object.create() 方法来规范原型式继承 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\">Object.create</a></p>\n<p>在 underscore.js 代码中也出现了类似的方法，看看是如何实现的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;     <span class=\"comment\">// 全局的一个空函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_.isObject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果支持原生 Object.create()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nativeCreate) <span class=\"keyword\">return</span> nativeCreate(prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ctor.prototype = prototype;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">    Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>方法也是一样的，通过这方法就可以很方便的创建原型式继承的函数</p>\n<hr>\n<p>其实此篇文章和 underscore.js 源码关系不大，我看源码 1.8.3 的实现方法有问题，在浏览器下会报错，所以这是我根据 polyfill 自己实现的 _.bind() 方法，顺便复习一下 bind() 函数的作用。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果支持原生 bind 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind) </span><br><span class=\"line\">      <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_.isFunction(func))</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'bind must be a function'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(context || <span class=\"keyword\">this</span>, aArgs.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 原型式继承</span></span><br><span class=\"line\">    fBound.prototype = baseCreate(<span class=\"keyword\">this</span>.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<ul>\n<li>《JavaScript 高级程序设计》</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\">MDN - Function.prototype.bind()</a></li>\n<li><a href=\"http://web.jobbole.com/83642/\" target=\"_blank\">伯乐在线 - 深入浅出妙用 Javascript 中 apply、call、bind</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"call-and-apply\"><a href=\"#call-and-apply\" class=\"headerlink\" title=\"call() and apply()\"></a>call() and apply()</h3><p>call() 和 apply() 都是用于改变函数上下文而存在，即修改内部 this 指向</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">    x: <span class=\"number\">10</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> getX = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX())     <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.call(obj))     <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind()\"></a>bind()</h3><p>bind() 和 call()、apply() 函数一样，也是改变 this 指向。<br>bind() 方法创建一个新的函数, 当被调用时，将其 this 关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。<br>什么意思呢，举个例子  </p>\n<h5 id=\"创建绑定函数\"><a href=\"#创建绑定函数\" class=\"headerlink\" title=\"创建绑定函数\"></a>创建绑定函数</h5><p>依然是上面那个代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.bind(obj)) </span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * function () &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *   return this.x;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个函数</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getX.bind(obj)())   <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<p>bind() 方法返回一个函数，继承 getX 方法和将 this 绑定给了 obj  </p>\n<h5 id=\"给定参数序列\"><a href=\"#给定参数序列\" class=\"headerlink\" title=\"给定参数序列\"></a>给定参数序列</h5><p>bind() 的另一个常用方法为给定函数的参数序列，作为 bind() 的第二个参数跟在 this 后面。也称偏函数(Partial Functions)。看看使用方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> bindList = list.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bindList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>))  <span class=\"comment\">// [5,1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n<p>bind() 的第二个参数开始，会作为预设值传递给返回的函数  </p>\n<h3 id=\"polyfill\"><a href=\"#polyfill\" class=\"headerlink\" title=\"polyfill\"></a>polyfill</h3><p>bind() 在 ES5 中才被加入，看看 MDN 给的 polyfill 是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Function</span>.prototype.bind) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Function</span>.prototype.bind = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">oThis</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// this 为 func.bind() 中的 func</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"keyword\">this</span> !== <span class=\"string\">\"function\"</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">\"Function.prototype.bind - what is trying to be bound is not callable\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 除了传入的第一个参数用于绑定，其他参数会被预设为返回函数的传入值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>), </span><br><span class=\"line\">        fToBind = <span class=\"keyword\">this</span>, </span><br><span class=\"line\">        fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">        fBound = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">          <span class=\"comment\">/* instanceof 这步不是很理解，fNop 应该是空函数</span></span><br><span class=\"line\"><span class=\"comment\">           * oThis 不存在时，传入的 this 为返回函数当前执行的 this</span></span><br><span class=\"line\"><span class=\"comment\">           * Array.prototype.slice.call(arguments) 是调用返回函数时传入的参数</span></span><br><span class=\"line\"><span class=\"comment\">           * 把 bind 时预设的参数和后面传入的参数 concat 拼接在一起</span></span><br><span class=\"line\"><span class=\"comment\">           * 使用 apply 绑定 this 和参数</span></span><br><span class=\"line\"><span class=\"comment\">           */</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> fToBind.apply(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> fNOP</span><br><span class=\"line\">                                 ? <span class=\"keyword\">this</span></span><br><span class=\"line\">                                 : oThis || <span class=\"keyword\">this</span>,</span><br><span class=\"line\">                               aArgs.concat(<span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 返回函数继承 oThis 的原型链</span></span><br><span class=\"line\">    fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">    fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码的思路大致如下  </p>\n<ul>\n<li>判断被绑定函数是否为函数</li>\n<li>将 bind() 第二个及后面参数和返回函数的传入参数添加到一起</li>\n<li>创建一个新函数，使用 apply 绑定 this 和参数</li>\n<li>添加新函数原型链，继承自绑定对象</li>\n</ul>\n<p>函数实现依赖于 slice() concat() apply() 这些原生方法，并且创建的函数具有 prototype ，bind()没有。所以关于 prototype 这部分不是恨懂为什么要添加。  </p>\n<h3 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h3><p>刚才 polyfil 一段代码  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fNOP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">fNOP.prototype = <span class=\"keyword\">this</span>.prototype;</span><br><span class=\"line\">fBound.prototype = <span class=\"keyword\">new</span> fNOP();</span><br></pre></td></tr></table></figure>\n<p>这种方式被称为原型式继承(Prototypal Inheritance)，《JavaScript 高级程序设计》里有介绍<br>原型式继承借助原型可以基于已有对象创建新对象，同时还不必因此闯将自定义类型，实现函数如下  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</span><br><span class=\"line\">    F.prototype = o;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从本质上讲，object() 对传入函数执行了一次浅复制。  </p>\n<p>在 ES5 中添加了 Object.create() 方法来规范原型式继承 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create\" target=\"_blank\">Object.create</a></p>\n<p>在 underscore.js 代码中也出现了类似的方法，看看是如何实现的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Ctor = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;     <span class=\"comment\">// 全局的一个空函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baseCreate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prototype</span>) </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_.isObject(prototype)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 如果支持原生 Object.create()</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nativeCreate) <span class=\"keyword\">return</span> nativeCreate(prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">    Ctor.prototype = prototype;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = <span class=\"keyword\">new</span> Ctor;</span><br><span class=\"line\">    Ctor.prototype = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>方法也是一样的，通过这方法就可以很方便的创建原型式继承的函数</p>\n<hr>\n<p>其实此篇文章和 underscore.js 源码关系不大，我看源码 1.8.3 的实现方法有问题，在浏览器下会报错，所以这是我根据 polyfill 自己实现的 _.bind() 方法，顺便复习一下 bind() 函数的作用。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.bind = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, context</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果支持原生 bind 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nativeBind) </span><br><span class=\"line\">      <span class=\"keyword\">return</span> nativeBind.apply(func, slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!_.isFunction(func))</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TypeError</span>(<span class=\"string\">'bind must be a function'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> aArgs = slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> fBound = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> func.apply(context || <span class=\"keyword\">this</span>, aArgs.concat(slice.call(<span class=\"built_in\">arguments</span>)));</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 原型式继承</span></span><br><span class=\"line\">    fBound.prototype = baseCreate(<span class=\"keyword\">this</span>.prototype);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> fBound;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>参考文章：</p>\n<ul>\n<li>《JavaScript 高级程序设计》</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\">MDN - Function.prototype.bind()</a></li>\n<li><a href=\"http://web.jobbole.com/83642/\" target=\"_blank\">伯乐在线 - 深入浅出妙用 Javascript 中 apply、call、bind</a></li>\n</ul>\n"},{"layout":"post","title":"underscore.js 源码之 函数节流与去抖","date":"2017-06-14T09:36:00.000Z","_content":"\n这周专业开始实习了，一个学测控的专业(电子信息)，实习居然学两周安卓开发 -.- ，所以我决定继续在课上看 JS 了......  \n\n在 JS 中，有时候需要监听某些事件，比如滚动条滚动时间，滚动一次就会大量触发滚动事件，此时如果为这些时间绑定一些 DOM 操作，浏览器需要在短时间内大量计算，造成卡顿甚至崩溃。此时就需要为函数进行 throttle(节流) 或 debounce(去抖) 处理。  \n\n- throttle 让一定时间段连续调用的函数在 x 秒内执行一次\n- debounce 让一定时间段连续调用的函数只执行一次\n\n<a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a> 这篇文章形象的说明了两个函数的区别  \n\n>- throttle 策略的电梯。保证如果电梯第一个人进来后，15秒后准时运送一次，不等待。如果没有人，则待机\n>- debounce 策略的电梯。如果电梯里有人进来，等待15秒。如果又人进来，15秒等待重新计时，直到15秒超时，开始运送\n\n### throttle\n\n函数节流是对一段连续执行的函数设置定时器，判断事件间隔大于定时器设置事件，在重新执行\n\n`_.throttle(func, wait, [options])`  \n\n- func 需要控制节流的函数\n- wait 函数执行一次的时间\n- [可选项] {leading: false} 禁用第一次函数执行，{trailing: false} 禁用最后一次函数执行\n\n看看函数是怎么写的  \n\n```js\n/* options 为可选项\n * {leading: false} 禁用第一次函数执行\n * {trailing: false} 禁用最后一次函数执行\n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 函数上次执行时间\n    var previous = 0;\n    \n    if (!options) {\n      options = {};\n    }\n\n    // 延迟执行函数\n    var later = function() {\n      // 如果禁用第一次函数执行，上一次执行时间置 0，否则置为当前时间\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      // 返回绑定函数\n      result = func.apply(context, args);\n\n      if (!timeout) {\n        context = args = null;\n      }\n    };\n\n    return function() {\n      var now = _.now();\n      // 如果设置禁止第一次执行，later 函数会将 previous 置零，符合进入循环\n      if (!previous && options.leading === false) {\n        previous = now;\n      }\n      // 执行的时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n\n      /*\n       * 到了时间间隔后触发，remaining < 0\n       * 没设置禁止第一次执行，第一次触发 remaining < 0\n       * remaining > wait 表示系统时间被调过？\n       * 进入此循环则立即执行函数\n       */\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = now;\n        result = func.apply(context, args);\n\n        if (!timeout) {\n          context = args = null;\n        }\n\n        // 如果设置禁止最后一次出发，不进入循环\n        // 循环延迟时间由 remaining 决定，执行 later 函数\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    }\n};\n```\n\n_.throttle() 返回一个函数，根据 _.throttle() 传入参数不同设置不同的延迟函数，限制函数执行频率  \n\n- `remaining = wait - (now - preview)`;\n- 如果不传入第三个参数，第一次 `remaining < 0` 进入 `if(remaining < 0)` 这个循环，立刻执行函数，然后接下来执行 `else if()` 这个循环，根据 remaining 时间间隔执行 later 函数\n- 如果传入 `{leading: false}` 第一次 `if (!previous && options.leading === false)` 成立，`preview = now` ，`remaining > 0` ,不执行 `if(remaining < 0)` 循环，执行 `else if()` 循环，延迟执行 later 函数，然后 later 函数会为传入 `{leading: false}` 的函数设置 `previous = 0`，所以 `if (!previous && options.leading === false)` 始终成立\n- 如果传入 `{trailing: false}` ，前面执行和不传入参数一样，但始终不执行 `else if()`。当 `wait < (now - previous)` 时，立刻执行一次函数\n\n再来看看相对简单的 _.debounce() 函数  \n\n### debounce\n\n去抖是给一段连续执行的函数设置定时器，在第二次调用该函数，会清除前一次的定时器，在重新设置，如果上一个定时器还没执行，则意味着上一个定时器被取消了\n\n```js\n// immediate = true 立即执行函数\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timeStamp, result;\n    // 延迟函数\n    var later = function() {\n      var last = _.now() - timeStamp;\n      // last < wait 继续触发 later 函数，延迟执行\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n\n        // immediate = true 也会进入这个循环，但已经执行过函数了，所以这里不能重复执行\n        if (!immediate) {\n          result = func.apply(context, args);\n\n          if (!timeout) {\n            context = args = null;\n          }\n        }\n      }\n    }\n\n    return function() {\n      timeStamp = _.now();\n      context = this;\n      args = arguments;\n\n      var callNow = immediate && !timeout;\n\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n    return result;\n};\n```\n\n判断相对简单\n- immediate = true，虽然会执行 `timeout = setTimeout(later, wait);`，但不处理，直接执行`if (callNow) {result = func.apply(context, args);}`\n- 不立即执行，则执行 `timeout = setTimeout(later, wait);`，`last < wait` 时，重复执行 `timeout = setTimeout(later, wait - last);`。直至 `last > wait`，执行函数。\n\n### 使用\n\n```js\nvar scroll = _.throttle(function(e){\n  console.log(e); \n}, 500);\nwindow.addEventListener('scroll', scroll, false);\n```\n\n```js\nvar scroll = _.debounce(function(e){\n  console.log(e); \n}, 500);\nwindow.addEventListener('scroll', scroll, false);\n```\n\n当然，如果至是要简单的给函数设置去抖，可以这么写\n\n```js\nfunction debounce(method, context) {\n    clearTimeout(method,tID);\n    method.tId = setTimeout(function() {\n        method.call(context);\n    }, 100);\n}\n```\n\n### 参考\n\n- 《JavaScript 高级程序设计》\n- <a href=\"http://www.cnblogs.com/zichi/p/5331426.html\" target=\"_blank\">一次发现underscore源码bug的经历以及对学术界『拿来主义』的思考</a>\n- <a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a>","source":"_posts/underscore-read-09-throttle-debounce.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore.js 源码之 函数节流与去抖\"\ndate:       2017-06-14 17:36:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n这周专业开始实习了，一个学测控的专业(电子信息)，实习居然学两周安卓开发 -.- ，所以我决定继续在课上看 JS 了......  \n\n在 JS 中，有时候需要监听某些事件，比如滚动条滚动时间，滚动一次就会大量触发滚动事件，此时如果为这些时间绑定一些 DOM 操作，浏览器需要在短时间内大量计算，造成卡顿甚至崩溃。此时就需要为函数进行 throttle(节流) 或 debounce(去抖) 处理。  \n\n- throttle 让一定时间段连续调用的函数在 x 秒内执行一次\n- debounce 让一定时间段连续调用的函数只执行一次\n\n<a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a> 这篇文章形象的说明了两个函数的区别  \n\n>- throttle 策略的电梯。保证如果电梯第一个人进来后，15秒后准时运送一次，不等待。如果没有人，则待机\n>- debounce 策略的电梯。如果电梯里有人进来，等待15秒。如果又人进来，15秒等待重新计时，直到15秒超时，开始运送\n\n### throttle\n\n函数节流是对一段连续执行的函数设置定时器，判断事件间隔大于定时器设置事件，在重新执行\n\n`_.throttle(func, wait, [options])`  \n\n- func 需要控制节流的函数\n- wait 函数执行一次的时间\n- [可选项] {leading: false} 禁用第一次函数执行，{trailing: false} 禁用最后一次函数执行\n\n看看函数是怎么写的  \n\n```js\n/* options 为可选项\n * {leading: false} 禁用第一次函数执行\n * {trailing: false} 禁用最后一次函数执行\n */\n_.throttle = function(func, wait, options) {\n    var context, args, result;\n    var timeout = null;\n    // 函数上次执行时间\n    var previous = 0;\n    \n    if (!options) {\n      options = {};\n    }\n\n    // 延迟执行函数\n    var later = function() {\n      // 如果禁用第一次函数执行，上一次执行时间置 0，否则置为当前时间\n      previous = options.leading === false ? 0 : _.now();\n      timeout = null;\n      // 返回绑定函数\n      result = func.apply(context, args);\n\n      if (!timeout) {\n        context = args = null;\n      }\n    };\n\n    return function() {\n      var now = _.now();\n      // 如果设置禁止第一次执行，later 函数会将 previous 置零，符合进入循环\n      if (!previous && options.leading === false) {\n        previous = now;\n      }\n      // 执行的时间\n      var remaining = wait - (now - previous);\n      context = this;\n      args = arguments;\n\n      /*\n       * 到了时间间隔后触发，remaining < 0\n       * 没设置禁止第一次执行，第一次触发 remaining < 0\n       * remaining > wait 表示系统时间被调过？\n       * 进入此循环则立即执行函数\n       */\n      if (remaining <= 0 || remaining > wait) {\n        if (timeout) {\n          clearTimeout(timeout);\n          timeout = null;\n        }\n\n        previous = now;\n        result = func.apply(context, args);\n\n        if (!timeout) {\n          context = args = null;\n        }\n\n        // 如果设置禁止最后一次出发，不进入循环\n        // 循环延迟时间由 remaining 决定，执行 later 函数\n      } else if (!timeout && options.trailing !== false) {\n        timeout = setTimeout(later, remaining);\n      }\n\n      return result;\n    }\n};\n```\n\n_.throttle() 返回一个函数，根据 _.throttle() 传入参数不同设置不同的延迟函数，限制函数执行频率  \n\n- `remaining = wait - (now - preview)`;\n- 如果不传入第三个参数，第一次 `remaining < 0` 进入 `if(remaining < 0)` 这个循环，立刻执行函数，然后接下来执行 `else if()` 这个循环，根据 remaining 时间间隔执行 later 函数\n- 如果传入 `{leading: false}` 第一次 `if (!previous && options.leading === false)` 成立，`preview = now` ，`remaining > 0` ,不执行 `if(remaining < 0)` 循环，执行 `else if()` 循环，延迟执行 later 函数，然后 later 函数会为传入 `{leading: false}` 的函数设置 `previous = 0`，所以 `if (!previous && options.leading === false)` 始终成立\n- 如果传入 `{trailing: false}` ，前面执行和不传入参数一样，但始终不执行 `else if()`。当 `wait < (now - previous)` 时，立刻执行一次函数\n\n再来看看相对简单的 _.debounce() 函数  \n\n### debounce\n\n去抖是给一段连续执行的函数设置定时器，在第二次调用该函数，会清除前一次的定时器，在重新设置，如果上一个定时器还没执行，则意味着上一个定时器被取消了\n\n```js\n// immediate = true 立即执行函数\n  _.debounce = function(func, wait, immediate) {\n    var timeout, args, context, timeStamp, result;\n    // 延迟函数\n    var later = function() {\n      var last = _.now() - timeStamp;\n      // last < wait 继续触发 later 函数，延迟执行\n      if (last < wait && last >= 0) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n\n        // immediate = true 也会进入这个循环，但已经执行过函数了，所以这里不能重复执行\n        if (!immediate) {\n          result = func.apply(context, args);\n\n          if (!timeout) {\n            context = args = null;\n          }\n        }\n      }\n    }\n\n    return function() {\n      timeStamp = _.now();\n      context = this;\n      args = arguments;\n\n      var callNow = immediate && !timeout;\n\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n\n      if (callNow) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n    return result;\n};\n```\n\n判断相对简单\n- immediate = true，虽然会执行 `timeout = setTimeout(later, wait);`，但不处理，直接执行`if (callNow) {result = func.apply(context, args);}`\n- 不立即执行，则执行 `timeout = setTimeout(later, wait);`，`last < wait` 时，重复执行 `timeout = setTimeout(later, wait - last);`。直至 `last > wait`，执行函数。\n\n### 使用\n\n```js\nvar scroll = _.throttle(function(e){\n  console.log(e); \n}, 500);\nwindow.addEventListener('scroll', scroll, false);\n```\n\n```js\nvar scroll = _.debounce(function(e){\n  console.log(e); \n}, 500);\nwindow.addEventListener('scroll', scroll, false);\n```\n\n当然，如果至是要简单的给函数设置去抖，可以这么写\n\n```js\nfunction debounce(method, context) {\n    clearTimeout(method,tID);\n    method.tId = setTimeout(function() {\n        method.call(context);\n    }, 100);\n}\n```\n\n### 参考\n\n- 《JavaScript 高级程序设计》\n- <a href=\"http://www.cnblogs.com/zichi/p/5331426.html\" target=\"_blank\">一次发现underscore源码bug的经历以及对学术界『拿来主义』的思考</a>\n- <a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a>","slug":"underscore-read-09-throttle-debounce","published":1,"updated":"2018-05-09T09:09:25.943Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41r002e2mhsqq8vgckw","content":"<p>这周专业开始实习了，一个学测控的专业(电子信息)，实习居然学两周安卓开发 -.- ，所以我决定继续在课上看 JS 了……  </p>\n<p>在 JS 中，有时候需要监听某些事件，比如滚动条滚动时间，滚动一次就会大量触发滚动事件，此时如果为这些时间绑定一些 DOM 操作，浏览器需要在短时间内大量计算，造成卡顿甚至崩溃。此时就需要为函数进行 throttle(节流) 或 debounce(去抖) 处理。  </p>\n<ul>\n<li>throttle 让一定时间段连续调用的函数在 x 秒内执行一次</li>\n<li>debounce 让一定时间段连续调用的函数只执行一次</li>\n</ul>\n<p><a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a> 这篇文章形象的说明了两个函数的区别  </p>\n<blockquote>\n<ul>\n<li>throttle 策略的电梯。保证如果电梯第一个人进来后，15秒后准时运送一次，不等待。如果没有人，则待机</li>\n<li>debounce 策略的电梯。如果电梯里有人进来，等待15秒。如果又人进来，15秒等待重新计时，直到15秒超时，开始运送</li>\n</ul>\n</blockquote>\n<h3 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h3><p>函数节流是对一段连续执行的函数设置定时器，判断事件间隔大于定时器设置事件，在重新执行</p>\n<p><code>_.throttle(func, wait, [options])</code>  </p>\n<ul>\n<li>func 需要控制节流的函数</li>\n<li>wait 函数执行一次的时间</li>\n<li>[可选项] {leading: false} 禁用第一次函数执行，{trailing: false} 禁用最后一次函数执行</li>\n</ul>\n<p>看看函数是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* options 为可选项</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;leading: false&#125; 禁用第一次函数执行</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;trailing: false&#125; 禁用最后一次函数执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 函数上次执行时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) &#123;</span><br><span class=\"line\">      options = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果禁用第一次函数执行，上一次执行时间置 0，否则置为当前时间</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 返回绑定函数</span></span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 如果设置禁止第一次执行，later 函数会将 previous 置零，符合进入循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 执行的时间</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 到了时间间隔后触发，remaining &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">       * 没设置禁止第一次执行，第一次触发 remaining &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">       * remaining &gt; wait 表示系统时间被调过？</span></span><br><span class=\"line\"><span class=\"comment\">       * 进入此循环则立即执行函数</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">          context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果设置禁止最后一次出发，不进入循环</span></span><br><span class=\"line\">        <span class=\"comment\">// 循环延迟时间由 remaining 决定，执行 later 函数</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.throttle() 返回一个函数，根据 _.throttle() 传入参数不同设置不同的延迟函数，限制函数执行频率  </p>\n<ul>\n<li><code>remaining = wait - (now - preview)</code>;</li>\n<li>如果不传入第三个参数，第一次 <code>remaining &lt; 0</code> 进入 <code>if(remaining &lt; 0)</code> 这个循环，立刻执行函数，然后接下来执行 <code>else if()</code> 这个循环，根据 remaining 时间间隔执行 later 函数</li>\n<li>如果传入 <code>{leading: false}</code> 第一次 <code>if (!previous &amp;&amp; options.leading === false)</code> 成立，<code>preview = now</code> ，<code>remaining &gt; 0</code> ,不执行 <code>if(remaining &lt; 0)</code> 循环，执行 <code>else if()</code> 循环，延迟执行 later 函数，然后 later 函数会为传入 <code>{leading: false}</code> 的函数设置 <code>previous = 0</code>，所以 <code>if (!previous &amp;&amp; options.leading === false)</code> 始终成立</li>\n<li>如果传入 <code>{trailing: false}</code> ，前面执行和不传入参数一样，但始终不执行 <code>else if()</code>。当 <code>wait &lt; (now - previous)</code> 时，立刻执行一次函数</li>\n</ul>\n<p>再来看看相对简单的 _.debounce() 函数  </p>\n<h3 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a>debounce</h3><p>去抖是给一段连续执行的函数设置定时器，在第二次调用该函数，会清除前一次的定时器，在重新设置，如果上一个定时器还没执行，则意味着上一个定时器被取消了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// immediate = true 立即执行函数</span></span><br><span class=\"line\">  _.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timeStamp, result;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timeStamp;</span><br><span class=\"line\">      <span class=\"comment\">// last &lt; wait 继续触发 later 函数，延迟执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// immediate = true 也会进入这个循环，但已经执行过函数了，所以这里不能重复执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">          result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      timeStamp = _.now();</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, wait);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断相对简单</p>\n<ul>\n<li>immediate = true，虽然会执行 <code>timeout = setTimeout(later, wait);</code>，但不处理，直接执行<code>if (callNow) {result = func.apply(context, args);}</code></li>\n<li>不立即执行，则执行 <code>timeout = setTimeout(later, wait);</code>，<code>last &lt; wait</code> 时，重复执行 <code>timeout = setTimeout(later, wait - last);</code>。直至 <code>last &gt; wait</code>，执行函数。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = _.throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); </span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = _.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); </span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>当然，如果至是要简单的给函数设置去抖，可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">method, context</span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(method,tID);</span><br><span class=\"line\">    method.tId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        method.call(context);</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《JavaScript 高级程序设计》</li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5331426.html\" target=\"_blank\">一次发现underscore源码bug的经历以及对学术界『拿来主义』的思考</a></li>\n<li><a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>这周专业开始实习了，一个学测控的专业(电子信息)，实习居然学两周安卓开发 -.- ，所以我决定继续在课上看 JS 了……  </p>\n<p>在 JS 中，有时候需要监听某些事件，比如滚动条滚动时间，滚动一次就会大量触发滚动事件，此时如果为这些时间绑定一些 DOM 操作，浏览器需要在短时间内大量计算，造成卡顿甚至崩溃。此时就需要为函数进行 throttle(节流) 或 debounce(去抖) 处理。  </p>\n<ul>\n<li>throttle 让一定时间段连续调用的函数在 x 秒内执行一次</li>\n<li>debounce 让一定时间段连续调用的函数只执行一次</li>\n</ul>\n<p><a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a> 这篇文章形象的说明了两个函数的区别  </p>\n<blockquote>\n<ul>\n<li>throttle 策略的电梯。保证如果电梯第一个人进来后，15秒后准时运送一次，不等待。如果没有人，则待机</li>\n<li>debounce 策略的电梯。如果电梯里有人进来，等待15秒。如果又人进来，15秒等待重新计时，直到15秒超时，开始运送</li>\n</ul>\n</blockquote>\n<h3 id=\"throttle\"><a href=\"#throttle\" class=\"headerlink\" title=\"throttle\"></a>throttle</h3><p>函数节流是对一段连续执行的函数设置定时器，判断事件间隔大于定时器设置事件，在重新执行</p>\n<p><code>_.throttle(func, wait, [options])</code>  </p>\n<ul>\n<li>func 需要控制节流的函数</li>\n<li>wait 函数执行一次的时间</li>\n<li>[可选项] {leading: false} 禁用第一次函数执行，{trailing: false} 禁用最后一次函数执行</li>\n</ul>\n<p>看看函数是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* options 为可选项</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;leading: false&#125; 禁用第一次函数执行</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;trailing: false&#125; 禁用最后一次函数执行</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">_.throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, options</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> context, args, result;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 函数上次执行时间</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> previous = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!options) &#123;</span><br><span class=\"line\">      options = &#123;&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 延迟执行函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果禁用第一次函数执行，上一次执行时间置 0，否则置为当前时间</span></span><br><span class=\"line\">      previous = options.leading === <span class=\"literal\">false</span> ? <span class=\"number\">0</span> : _.now();</span><br><span class=\"line\">      timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 返回绑定函数</span></span><br><span class=\"line\">      result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> now = _.now();</span><br><span class=\"line\">      <span class=\"comment\">// 如果设置禁止第一次执行，later 函数会将 previous 置零，符合进入循环</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!previous &amp;&amp; options.leading === <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 执行的时间</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> remaining = wait - (now - previous);</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">       * 到了时间间隔后触发，remaining &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">       * 没设置禁止第一次执行，第一次触发 remaining &lt; 0</span></span><br><span class=\"line\"><span class=\"comment\">       * remaining &gt; wait 表示系统时间被调过？</span></span><br><span class=\"line\"><span class=\"comment\">       * 进入此循环则立即执行函数</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (remaining &lt;= <span class=\"number\">0</span> || remaining &gt; wait) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (timeout) &#123;</span><br><span class=\"line\">          clearTimeout(timeout);</span><br><span class=\"line\">          timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        previous = now;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">          context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果设置禁止最后一次出发，不进入循环</span></span><br><span class=\"line\">        <span class=\"comment\">// 循环延迟时间由 remaining 决定，执行 later 函数</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!timeout &amp;&amp; options.trailing !== <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, remaining);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>_.throttle() 返回一个函数，根据 _.throttle() 传入参数不同设置不同的延迟函数，限制函数执行频率  </p>\n<ul>\n<li><code>remaining = wait - (now - preview)</code>;</li>\n<li>如果不传入第三个参数，第一次 <code>remaining &lt; 0</code> 进入 <code>if(remaining &lt; 0)</code> 这个循环，立刻执行函数，然后接下来执行 <code>else if()</code> 这个循环，根据 remaining 时间间隔执行 later 函数</li>\n<li>如果传入 <code>{leading: false}</code> 第一次 <code>if (!previous &amp;&amp; options.leading === false)</code> 成立，<code>preview = now</code> ，<code>remaining &gt; 0</code> ,不执行 <code>if(remaining &lt; 0)</code> 循环，执行 <code>else if()</code> 循环，延迟执行 later 函数，然后 later 函数会为传入 <code>{leading: false}</code> 的函数设置 <code>previous = 0</code>，所以 <code>if (!previous &amp;&amp; options.leading === false)</code> 始终成立</li>\n<li>如果传入 <code>{trailing: false}</code> ，前面执行和不传入参数一样，但始终不执行 <code>else if()</code>。当 <code>wait &lt; (now - previous)</code> 时，立刻执行一次函数</li>\n</ul>\n<p>再来看看相对简单的 _.debounce() 函数  </p>\n<h3 id=\"debounce\"><a href=\"#debounce\" class=\"headerlink\" title=\"debounce\"></a>debounce</h3><p>去抖是给一段连续执行的函数设置定时器，在第二次调用该函数，会清除前一次的定时器，在重新设置，如果上一个定时器还没执行，则意味着上一个定时器被取消了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// immediate = true 立即执行函数</span></span><br><span class=\"line\">  _.debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, wait, immediate</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeout, args, context, timeStamp, result;</span><br><span class=\"line\">    <span class=\"comment\">// 延迟函数</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> later = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> last = _.now() - timeStamp;</span><br><span class=\"line\">      <span class=\"comment\">// last &lt; wait 继续触发 later 函数，延迟执行</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (last &lt; wait &amp;&amp; last &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, wait - last);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        timeout = <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// immediate = true 也会进入这个循环，但已经执行过函数了，所以这里不能重复执行</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!immediate) &#123;</span><br><span class=\"line\">          result = func.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">            context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      timeStamp = _.now();</span><br><span class=\"line\">      context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!timeout) &#123;</span><br><span class=\"line\">        timeout = setTimeout(later, wait);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (callNow) &#123;</span><br><span class=\"line\">        result = func.apply(context, args);</span><br><span class=\"line\">        context = args = <span class=\"literal\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>判断相对简单</p>\n<ul>\n<li>immediate = true，虽然会执行 <code>timeout = setTimeout(later, wait);</code>，但不处理，直接执行<code>if (callNow) {result = func.apply(context, args);}</code></li>\n<li>不立即执行，则执行 <code>timeout = setTimeout(later, wait);</code>，<code>last &lt; wait</code> 时，重复执行 <code>timeout = setTimeout(later, wait - last);</code>。直至 <code>last &gt; wait</code>，执行函数。</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = _.throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); </span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> scroll = _.debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e); </span><br><span class=\"line\">&#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scroll, <span class=\"literal\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>当然，如果至是要简单的给函数设置去抖，可以这么写</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">method, context</span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(method,tID);</span><br><span class=\"line\">    method.tId = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        method.call(context);</span><br><span class=\"line\">    &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《JavaScript 高级程序设计》</li>\n<li><a href=\"http://www.cnblogs.com/zichi/p/5331426.html\" target=\"_blank\">一次发现underscore源码bug的经历以及对学术界『拿来主义』的思考</a></li>\n<li><a href=\"https://blog.coding.net/blog/the-difference-between-throttle-and-debounce-in-underscorejs\" target=\"_blank\">浅谈 Underscore.js 中 _.throttle 和 _.debounce 的差异</a></li>\n</ul>\n"},{"layout":"post","title":"underscore.js 源码之 缓存优化与尾调用","date":"2017-06-15T02:27:00.000Z","_content":"\n### 斐波纳数列\n\n斐波纳数列就是一串数列，后一项等于前两项之和，比如 1,1,2,3,5,8,11...  \n用 JS 计算第 n 个数的数字  \n\n```js\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n```\n\n这么写有严重的性能问题，每次调用递归非常耗费内存，每次递归都会保存上一次执行帧，所以当 Fibonacci(100) 时，就会发生堆栈溢出  \n\n优化方案有几种  \n\n### 1. 记忆缓存\n\nmemoize 方案在《JavaScript 忍者秘籍》里有提到，将昂贵的计算通过变量缓存起来，看看 underscore 是怎么写的  \n\n\n```js\n_.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      // 如果有 hasher 函数，根据 hasher 函数进行求值\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      // 如果缓存不存在，添加缓存\n      if(!_.has(memoize.cache, address)) {\n        memoize.cache[address] = func.apply(this, arguments);\n      }\n      \n      return memoize.cache[address];\n    };\n\n    memoize.cache = {};\n    return memoize;\n};\n```\n\n函数将已有变量缓存在 memoize.cache 内，减少计算\n\n### 迭代\n\n这是另一种方法了，即不使用递归，而使用 for 循环，毕竟循环比递归所需要的性能小的多  \n\n### 尾调用\n\n尾调用的意思是指在函数最后一步是调用另一个函数  \n\n```js\nfunction f(x) {\n    return g(x);\n}\n```\n\n下面这情况则不是尾调用\n\n```js\nfunction f(x) {\n    return g(x) + 1;\n}\n```\n\n尾调用的特殊之处在于他的调用  \n\n函数调用会在内存中生成一个调用帧，里面储存的是函数调用的变量等信息，在 f(x) 内调用了 g(x)，会在 g(x) 运算结束后返回给 f(x), g(x) 才会消失，若 g(x) 又调用了 h(x).... 以此类推，会形成一个调用栈，当调用次数太多，像 Fibonacci(100) ，会使调用栈溢出。  \n\n而尾调用则不一样，尾调用时函数最后一步操作，不需要保存外层函数的调用帧，比如 `return g(x) + 1` 最后一步是 `g(x) + 1`，就不符合。  \n因为尾调用最后一步操作是另一个函数，与外层函数无关，所以用内层函数取代外层函数调用帧即可。此时调用帧只有一层，大大的优化了性能，比如一个阶层函数\n\n```js\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\nfactorial(100, 1);      // 9.332621544394418e+157\n```\n\n### 参考\n- 《JavaScript 忍者秘籍》\n- <a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\">ES6 尾递归</a>\n\n","source":"_posts/underscore-read-10-memoize-tailCall.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore.js 源码之 缓存优化与尾调用\"\ndate:       2017-06-15 10:27:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n### 斐波纳数列\n\n斐波纳数列就是一串数列，后一项等于前两项之和，比如 1,1,2,3,5,8,11...  \n用 JS 计算第 n 个数的数字  \n\n```js\nfunction Fibonacci (n) {\n  if ( n <= 1 ) {return 1};\n  return Fibonacci(n - 1) + Fibonacci(n - 2);\n}\n```\n\n这么写有严重的性能问题，每次调用递归非常耗费内存，每次递归都会保存上一次执行帧，所以当 Fibonacci(100) 时，就会发生堆栈溢出  \n\n优化方案有几种  \n\n### 1. 记忆缓存\n\nmemoize 方案在《JavaScript 忍者秘籍》里有提到，将昂贵的计算通过变量缓存起来，看看 underscore 是怎么写的  \n\n\n```js\n_.memoize = function(func, hasher) {\n    var memoize = function(key) {\n      // 如果有 hasher 函数，根据 hasher 函数进行求值\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\n      // 如果缓存不存在，添加缓存\n      if(!_.has(memoize.cache, address)) {\n        memoize.cache[address] = func.apply(this, arguments);\n      }\n      \n      return memoize.cache[address];\n    };\n\n    memoize.cache = {};\n    return memoize;\n};\n```\n\n函数将已有变量缓存在 memoize.cache 内，减少计算\n\n### 迭代\n\n这是另一种方法了，即不使用递归，而使用 for 循环，毕竟循环比递归所需要的性能小的多  \n\n### 尾调用\n\n尾调用的意思是指在函数最后一步是调用另一个函数  \n\n```js\nfunction f(x) {\n    return g(x);\n}\n```\n\n下面这情况则不是尾调用\n\n```js\nfunction f(x) {\n    return g(x) + 1;\n}\n```\n\n尾调用的特殊之处在于他的调用  \n\n函数调用会在内存中生成一个调用帧，里面储存的是函数调用的变量等信息，在 f(x) 内调用了 g(x)，会在 g(x) 运算结束后返回给 f(x), g(x) 才会消失，若 g(x) 又调用了 h(x).... 以此类推，会形成一个调用栈，当调用次数太多，像 Fibonacci(100) ，会使调用栈溢出。  \n\n而尾调用则不一样，尾调用时函数最后一步操作，不需要保存外层函数的调用帧，比如 `return g(x) + 1` 最后一步是 `g(x) + 1`，就不符合。  \n因为尾调用最后一步操作是另一个函数，与外层函数无关，所以用内层函数取代外层函数调用帧即可。此时调用帧只有一层，大大的优化了性能，比如一个阶层函数\n\n```js\nfunction factorial(n, total) {\n  if (n === 1) return total;\n  return factorial(n - 1, n * total);\n}\nfactorial(100, 1);      // 9.332621544394418e+157\n```\n\n### 参考\n- 《JavaScript 忍者秘籍》\n- <a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\">ES6 尾递归</a>\n\n","slug":"underscore-read-10-memoize-tailCall","published":1,"updated":"2018-05-09T09:11:10.779Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41t002g2mhsuu37hp8j","content":"<h3 id=\"斐波纳数列\"><a href=\"#斐波纳数列\" class=\"headerlink\" title=\"斐波纳数列\"></a>斐波纳数列</h3><p>斐波纳数列就是一串数列，后一项等于前两项之和，比如 1,1,2,3,5,8,11…<br>用 JS 计算第 n 个数的数字  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这么写有严重的性能问题，每次调用递归非常耗费内存，每次递归都会保存上一次执行帧，所以当 Fibonacci(100) 时，就会发生堆栈溢出  </p>\n<p>优化方案有几种  </p>\n<h3 id=\"1-记忆缓存\"><a href=\"#1-记忆缓存\" class=\"headerlink\" title=\"1. 记忆缓存\"></a>1. 记忆缓存</h3><p>memoize 方案在《JavaScript 忍者秘籍》里有提到，将昂贵的计算通过变量缓存起来，看看 underscore 是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, hasher</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有 hasher 函数，根据 hasher 函数进行求值</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> address = <span class=\"string\">''</span> + (hasher ? hasher.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) : key);</span><br><span class=\"line\">      <span class=\"comment\">// 如果缓存不存在，添加缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_.has(memoize.cache, address)) &#123;</span><br><span class=\"line\">        memoize.cache[address] = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> memoize.cache[address];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    memoize.cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memoize;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数将已有变量缓存在 memoize.cache 内，减少计算</p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><p>这是另一种方法了，即不使用递归，而使用 for 循环，毕竟循环比递归所需要的性能小的多  </p>\n<h3 id=\"尾调用\"><a href=\"#尾调用\" class=\"headerlink\" title=\"尾调用\"></a>尾调用</h3><p>尾调用的意思是指在函数最后一步是调用另一个函数  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这情况则不是尾调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尾调用的特殊之处在于他的调用  </p>\n<p>函数调用会在内存中生成一个调用帧，里面储存的是函数调用的变量等信息，在 f(x) 内调用了 g(x)，会在 g(x) 运算结束后返回给 f(x), g(x) 才会消失，若 g(x) 又调用了 h(x)…. 以此类推，会形成一个调用栈，当调用次数太多，像 Fibonacci(100) ，会使调用栈溢出。  </p>\n<p>而尾调用则不一样，尾调用时函数最后一步操作，不需要保存外层函数的调用帧，比如 <code>return g(x) + 1</code> 最后一步是 <code>g(x) + 1</code>，就不符合。<br>因为尾调用最后一步操作是另一个函数，与外层函数无关，所以用内层函数取代外层函数调用帧即可。此时调用帧只有一层，大大的优化了性能，比如一个阶层函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">100</span>, <span class=\"number\">1</span>);      <span class=\"comment\">// 9.332621544394418e+157</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《JavaScript 忍者秘籍》</li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\">ES6 尾递归</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"斐波纳数列\"><a href=\"#斐波纳数列\" class=\"headerlink\" title=\"斐波纳数列\"></a>斐波纳数列</h3><p>斐波纳数列就是一串数列，后一项等于前两项之和，比如 1,1,2,3,5,8,11…<br>用 JS 计算第 n 个数的数字  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fibonacci</span> (<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( n &lt;= <span class=\"number\">1</span> ) &#123;<span class=\"keyword\">return</span> <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Fibonacci(n - <span class=\"number\">1</span>) + Fibonacci(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这么写有严重的性能问题，每次调用递归非常耗费内存，每次递归都会保存上一次执行帧，所以当 Fibonacci(100) 时，就会发生堆栈溢出  </p>\n<p>优化方案有几种  </p>\n<h3 id=\"1-记忆缓存\"><a href=\"#1-记忆缓存\" class=\"headerlink\" title=\"1. 记忆缓存\"></a>1. 记忆缓存</h3><p>memoize 方案在《JavaScript 忍者秘籍》里有提到，将昂贵的计算通过变量缓存起来，看看 underscore 是怎么写的  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">func, hasher</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> memoize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果有 hasher 函数，根据 hasher 函数进行求值</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> address = <span class=\"string\">''</span> + (hasher ? hasher.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>) : key);</span><br><span class=\"line\">      <span class=\"comment\">// 如果缓存不存在，添加缓存</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!_.has(memoize.cache, address)) &#123;</span><br><span class=\"line\">        memoize.cache[address] = func.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"keyword\">return</span> memoize.cache[address];</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    memoize.cache = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> memoize;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>函数将已有变量缓存在 memoize.cache 内，减少计算</p>\n<h3 id=\"迭代\"><a href=\"#迭代\" class=\"headerlink\" title=\"迭代\"></a>迭代</h3><p>这是另一种方法了，即不使用递归，而使用 for 循环，毕竟循环比递归所需要的性能小的多  </p>\n<h3 id=\"尾调用\"><a href=\"#尾调用\" class=\"headerlink\" title=\"尾调用\"></a>尾调用</h3><p>尾调用的意思是指在函数最后一步是调用另一个函数  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这情况则不是尾调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g(x) + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>尾调用的特殊之处在于他的调用  </p>\n<p>函数调用会在内存中生成一个调用帧，里面储存的是函数调用的变量等信息，在 f(x) 内调用了 g(x)，会在 g(x) 运算结束后返回给 f(x), g(x) 才会消失，若 g(x) 又调用了 h(x)…. 以此类推，会形成一个调用栈，当调用次数太多，像 Fibonacci(100) ，会使调用栈溢出。  </p>\n<p>而尾调用则不一样，尾调用时函数最后一步操作，不需要保存外层函数的调用帧，比如 <code>return g(x) + 1</code> 最后一步是 <code>g(x) + 1</code>，就不符合。<br>因为尾调用最后一步操作是另一个函数，与外层函数无关，所以用内层函数取代外层函数调用帧即可。此时调用帧只有一层，大大的优化了性能，比如一个阶层函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">n, total</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> factorial(n - <span class=\"number\">1</span>, n * total);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">factorial(<span class=\"number\">100</span>, <span class=\"number\">1</span>);      <span class=\"comment\">// 9.332621544394418e+157</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li>《JavaScript 忍者秘籍》</li>\n<li><a href=\"http://es6.ruanyifeng.com/#docs/function#尾调用优化\" target=\"_blank\">ES6 尾递归</a></li>\n</ul>\n"},{"layout":"post","title":"underscore.js 源码之 整体架构","date":"2017-06-15T09:16:00.000Z","_content":"\n这应该是源码阅读的最后一篇了，当然源码远不止这些，我只是提取出了在阅读中对我有帮助，值得记忆的地方来写文章。其中还有一些方法，比如 _.template()，这涉及到模板引擎 MVC 等知识，属于我下一个学习目标，在这里就先跳过。  \n\n### 方法调用\n\nunderscore 开放一个接口 `_`，和 jQuery 的 `$` 相似  \n\n```js\nvar _ = {}\n_.keys = function() { /* */}\n\nthis._ = _;     // 暴露给全局\n```\n\n然而源码的 `_` 不只是一个空对象，而是一个方法  \n\n```js\nvar _ = function(obj) {\n  // 如果 obj 是已创建的对象，则直接返回\n  if (obj instanceof _)\n    return obj;\n  // 如果当前调用函数上下文不是 _ 对象（比如 window），new 构造函数\n  if (!(this instanceof _))\n    return new _(obj);\n  \n  // 此时 this 必定是 _ , _.wrapped 保存 obj 参数\n  this._wrapped = obj;\n};\n```\n\n这有什么用呢？，这涉及到 OOP 调用\n\n### OOP\n\n```js\n_([1,2,3]).each(console.log);\n```\n\n这就是无 new  构造， ` _([1,2,3]) ` 先判断 `!(this instanceof _)` 为 true，返回 `new _(obj)` 在执行一次，保存 `_wrapped = [1,2,3]`。然后构造实例要调用 each 方法，each 方法被添加在了 prototype 上，所以可以顺利调用。\n\n### 添加方法到 prototype\n\n要让构造实例也能访问 each 等方法，就需要把方法添加到原型链上，源码通过 `_.mixin()` 实现了这个方法  \n\n```js\n_.mixin = function(obj) {\n  // _.functions(obj) 判断 obj 上的 funcion 属性\n  _.each(_.functions(obj), function(name) {\n    var func = _[name] = obj[name];\n    // 把方法添加到原型链上\n    _.prototype[name] = function() {\n      // 保存参数\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n\n      return result(this, func.apply(_, args));\n    }\n  })\n};\n\nvar result = function(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n};\n\n_.mixin(_);\n```\n\n先不看 result 函数，添加到原型链的方法返回一个函数，调用本身 `func.apply(_, args)` 其中 args 为 `_.wrapped` 的值和函数可能传递的值的集合。  \n此时的方法就被添加到了原型链上，就可以在构造函数中调用方法。  \n\n### 链式调用\n\n```js\n// chain 方法的链式调用\n_.chain([1,2,3])\n    .map(function(a) {return a * 2;})\n    .each(console.log);     // 报错\n\n// OOP 式的链式调用\n_([1,2,3])\n    .map(function(a) {return a * 2;})\n    .each(console.log);\n```\n\n如果要使用链式调用，则需要在每个函数最后  `return this` 语句，后一个方法才能继续使用。 \n\n而 _.chain() 调用方式正是用于解决这个问题   \n\n```js\n_.chain = function(obj) {\n  // 构造函数\n  var instance = _(obj);\n  instance._chain = true;\n  return instance;\n}\n```\n\n也是把 obj 值给 _，创建构造函数，而赋予 `._chain` 为 true，`return result()` 就会返回不同结果。  \n\n```js\nvar result = function(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n};\n```\n\n此时 `instance._chain` 为 true，函数继续返回 `_(obj).chain()` 让下一个方法继续添加链式条件\n\n\n\n\n\n","source":"_posts/underscore-read-11-oop.markdown","raw":"---\nlayout:     post\ntitle:      \"underscore.js 源码之 整体架构\"\ndate:       2017-06-15 17:16:00\ntags:\n    - JavaScript\n    - UnderScore\n---\n\n这应该是源码阅读的最后一篇了，当然源码远不止这些，我只是提取出了在阅读中对我有帮助，值得记忆的地方来写文章。其中还有一些方法，比如 _.template()，这涉及到模板引擎 MVC 等知识，属于我下一个学习目标，在这里就先跳过。  \n\n### 方法调用\n\nunderscore 开放一个接口 `_`，和 jQuery 的 `$` 相似  \n\n```js\nvar _ = {}\n_.keys = function() { /* */}\n\nthis._ = _;     // 暴露给全局\n```\n\n然而源码的 `_` 不只是一个空对象，而是一个方法  \n\n```js\nvar _ = function(obj) {\n  // 如果 obj 是已创建的对象，则直接返回\n  if (obj instanceof _)\n    return obj;\n  // 如果当前调用函数上下文不是 _ 对象（比如 window），new 构造函数\n  if (!(this instanceof _))\n    return new _(obj);\n  \n  // 此时 this 必定是 _ , _.wrapped 保存 obj 参数\n  this._wrapped = obj;\n};\n```\n\n这有什么用呢？，这涉及到 OOP 调用\n\n### OOP\n\n```js\n_([1,2,3]).each(console.log);\n```\n\n这就是无 new  构造， ` _([1,2,3]) ` 先判断 `!(this instanceof _)` 为 true，返回 `new _(obj)` 在执行一次，保存 `_wrapped = [1,2,3]`。然后构造实例要调用 each 方法，each 方法被添加在了 prototype 上，所以可以顺利调用。\n\n### 添加方法到 prototype\n\n要让构造实例也能访问 each 等方法，就需要把方法添加到原型链上，源码通过 `_.mixin()` 实现了这个方法  \n\n```js\n_.mixin = function(obj) {\n  // _.functions(obj) 判断 obj 上的 funcion 属性\n  _.each(_.functions(obj), function(name) {\n    var func = _[name] = obj[name];\n    // 把方法添加到原型链上\n    _.prototype[name] = function() {\n      // 保存参数\n      var args = [this._wrapped];\n      push.apply(args, arguments);\n\n      return result(this, func.apply(_, args));\n    }\n  })\n};\n\nvar result = function(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n};\n\n_.mixin(_);\n```\n\n先不看 result 函数，添加到原型链的方法返回一个函数，调用本身 `func.apply(_, args)` 其中 args 为 `_.wrapped` 的值和函数可能传递的值的集合。  \n此时的方法就被添加到了原型链上，就可以在构造函数中调用方法。  \n\n### 链式调用\n\n```js\n// chain 方法的链式调用\n_.chain([1,2,3])\n    .map(function(a) {return a * 2;})\n    .each(console.log);     // 报错\n\n// OOP 式的链式调用\n_([1,2,3])\n    .map(function(a) {return a * 2;})\n    .each(console.log);\n```\n\n如果要使用链式调用，则需要在每个函数最后  `return this` 语句，后一个方法才能继续使用。 \n\n而 _.chain() 调用方式正是用于解决这个问题   \n\n```js\n_.chain = function(obj) {\n  // 构造函数\n  var instance = _(obj);\n  instance._chain = true;\n  return instance;\n}\n```\n\n也是把 obj 值给 _，创建构造函数，而赋予 `._chain` 为 true，`return result()` 就会返回不同结果。  \n\n```js\nvar result = function(instance, obj) {\n  return instance._chain ? _(obj).chain() : obj;\n};\n```\n\n此时 `instance._chain` 为 true，函数继续返回 `_(obj).chain()` 让下一个方法继续添加链式条件\n\n\n\n\n\n","slug":"underscore-read-11-oop","published":1,"updated":"2018-05-09T09:12:58.907Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41u002j2mhsf66nsykt","content":"<p>这应该是源码阅读的最后一篇了，当然源码远不止这些，我只是提取出了在阅读中对我有帮助，值得记忆的地方来写文章。其中还有一些方法，比如 _.template()，这涉及到模板引擎 MVC 等知识，属于我下一个学习目标，在这里就先跳过。  </p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><p>underscore 开放一个接口 <code>_</code>，和 jQuery 的 <code>$</code> 相似  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = &#123;&#125;</span><br><span class=\"line\">_.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>._ = _;     <span class=\"comment\">// 暴露给全局</span></span><br></pre></td></tr></table></figure>\n<p>然而源码的 <code>_</code> 不只是一个空对象，而是一个方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 是已创建的对象，则直接返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> _)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前调用函数上下文不是 _ 对象（比如 window），new 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> _))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _(obj);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 此时 this 必定是 _ , _.wrapped 保存 obj 参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._wrapped = obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这有什么用呢？，这涉及到 OOP 调用</p>\n<h3 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]).each(<span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n<p>这就是无 new  构造， <code>_([1,2,3])</code> 先判断 <code>!(this instanceof _)</code> 为 true，返回 <code>new _(obj)</code> 在执行一次，保存 <code>_wrapped = [1,2,3]</code>。然后构造实例要调用 each 方法，each 方法被添加在了 prototype 上，所以可以顺利调用。</p>\n<h3 id=\"添加方法到-prototype\"><a href=\"#添加方法到-prototype\" class=\"headerlink\" title=\"添加方法到 prototype\"></a>添加方法到 prototype</h3><p>要让构造实例也能访问 each 等方法，就需要把方法添加到原型链上，源码通过 <code>_.mixin()</code> 实现了这个方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// _.functions(obj) 判断 obj 上的 funcion 属性</span></span><br><span class=\"line\">  _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> func = _[name] = obj[name];</span><br><span class=\"line\">    <span class=\"comment\">// 把方法添加到原型链上</span></span><br><span class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</span><br><span class=\"line\">      push.apply(args, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.mixin(_);</span><br></pre></td></tr></table></figure>\n<p>先不看 result 函数，添加到原型链的方法返回一个函数，调用本身 <code>func.apply(_, args)</code> 其中 args 为 <code>_.wrapped</code> 的值和函数可能传递的值的集合。<br>此时的方法就被添加到了原型链上，就可以在构造函数中调用方法。  </p>\n<h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chain 方法的链式调用</span></span><br><span class=\"line\">_.chain([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;<span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;&#125;)</span><br><span class=\"line\">    .each(<span class=\"built_in\">console</span>.log);     <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OOP 式的链式调用</span></span><br><span class=\"line\">_([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;<span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;&#125;)</span><br><span class=\"line\">    .each(<span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n<p>如果要使用链式调用，则需要在每个函数最后  <code>return this</code> 语句，后一个方法才能继续使用。 </p>\n<p>而 _.chain() 调用方式正是用于解决这个问题   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance = _(obj);</span><br><span class=\"line\">  instance._chain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也是把 obj 值给 _，创建构造函数，而赋予 <code>._chain</code> 为 true，<code>return result()</code> 就会返回不同结果。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时 <code>instance._chain</code> 为 true，函数继续返回 <code>_(obj).chain()</code> 让下一个方法继续添加链式条件</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这应该是源码阅读的最后一篇了，当然源码远不止这些，我只是提取出了在阅读中对我有帮助，值得记忆的地方来写文章。其中还有一些方法，比如 _.template()，这涉及到模板引擎 MVC 等知识，属于我下一个学习目标，在这里就先跳过。  </p>\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><p>underscore 开放一个接口 <code>_</code>，和 jQuery 的 <code>$</code> 相似  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = &#123;&#125;</span><br><span class=\"line\">_.keys = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* */</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">this</span>._ = _;     <span class=\"comment\">// 暴露给全局</span></span><br></pre></td></tr></table></figure>\n<p>然而源码的 <code>_</code> 不只是一个空对象，而是一个方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> _ = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果 obj 是已创建的对象，则直接返回</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj <span class=\"keyword\">instanceof</span> _)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  <span class=\"comment\">// 如果当前调用函数上下文不是 _ 对象（比如 window），new 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> _))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _(obj);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 此时 this 必定是 _ , _.wrapped 保存 obj 参数</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>._wrapped = obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这有什么用呢？，这涉及到 OOP 调用</p>\n<h3 id=\"OOP\"><a href=\"#OOP\" class=\"headerlink\" title=\"OOP\"></a>OOP</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]).each(<span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n<p>这就是无 new  构造， <code>_([1,2,3])</code> 先判断 <code>!(this instanceof _)</code> 为 true，返回 <code>new _(obj)</code> 在执行一次，保存 <code>_wrapped = [1,2,3]</code>。然后构造实例要调用 each 方法，each 方法被添加在了 prototype 上，所以可以顺利调用。</p>\n<h3 id=\"添加方法到-prototype\"><a href=\"#添加方法到-prototype\" class=\"headerlink\" title=\"添加方法到 prototype\"></a>添加方法到 prototype</h3><p>要让构造实例也能访问 each 等方法，就需要把方法添加到原型链上，源码通过 <code>_.mixin()</code> 实现了这个方法  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.mixin = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// _.functions(obj) 判断 obj 上的 funcion 属性</span></span><br><span class=\"line\">  _.each(_.functions(obj), <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> func = _[name] = obj[name];</span><br><span class=\"line\">    <span class=\"comment\">// 把方法添加到原型链上</span></span><br><span class=\"line\">    _.prototype[name] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 保存参数</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> args = [<span class=\"keyword\">this</span>._wrapped];</span><br><span class=\"line\">      push.apply(args, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> result(<span class=\"keyword\">this</span>, func.apply(_, args));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">_.mixin(_);</span><br></pre></td></tr></table></figure>\n<p>先不看 result 函数，添加到原型链的方法返回一个函数，调用本身 <code>func.apply(_, args)</code> 其中 args 为 <code>_.wrapped</code> 的值和函数可能传递的值的集合。<br>此时的方法就被添加到了原型链上，就可以在构造函数中调用方法。  </p>\n<h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// chain 方法的链式调用</span></span><br><span class=\"line\">_.chain([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;<span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;&#125;)</span><br><span class=\"line\">    .each(<span class=\"built_in\">console</span>.log);     <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// OOP 式的链式调用</span></span><br><span class=\"line\">_([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;<span class=\"keyword\">return</span> a * <span class=\"number\">2</span>;&#125;)</span><br><span class=\"line\">    .each(<span class=\"built_in\">console</span>.log);</span><br></pre></td></tr></table></figure>\n<p>如果要使用链式调用，则需要在每个函数最后  <code>return this</code> 语句，后一个方法才能继续使用。 </p>\n<p>而 _.chain() 调用方式正是用于解决这个问题   </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_.chain = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> instance = _(obj);</span><br><span class=\"line\">  instance._chain = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也是把 obj 值给 _，创建构造函数，而赋予 <code>._chain</code> 为 true，<code>return result()</code> 就会返回不同结果。  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">instance, obj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> instance._chain ? _(obj).chain() : obj;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>此时 <code>instance._chain</code> 为 true，函数继续返回 <code>_(obj).chain()</code> 让下一个方法继续添加链式条件</p>\n"},{"layout":"post","title":"从 Vue 源码学前端（01） —— 找到入口文件","date":"2017-12-24T11:32:00.000Z","_content":"\n### 引言\n\n距之前看 underscore 源码之后，我又开了个坑，这次看 Vue 源码。  \n\n看源码之前，首先要先明确一点，看源码的目的是什么，之前看 underscore 是为了「理解」 JavaScript，学习 JS 的特性、用法，去理解它，发现 JS 不一样的世界。妈蛋真是越说越玄。总之，之前看源码是为了从入门到掌握而打的基本功。\n\n而学习 Vue 呢，一开始是出于好奇，从来没见过 JS 还可以这么用，这么简便，自然就想去知道是怎么实现的。以前也看过一部分源码，比如前端路由的实现，双向绑定之类的，但仍然不过瘾。现在正好有时间，打算从头到尾看一遍，了解大神们是怎么构建工程，优化代码，造轮子的思想，神奇的功能等等等等。\n\n话不多说，万事开头难，先把东西下下来再说，从 GitHub 上 clone 项目下来，现在是 2.5.11 版本，先看看构造，哇一大堆，还好之前用过 vue-cli，入门了点 WebPack 知识，不至于看不懂。先把重点挑出来：\n\n- build：WebPack 及其他一些自动化工具的配置\n- dist：工程输出文件\n- example：例子，应该会很用用\n- src：项目代码全在这里吗\n- test：测试用的\n- package.json：这就不用说了\n\n### 输出文件\n\n先来瞟一眼 dist 里面的文件，除了 vue.js 和 vue.min.js 以外居然还有其他一堆文件，还好作者贴心的提供了 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/README.md\" target=\"_blank\">README.md</a>。\n\n![](http://p8hsqsg3r.bkt.clouddn.com/dist.readme.png)\n\n很明白，production 是两个 min 文件，用于项目正式使用。\n\n根据功能还分为 Full、Compiler、Runtime：\n\n- Full：包括 Compile 和 Runtime 两部分功能\n- Compile：compiling template strings into JavaScript render functions（我发现我能看到不会翻译）就是将 template 解析成 js 代码。\n- Runtime：除了 Compile 的其他功能，比如 Virtual DOM 等。\n\n根据使用方式分为 UMD、CommonJS、ES Module：\n\n- UMD：JS 正常的加载方式，源码是长这样，很熟悉。\n\n```js\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.Vue = factory());\n}(this, (function () { 'use strict';\n// ...\n})));\n```\n\n- CommonJS：Node 的加载方式，就是你用 require() 方法调用加载的是这个文件。最后一行： module.exports = Vue$3;\n- ES Module：ES6 的加载方式，import 方式调用的是这个文件。和 CommonJS 源码一样，只有最后一行不同：export default Vue$3;\n\nmodule.exports 和 export 有什么区别？\n\n我们知道 Node 是根据 CommonJS 引用规范的，每个文件就是一个模块，有着自己的作用域，module 代表的就是模块本身，其中 exports 属性是对外的接口，加载某个模块，就是加载 module.exports。而 Node 还给每个模块提供了一个 exports 变量：var exports = module.exports。所以 exports 或 module.exports 指向了新的对象，exports 和 module.exports 就切断了联系。\n\nES6 则是用 export 和 import 来导出导入模块，export 不同的是可以按需加载。\n\n### 查找入口文件\n\n看一下 package.json 的 script。\n\n```json\n\"dev\": \"rollup -w -c build/config.js --environment TARGET:web-full-dev\",\n\"dev:cjs\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-cjs\",\n\"dev:esm\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-esm\",\n\"dev:test\": \"karma start test/unit/karma.dev.config.js\",\n\"dev:ssr\": \"rollup -w -c build/config.js --environment TARGET:web-server-renderer\",\n\"dev:compiler\": \"rollup -w -c build/config.js --environment TARGET:web-compiler \",\n\"dev:weex\": \"rollup -w -c build/config.js --environment TARGET:weex-framework\",\n\"dev:weex:factory\": \"rollup -w -c build/config.js --environment TARGET:weex-factory\",\n\"dev:weex:compiler\": \"rollup -w -c build/config.js --environment TARGET:weex-compiler \"\n```\n\nRollup 是一个 JavaScript 模块打包器，不同的 dist 输出就是根据 Rollup 来控制的，可以看到引用的文件是 build/config.js，在看看 build/config.js。\n\n```js\nconst builds = {\n  // Runtime only (CommonJS). Used by bundlers e.g. Webpack & Browserify\n  'web-runtime-cjs': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.common.js'),\n    format: 'cjs',\n    banner\n  },\n  // Runtime+compiler CommonJS build (CommonJS)\n  'web-full-cjs': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.common.js'),\n    format: 'cjs',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n  // ...\n}\n```\n\nresolve 是一个查找文件的函数，不重要，entry-runtime.js 和 entry-runtime-with-compiler 分别是 Runtime 和 Full 版，看一下这两个文件。\n\nentry-runtime.js\n\n```js\n/* @flow */\nimport Vue from './runtime/index'\nexport default Vue\n```\n\nentry-runtime-with-compiler.js\n\n```js\nimport config from 'core/config'\nimport { warn, cached } from 'core/util/index'\nimport { mark, measure } from 'core/util/perf'\n\nimport Vue from './runtime/index'\nimport { query } from './util/index'\nimport { compileToFunctions } from './compiler/index'\nimport { shouldDecodeNewlines, shouldDecodeNewlinesForHref } from './util/compat'\n// ...\nexport default Vue\n```\n\n这些多出来的，就是 template 解析器的函数了，现在重点不是 template，可以看到两个文件都引用了 ./runtime/index，跟着代码查过去。\n\n```js\n/* @flow */\n\nimport Vue from 'core/index'\nimport config from 'core/config'\nimport { extend, noop } from 'shared/util'\nimport { mountComponent } from 'core/instance/lifecycle'\nimport { devtools, inBrowser, isChrome } from 'core/util/index'\n\nimport {\n  query,\n  mustUseProp,\n  isReservedTag,\n  isReservedAttr,\n  getTagNamespace,\n  isUnknownElement\n} from 'web/util/index'\n\nimport { patch } from './patch'\nimport platformDirectives from './directives/index'\nimport platformComponents from './components/index'\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp\nVue.config.isReservedTag = isReservedTag\nVue.config.isReservedAttr = isReservedAttr\nVue.config.getTagNamespace = getTagNamespace\nVue.config.isUnknownElement = isUnknownElement\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives)\nextend(Vue.options.components, platformComponents)\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// devtools global hook\n/* istanbul ignore next */\nVue.nextTick(() => {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue)\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      )\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      `You are running Vue in development mode.\\n` +\n      `Make sure to turn on production mode when deploying for production.\\n` +\n      `See more tips at https://vuejs.org/guide/deployment.html`\n    )\n  }\n}, 0)\n\nexport default Vue\n```\n\n妙呀，我感觉我找到入口了，可以从这个文件和 core/index 文件开始看了。\n\n","source":"_posts/vue-01-find-input.markdown","raw":"---\nlayout:     post\ntitle:      \"从 Vue 源码学前端（01） —— 找到入口文件\"\ndate:       2017-12-24 19:32:00\ntags:\n    - Vue\n---\n\n### 引言\n\n距之前看 underscore 源码之后，我又开了个坑，这次看 Vue 源码。  \n\n看源码之前，首先要先明确一点，看源码的目的是什么，之前看 underscore 是为了「理解」 JavaScript，学习 JS 的特性、用法，去理解它，发现 JS 不一样的世界。妈蛋真是越说越玄。总之，之前看源码是为了从入门到掌握而打的基本功。\n\n而学习 Vue 呢，一开始是出于好奇，从来没见过 JS 还可以这么用，这么简便，自然就想去知道是怎么实现的。以前也看过一部分源码，比如前端路由的实现，双向绑定之类的，但仍然不过瘾。现在正好有时间，打算从头到尾看一遍，了解大神们是怎么构建工程，优化代码，造轮子的思想，神奇的功能等等等等。\n\n话不多说，万事开头难，先把东西下下来再说，从 GitHub 上 clone 项目下来，现在是 2.5.11 版本，先看看构造，哇一大堆，还好之前用过 vue-cli，入门了点 WebPack 知识，不至于看不懂。先把重点挑出来：\n\n- build：WebPack 及其他一些自动化工具的配置\n- dist：工程输出文件\n- example：例子，应该会很用用\n- src：项目代码全在这里吗\n- test：测试用的\n- package.json：这就不用说了\n\n### 输出文件\n\n先来瞟一眼 dist 里面的文件，除了 vue.js 和 vue.min.js 以外居然还有其他一堆文件，还好作者贴心的提供了 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/README.md\" target=\"_blank\">README.md</a>。\n\n![](http://p8hsqsg3r.bkt.clouddn.com/dist.readme.png)\n\n很明白，production 是两个 min 文件，用于项目正式使用。\n\n根据功能还分为 Full、Compiler、Runtime：\n\n- Full：包括 Compile 和 Runtime 两部分功能\n- Compile：compiling template strings into JavaScript render functions（我发现我能看到不会翻译）就是将 template 解析成 js 代码。\n- Runtime：除了 Compile 的其他功能，比如 Virtual DOM 等。\n\n根据使用方式分为 UMD、CommonJS、ES Module：\n\n- UMD：JS 正常的加载方式，源码是长这样，很熟悉。\n\n```js\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n    typeof define === 'function' && define.amd ? define(factory) :\n    (global.Vue = factory());\n}(this, (function () { 'use strict';\n// ...\n})));\n```\n\n- CommonJS：Node 的加载方式，就是你用 require() 方法调用加载的是这个文件。最后一行： module.exports = Vue$3;\n- ES Module：ES6 的加载方式，import 方式调用的是这个文件。和 CommonJS 源码一样，只有最后一行不同：export default Vue$3;\n\nmodule.exports 和 export 有什么区别？\n\n我们知道 Node 是根据 CommonJS 引用规范的，每个文件就是一个模块，有着自己的作用域，module 代表的就是模块本身，其中 exports 属性是对外的接口，加载某个模块，就是加载 module.exports。而 Node 还给每个模块提供了一个 exports 变量：var exports = module.exports。所以 exports 或 module.exports 指向了新的对象，exports 和 module.exports 就切断了联系。\n\nES6 则是用 export 和 import 来导出导入模块，export 不同的是可以按需加载。\n\n### 查找入口文件\n\n看一下 package.json 的 script。\n\n```json\n\"dev\": \"rollup -w -c build/config.js --environment TARGET:web-full-dev\",\n\"dev:cjs\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-cjs\",\n\"dev:esm\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-esm\",\n\"dev:test\": \"karma start test/unit/karma.dev.config.js\",\n\"dev:ssr\": \"rollup -w -c build/config.js --environment TARGET:web-server-renderer\",\n\"dev:compiler\": \"rollup -w -c build/config.js --environment TARGET:web-compiler \",\n\"dev:weex\": \"rollup -w -c build/config.js --environment TARGET:weex-framework\",\n\"dev:weex:factory\": \"rollup -w -c build/config.js --environment TARGET:weex-factory\",\n\"dev:weex:compiler\": \"rollup -w -c build/config.js --environment TARGET:weex-compiler \"\n```\n\nRollup 是一个 JavaScript 模块打包器，不同的 dist 输出就是根据 Rollup 来控制的，可以看到引用的文件是 build/config.js，在看看 build/config.js。\n\n```js\nconst builds = {\n  // Runtime only (CommonJS). Used by bundlers e.g. Webpack & Browserify\n  'web-runtime-cjs': {\n    entry: resolve('web/entry-runtime.js'),\n    dest: resolve('dist/vue.runtime.common.js'),\n    format: 'cjs',\n    banner\n  },\n  // Runtime+compiler CommonJS build (CommonJS)\n  'web-full-cjs': {\n    entry: resolve('web/entry-runtime-with-compiler.js'),\n    dest: resolve('dist/vue.common.js'),\n    format: 'cjs',\n    alias: { he: './entity-decoder' },\n    banner\n  },\n  // ...\n}\n```\n\nresolve 是一个查找文件的函数，不重要，entry-runtime.js 和 entry-runtime-with-compiler 分别是 Runtime 和 Full 版，看一下这两个文件。\n\nentry-runtime.js\n\n```js\n/* @flow */\nimport Vue from './runtime/index'\nexport default Vue\n```\n\nentry-runtime-with-compiler.js\n\n```js\nimport config from 'core/config'\nimport { warn, cached } from 'core/util/index'\nimport { mark, measure } from 'core/util/perf'\n\nimport Vue from './runtime/index'\nimport { query } from './util/index'\nimport { compileToFunctions } from './compiler/index'\nimport { shouldDecodeNewlines, shouldDecodeNewlinesForHref } from './util/compat'\n// ...\nexport default Vue\n```\n\n这些多出来的，就是 template 解析器的函数了，现在重点不是 template，可以看到两个文件都引用了 ./runtime/index，跟着代码查过去。\n\n```js\n/* @flow */\n\nimport Vue from 'core/index'\nimport config from 'core/config'\nimport { extend, noop } from 'shared/util'\nimport { mountComponent } from 'core/instance/lifecycle'\nimport { devtools, inBrowser, isChrome } from 'core/util/index'\n\nimport {\n  query,\n  mustUseProp,\n  isReservedTag,\n  isReservedAttr,\n  getTagNamespace,\n  isUnknownElement\n} from 'web/util/index'\n\nimport { patch } from './patch'\nimport platformDirectives from './directives/index'\nimport platformComponents from './components/index'\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp\nVue.config.isReservedTag = isReservedTag\nVue.config.isReservedAttr = isReservedAttr\nVue.config.getTagNamespace = getTagNamespace\nVue.config.isUnknownElement = isUnknownElement\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives)\nextend(Vue.options.components, platformComponents)\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop\n\n// public mount method\nVue.prototype.$mount = function (\n  el?: string | Element,\n  hydrating?: boolean\n): Component {\n  el = el && inBrowser ? query(el) : undefined\n  return mountComponent(this, el, hydrating)\n}\n\n// devtools global hook\n/* istanbul ignore next */\nVue.nextTick(() => {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue)\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      )\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      `You are running Vue in development mode.\\n` +\n      `Make sure to turn on production mode when deploying for production.\\n` +\n      `See more tips at https://vuejs.org/guide/deployment.html`\n    )\n  }\n}, 0)\n\nexport default Vue\n```\n\n妙呀，我感觉我找到入口了，可以从这个文件和 core/index 文件开始看了。\n\n","slug":"vue-01-find-input","published":1,"updated":"2018-05-10T03:11:57.206Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41w002k2mhstureysto","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>距之前看 underscore 源码之后，我又开了个坑，这次看 Vue 源码。  </p>\n<p>看源码之前，首先要先明确一点，看源码的目的是什么，之前看 underscore 是为了「理解」 JavaScript，学习 JS 的特性、用法，去理解它，发现 JS 不一样的世界。妈蛋真是越说越玄。总之，之前看源码是为了从入门到掌握而打的基本功。</p>\n<p>而学习 Vue 呢，一开始是出于好奇，从来没见过 JS 还可以这么用，这么简便，自然就想去知道是怎么实现的。以前也看过一部分源码，比如前端路由的实现，双向绑定之类的，但仍然不过瘾。现在正好有时间，打算从头到尾看一遍，了解大神们是怎么构建工程，优化代码，造轮子的思想，神奇的功能等等等等。</p>\n<p>话不多说，万事开头难，先把东西下下来再说，从 GitHub 上 clone 项目下来，现在是 2.5.11 版本，先看看构造，哇一大堆，还好之前用过 vue-cli，入门了点 WebPack 知识，不至于看不懂。先把重点挑出来：</p>\n<ul>\n<li>build：WebPack 及其他一些自动化工具的配置</li>\n<li>dist：工程输出文件</li>\n<li>example：例子，应该会很用用</li>\n<li>src：项目代码全在这里吗</li>\n<li>test：测试用的</li>\n<li>package.json：这就不用说了</li>\n</ul>\n<h3 id=\"输出文件\"><a href=\"#输出文件\" class=\"headerlink\" title=\"输出文件\"></a>输出文件</h3><p>先来瞟一眼 dist 里面的文件，除了 vue.js 和 vue.min.js 以外居然还有其他一堆文件，还好作者贴心的提供了 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/README.md\" target=\"_blank\">README.md</a>。</p>\n<p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/dist.readme.png\" alt=\"\"></p>\n<p>很明白，production 是两个 min 文件，用于项目正式使用。</p>\n<p>根据功能还分为 Full、Compiler、Runtime：</p>\n<ul>\n<li>Full：包括 Compile 和 Runtime 两部分功能</li>\n<li>Compile：compiling template strings into JavaScript render functions（我发现我能看到不会翻译）就是将 template 解析成 js 代码。</li>\n<li>Runtime：除了 Compile 的其他功能，比如 Virtual DOM 等。</li>\n</ul>\n<p>根据使用方式分为 UMD、CommonJS、ES Module：</p>\n<ul>\n<li>UMD：JS 正常的加载方式，源码是长这样，很熟悉。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global, factory</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">module</span>.exports = factory() :</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class=\"line\">    (global.Vue = factory());</span><br><span class=\"line\">&#125;(<span class=\"keyword\">this</span>, (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"string\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CommonJS：Node 的加载方式，就是你用 require() 方法调用加载的是这个文件。最后一行： module.exports = Vue$3;</li>\n<li>ES Module：ES6 的加载方式，import 方式调用的是这个文件。和 CommonJS 源码一样，只有最后一行不同：export default Vue$3;</li>\n</ul>\n<p>module.exports 和 export 有什么区别？</p>\n<p>我们知道 Node 是根据 CommonJS 引用规范的，每个文件就是一个模块，有着自己的作用域，module 代表的就是模块本身，其中 exports 属性是对外的接口，加载某个模块，就是加载 module.exports。而 Node 还给每个模块提供了一个 exports 变量：var exports = module.exports。所以 exports 或 module.exports 指向了新的对象，exports 和 module.exports 就切断了联系。</p>\n<p>ES6 则是用 export 和 import 来导出导入模块，export 不同的是可以按需加载。</p>\n<h3 id=\"查找入口文件\"><a href=\"#查找入口文件\" class=\"headerlink\" title=\"查找入口文件\"></a>查找入口文件</h3><p>看一下 package.json 的 script。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"rollup -w -c build/config.js --environment TARGET:web-full-dev\",</span><br><span class=\"line\">\"dev:cjs\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-cjs\",</span><br><span class=\"line\">\"dev:esm\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-esm\",</span><br><span class=\"line\">\"dev:test\": \"karma start test/unit/karma.dev.config.js\",</span><br><span class=\"line\">\"dev:ssr\": \"rollup -w -c build/config.js --environment TARGET:web-server-renderer\",</span><br><span class=\"line\">\"dev:compiler\": \"rollup -w -c build/config.js --environment TARGET:web-compiler \",</span><br><span class=\"line\">\"dev:weex\": \"rollup -w -c build/config.js --environment TARGET:weex-framework\",</span><br><span class=\"line\">\"dev:weex:factory\": \"rollup -w -c build/config.js --environment TARGET:weex-factory\",</span><br><span class=\"line\">\"dev:weex:compiler\": \"rollup -w -c build/config.js --environment TARGET:weex-compiler \"</span><br></pre></td></tr></table></figure>\n<p>Rollup 是一个 JavaScript 模块打包器，不同的 dist 输出就是根据 Rollup 来控制的，可以看到引用的文件是 build/config.js，在看看 build/config.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> builds = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class=\"line\">  <span class=\"string\">'web-runtime-cjs'</span>: &#123;</span><br><span class=\"line\">    entry: resolve(<span class=\"string\">'web/entry-runtime.js'</span>),</span><br><span class=\"line\">    dest: resolve(<span class=\"string\">'dist/vue.runtime.common.js'</span>),</span><br><span class=\"line\">    format: <span class=\"string\">'cjs'</span>,</span><br><span class=\"line\">    banner</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class=\"line\">  <span class=\"string\">'web-full-cjs'</span>: &#123;</span><br><span class=\"line\">    entry: resolve(<span class=\"string\">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class=\"line\">    dest: resolve(<span class=\"string\">'dist/vue.common.js'</span>),</span><br><span class=\"line\">    format: <span class=\"string\">'cjs'</span>,</span><br><span class=\"line\">    alias: &#123; <span class=\"attr\">he</span>: <span class=\"string\">'./entity-decoder'</span> &#125;,</span><br><span class=\"line\">    banner</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolve 是一个查找文件的函数，不重要，entry-runtime.js 和 entry-runtime-with-compiler 分别是 Runtime 和 Full 版，看一下这两个文件。</p>\n<p>entry-runtime.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'./runtime/index'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>entry-runtime-with-compiler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'core/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; warn, cached &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mark, measure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/perf'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'./runtime/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; compileToFunctions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./compiler/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shouldDecodeNewlines, shouldDecodeNewlinesForHref &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util/compat'</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>这些多出来的，就是 template 解析器的函数了，现在重点不是 template，可以看到两个文件都引用了 ./runtime/index，跟着代码查过去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'core/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'core/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; extend, noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'shared/util'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/instance/lifecycle'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; devtools, inBrowser, isChrome &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  query,</span><br><span class=\"line\">  mustUseProp,</span><br><span class=\"line\">  isReservedTag,</span><br><span class=\"line\">  isReservedAttr,</span><br><span class=\"line\">  getTagNamespace,</span><br><span class=\"line\">  isUnknownElement</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'web/util/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; patch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./patch'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> platformDirectives <span class=\"keyword\">from</span> <span class=\"string\">'./directives/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> platformComponents <span class=\"keyword\">from</span> <span class=\"string\">'./components/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform specific utils</span></span><br><span class=\"line\">Vue.config.mustUseProp = mustUseProp</span><br><span class=\"line\">Vue.config.isReservedTag = isReservedTag</span><br><span class=\"line\">Vue.config.isReservedAttr = isReservedAttr</span><br><span class=\"line\">Vue.config.getTagNamespace = getTagNamespace</span><br><span class=\"line\">Vue.config.isUnknownElement = isUnknownElement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform runtime directives &amp; components</span></span><br><span class=\"line\">extend(Vue.options.directives, platformDirectives)</span><br><span class=\"line\">extend(Vue.options.components, platformComponents)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform patch function</span></span><br><span class=\"line\">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? query(el) : <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> mountComponent(<span class=\"keyword\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// devtools global hook</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.devtools) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (devtools) &#123;</span><br><span class=\"line\">      devtools.emit(<span class=\"string\">'init'</span>, Vue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; isChrome) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>[<span class=\"built_in\">console</span>.info ? <span class=\"string\">'info'</span> : <span class=\"string\">'log'</span>](</span><br><span class=\"line\">        <span class=\"string\">'Download the Vue Devtools extension for a better development experience:\\n'</span> +</span><br><span class=\"line\">        <span class=\"string\">'https://github.com/vuejs/vue-devtools'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp;</span><br><span class=\"line\">    config.productionTip !== <span class=\"literal\">false</span> &amp;&amp;</span><br><span class=\"line\">    inBrowser &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>[<span class=\"built_in\">console</span>.info ? <span class=\"string\">'info'</span> : <span class=\"string\">'log'</span>](</span><br><span class=\"line\">      <span class=\"string\">`You are running Vue in development mode.\\n`</span> +</span><br><span class=\"line\">      <span class=\"string\">`Make sure to turn on production mode when deploying for production.\\n`</span> +</span><br><span class=\"line\">      <span class=\"string\">`See more tips at https://vuejs.org/guide/deployment.html`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>妙呀，我感觉我找到入口了，可以从这个文件和 core/index 文件开始看了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>距之前看 underscore 源码之后，我又开了个坑，这次看 Vue 源码。  </p>\n<p>看源码之前，首先要先明确一点，看源码的目的是什么，之前看 underscore 是为了「理解」 JavaScript，学习 JS 的特性、用法，去理解它，发现 JS 不一样的世界。妈蛋真是越说越玄。总之，之前看源码是为了从入门到掌握而打的基本功。</p>\n<p>而学习 Vue 呢，一开始是出于好奇，从来没见过 JS 还可以这么用，这么简便，自然就想去知道是怎么实现的。以前也看过一部分源码，比如前端路由的实现，双向绑定之类的，但仍然不过瘾。现在正好有时间，打算从头到尾看一遍，了解大神们是怎么构建工程，优化代码，造轮子的思想，神奇的功能等等等等。</p>\n<p>话不多说，万事开头难，先把东西下下来再说，从 GitHub 上 clone 项目下来，现在是 2.5.11 版本，先看看构造，哇一大堆，还好之前用过 vue-cli，入门了点 WebPack 知识，不至于看不懂。先把重点挑出来：</p>\n<ul>\n<li>build：WebPack 及其他一些自动化工具的配置</li>\n<li>dist：工程输出文件</li>\n<li>example：例子，应该会很用用</li>\n<li>src：项目代码全在这里吗</li>\n<li>test：测试用的</li>\n<li>package.json：这就不用说了</li>\n</ul>\n<h3 id=\"输出文件\"><a href=\"#输出文件\" class=\"headerlink\" title=\"输出文件\"></a>输出文件</h3><p>先来瞟一眼 dist 里面的文件，除了 vue.js 和 vue.min.js 以外居然还有其他一堆文件，还好作者贴心的提供了 <a href=\"https://github.com/vuejs/vue/blob/dev/dist/README.md\" target=\"_blank\">README.md</a>。</p>\n<p><img src=\"http://p8hsqsg3r.bkt.clouddn.com/dist.readme.png\" alt=\"\"></p>\n<p>很明白，production 是两个 min 文件，用于项目正式使用。</p>\n<p>根据功能还分为 Full、Compiler、Runtime：</p>\n<ul>\n<li>Full：包括 Compile 和 Runtime 两部分功能</li>\n<li>Compile：compiling template strings into JavaScript render functions（我发现我能看到不会翻译）就是将 template 解析成 js 代码。</li>\n<li>Runtime：除了 Compile 的其他功能，比如 Virtual DOM 等。</li>\n</ul>\n<p>根据使用方式分为 UMD、CommonJS、ES Module：</p>\n<ul>\n<li>UMD：JS 正常的加载方式，源码是长这样，很熟悉。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">global, factory</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> exports === <span class=\"string\">'object'</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">module</span> !== <span class=\"string\">'undefined'</span> ? <span class=\"built_in\">module</span>.exports = factory() :</span><br><span class=\"line\">    <span class=\"keyword\">typeof</span> define === <span class=\"string\">'function'</span> &amp;&amp; define.amd ? define(factory) :</span><br><span class=\"line\">    (global.Vue = factory());</span><br><span class=\"line\">&#125;(<span class=\"keyword\">this</span>, (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"string\">'use strict'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>CommonJS：Node 的加载方式，就是你用 require() 方法调用加载的是这个文件。最后一行： module.exports = Vue$3;</li>\n<li>ES Module：ES6 的加载方式，import 方式调用的是这个文件。和 CommonJS 源码一样，只有最后一行不同：export default Vue$3;</li>\n</ul>\n<p>module.exports 和 export 有什么区别？</p>\n<p>我们知道 Node 是根据 CommonJS 引用规范的，每个文件就是一个模块，有着自己的作用域，module 代表的就是模块本身，其中 exports 属性是对外的接口，加载某个模块，就是加载 module.exports。而 Node 还给每个模块提供了一个 exports 变量：var exports = module.exports。所以 exports 或 module.exports 指向了新的对象，exports 和 module.exports 就切断了联系。</p>\n<p>ES6 则是用 export 和 import 来导出导入模块，export 不同的是可以按需加载。</p>\n<h3 id=\"查找入口文件\"><a href=\"#查找入口文件\" class=\"headerlink\" title=\"查找入口文件\"></a>查找入口文件</h3><p>看一下 package.json 的 script。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"dev\": \"rollup -w -c build/config.js --environment TARGET:web-full-dev\",</span><br><span class=\"line\">\"dev:cjs\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-cjs\",</span><br><span class=\"line\">\"dev:esm\": \"rollup -w -c build/config.js --environment TARGET:web-runtime-esm\",</span><br><span class=\"line\">\"dev:test\": \"karma start test/unit/karma.dev.config.js\",</span><br><span class=\"line\">\"dev:ssr\": \"rollup -w -c build/config.js --environment TARGET:web-server-renderer\",</span><br><span class=\"line\">\"dev:compiler\": \"rollup -w -c build/config.js --environment TARGET:web-compiler \",</span><br><span class=\"line\">\"dev:weex\": \"rollup -w -c build/config.js --environment TARGET:weex-framework\",</span><br><span class=\"line\">\"dev:weex:factory\": \"rollup -w -c build/config.js --environment TARGET:weex-factory\",</span><br><span class=\"line\">\"dev:weex:compiler\": \"rollup -w -c build/config.js --environment TARGET:weex-compiler \"</span><br></pre></td></tr></table></figure>\n<p>Rollup 是一个 JavaScript 模块打包器，不同的 dist 输出就是根据 Rollup 来控制的，可以看到引用的文件是 build/config.js，在看看 build/config.js。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> builds = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// Runtime only (CommonJS). Used by bundlers e.g. Webpack &amp; Browserify</span></span><br><span class=\"line\">  <span class=\"string\">'web-runtime-cjs'</span>: &#123;</span><br><span class=\"line\">    entry: resolve(<span class=\"string\">'web/entry-runtime.js'</span>),</span><br><span class=\"line\">    dest: resolve(<span class=\"string\">'dist/vue.runtime.common.js'</span>),</span><br><span class=\"line\">    format: <span class=\"string\">'cjs'</span>,</span><br><span class=\"line\">    banner</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// Runtime+compiler CommonJS build (CommonJS)</span></span><br><span class=\"line\">  <span class=\"string\">'web-full-cjs'</span>: &#123;</span><br><span class=\"line\">    entry: resolve(<span class=\"string\">'web/entry-runtime-with-compiler.js'</span>),</span><br><span class=\"line\">    dest: resolve(<span class=\"string\">'dist/vue.common.js'</span>),</span><br><span class=\"line\">    format: <span class=\"string\">'cjs'</span>,</span><br><span class=\"line\">    alias: &#123; <span class=\"attr\">he</span>: <span class=\"string\">'./entity-decoder'</span> &#125;,</span><br><span class=\"line\">    banner</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolve 是一个查找文件的函数，不重要，entry-runtime.js 和 entry-runtime-with-compiler 分别是 Runtime 和 Full 版，看一下这两个文件。</p>\n<p>entry-runtime.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'./runtime/index'</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>entry-runtime-with-compiler.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'core/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; warn, cached &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mark, measure &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/perf'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'./runtime/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; query &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; compileToFunctions &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./compiler/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; shouldDecodeNewlines, shouldDecodeNewlinesForHref &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./util/compat'</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>这些多出来的，就是 template 解析器的函数了，现在重点不是 template，可以看到两个文件都引用了 ./runtime/index，跟着代码查过去。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* @flow */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'core/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> config <span class=\"keyword\">from</span> <span class=\"string\">'core/config'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; extend, noop &#125; <span class=\"keyword\">from</span> <span class=\"string\">'shared/util'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mountComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/instance/lifecycle'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; devtools, inBrowser, isChrome &#125; <span class=\"keyword\">from</span> <span class=\"string\">'core/util/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;</span><br><span class=\"line\">  query,</span><br><span class=\"line\">  mustUseProp,</span><br><span class=\"line\">  isReservedTag,</span><br><span class=\"line\">  isReservedAttr,</span><br><span class=\"line\">  getTagNamespace,</span><br><span class=\"line\">  isUnknownElement</span><br><span class=\"line\">&#125; <span class=\"keyword\">from</span> <span class=\"string\">'web/util/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; patch &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./patch'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> platformDirectives <span class=\"keyword\">from</span> <span class=\"string\">'./directives/index'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> platformComponents <span class=\"keyword\">from</span> <span class=\"string\">'./components/index'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform specific utils</span></span><br><span class=\"line\">Vue.config.mustUseProp = mustUseProp</span><br><span class=\"line\">Vue.config.isReservedTag = isReservedTag</span><br><span class=\"line\">Vue.config.isReservedAttr = isReservedAttr</span><br><span class=\"line\">Vue.config.getTagNamespace = getTagNamespace</span><br><span class=\"line\">Vue.config.isUnknownElement = isUnknownElement</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform runtime directives &amp; components</span></span><br><span class=\"line\">extend(Vue.options.directives, platformDirectives)</span><br><span class=\"line\">extend(Vue.options.components, platformComponents)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// install platform patch function</span></span><br><span class=\"line\">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// public mount method</span></span><br><span class=\"line\">Vue.prototype.$mount = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  el?: string | Element,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  hydrating?: boolean</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\"></span>): <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  el = el &amp;&amp; inBrowser ? query(el) : <span class=\"literal\">undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> mountComponent(<span class=\"keyword\">this</span>, el, hydrating)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// devtools global hook</span></span><br><span class=\"line\"><span class=\"comment\">/* istanbul ignore next */</span></span><br><span class=\"line\">Vue.nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (config.devtools) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (devtools) &#123;</span><br><span class=\"line\">      devtools.emit(<span class=\"string\">'init'</span>, Vue)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp; isChrome) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>[<span class=\"built_in\">console</span>.info ? <span class=\"string\">'info'</span> : <span class=\"string\">'log'</span>](</span><br><span class=\"line\">        <span class=\"string\">'Download the Vue Devtools extension for a better development experience:\\n'</span> +</span><br><span class=\"line\">        <span class=\"string\">'https://github.com/vuejs/vue-devtools'</span></span><br><span class=\"line\">      )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (process.env.NODE_ENV !== <span class=\"string\">'production'</span> &amp;&amp;</span><br><span class=\"line\">    config.productionTip !== <span class=\"literal\">false</span> &amp;&amp;</span><br><span class=\"line\">    inBrowser &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">console</span> !== <span class=\"string\">'undefined'</span></span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>[<span class=\"built_in\">console</span>.info ? <span class=\"string\">'info'</span> : <span class=\"string\">'log'</span>](</span><br><span class=\"line\">      <span class=\"string\">`You are running Vue in development mode.\\n`</span> +</span><br><span class=\"line\">      <span class=\"string\">`Make sure to turn on production mode when deploying for production.\\n`</span> +</span><br><span class=\"line\">      <span class=\"string\">`See more tips at https://vuejs.org/guide/deployment.html`</span></span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Vue</span><br></pre></td></tr></table></figure>\n<p>妙呀，我感觉我找到入口了，可以从这个文件和 core/index 文件开始看了。</p>\n"},{"layout":"post","title":"Vue 父子组件通信","date":"2017-04-27T01:27:00.000Z","_content":"\n### prop \n\n在组件中，子组件需要获取父组件数据，父组件使用 v-bind 动态绑定数据，子组件使用 prop 获取：  \n\n##### 父：\n```html\n<child v-bind:date=\"date\"></child>\n```\n\n##### 子：\n```js\nprops: {\n    date: {\n        type: String,\n        defalut: '',    //可以指定默认值\n    }\n}\n```\n\n### 单向数据流\n\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态。每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以当子组件修改 prop 时，Vue 会给出警告。  \n\n所以我们应该  \n\n- 定义一个局部变量，传递 prop 的值\n- 使用计算属性，处理 prop\n\n### 子组件传递数据  \n\n使用 v-on 绑定事件  \n\n- $on 监听\n- $emit 触发事件\n\n例子：  \n\n##### 父：\n\n```html\n<template>\n    <child v-on:change=\"changeBoo\"></child>\n</template>\n<script>\n    data() {\n        return {\n            booLean: false\n        }\n    }\n    methods: {\n        changeBoo() {\n            this.booLean = true;\n        }\n    }\n</script>\n```\n\n##### 子：\n\n```html\n<template>\n    <div v-on:click=\"change\"></div>\n</template>\n<script>\n    data() {\n        return {\n            booLean: false\n        }\n    },\n    methods: {\n        change() {\n            this.booLean = true;\n            this.$emit('change');   //触发\n        }\n    }\n</script>\n```\n\n在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件  \n\n<a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\">组件</a>\n\n\n","source":"_posts/vue-custom-prop.markdown","raw":"---\nlayout:     post\ntitle:      \"Vue 父子组件通信\"\ndate:       2017-04-27 09:27:00\ntags:\n    - Vue\n---\n\n### prop \n\n在组件中，子组件需要获取父组件数据，父组件使用 v-bind 动态绑定数据，子组件使用 prop 获取：  \n\n##### 父：\n```html\n<child v-bind:date=\"date\"></child>\n```\n\n##### 子：\n```js\nprops: {\n    date: {\n        type: String,\n        defalut: '',    //可以指定默认值\n    }\n}\n```\n\n### 单向数据流\n\nprop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态。每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以当子组件修改 prop 时，Vue 会给出警告。  \n\n所以我们应该  \n\n- 定义一个局部变量，传递 prop 的值\n- 使用计算属性，处理 prop\n\n### 子组件传递数据  \n\n使用 v-on 绑定事件  \n\n- $on 监听\n- $emit 触发事件\n\n例子：  \n\n##### 父：\n\n```html\n<template>\n    <child v-on:change=\"changeBoo\"></child>\n</template>\n<script>\n    data() {\n        return {\n            booLean: false\n        }\n    }\n    methods: {\n        changeBoo() {\n            this.booLean = true;\n        }\n    }\n</script>\n```\n\n##### 子：\n\n```html\n<template>\n    <div v-on:click=\"change\"></div>\n</template>\n<script>\n    data() {\n        return {\n            booLean: false\n        }\n    },\n    methods: {\n        change() {\n            this.booLean = true;\n            this.$emit('change');   //触发\n        }\n    }\n</script>\n```\n\n在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件  \n\n<a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\">组件</a>\n\n\n","slug":"vue-custom-prop","published":1,"updated":"2018-05-09T08:41:42.524Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41x002m2mhs9m1c2u1l","content":"<h3 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\"prop\"></a>prop</h3><p>在组件中，子组件需要获取父组件数据，父组件使用 v-bind 动态绑定数据，子组件使用 prop 获取：  </p>\n<h5 id=\"父：\"><a href=\"#父：\" class=\"headerlink\" title=\"父：\"></a>父：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:date</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"子：\"><a href=\"#子：\" class=\"headerlink\" title=\"子：\"></a>子：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">    date: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        defalut: <span class=\"string\">''</span>,    <span class=\"comment\">//可以指定默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态。每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以当子组件修改 prop 时，Vue 会给出警告。  </p>\n<p>所以我们应该  </p>\n<ul>\n<li>定义一个局部变量，传递 prop 的值</li>\n<li>使用计算属性，处理 prop</li>\n</ul>\n<h3 id=\"子组件传递数据\"><a href=\"#子组件传递数据\" class=\"headerlink\" title=\"子组件传递数据\"></a>子组件传递数据</h3><p>使用 v-on 绑定事件  </p>\n<ul>\n<li>$on 监听</li>\n<li>$emit 触发事件</li>\n</ul>\n<p>例子：  </p>\n<h5 id=\"父：-1\"><a href=\"#父：-1\" class=\"headerlink\" title=\"父：\"></a>父：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-on:change</span>=<span class=\"string\">\"changeBoo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            booLean: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        changeBoo() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.booLean = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"子：-1\"><a href=\"#子：-1\" class=\"headerlink\" title=\"子：\"></a>子：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"change\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            booLean: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        change() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.booLean = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'change'</span>);   <span class=\"comment\">//触发</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件  </p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\">组件</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"prop\"><a href=\"#prop\" class=\"headerlink\" title=\"prop\"></a>prop</h3><p>在组件中，子组件需要获取父组件数据，父组件使用 v-bind 动态绑定数据，子组件使用 prop 获取：  </p>\n<h5 id=\"父：\"><a href=\"#父：\" class=\"headerlink\" title=\"父：\"></a>父：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-bind:date</span>=<span class=\"string\">\"date\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"子：\"><a href=\"#子：\" class=\"headerlink\" title=\"子：\"></a>子：</h5><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">props: &#123;</span><br><span class=\"line\">    date: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        defalut: <span class=\"string\">''</span>,    <span class=\"comment\">//可以指定默认值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单向数据流\"><a href=\"#单向数据流\" class=\"headerlink\" title=\"单向数据流\"></a>单向数据流</h3><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态。每次父组件更新时，子组件的所有 prop 都会更新为最新值。所以当子组件修改 prop 时，Vue 会给出警告。  </p>\n<p>所以我们应该  </p>\n<ul>\n<li>定义一个局部变量，传递 prop 的值</li>\n<li>使用计算属性，处理 prop</li>\n</ul>\n<h3 id=\"子组件传递数据\"><a href=\"#子组件传递数据\" class=\"headerlink\" title=\"子组件传递数据\"></a>子组件传递数据</h3><p>使用 v-on 绑定事件  </p>\n<ul>\n<li>$on 监听</li>\n<li>$emit 触发事件</li>\n</ul>\n<p>例子：  </p>\n<h5 id=\"父：-1\"><a href=\"#父：-1\" class=\"headerlink\" title=\"父：\"></a>父：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">v-on:change</span>=<span class=\"string\">\"changeBoo\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            booLean: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        changeBoo() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.booLean = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"子：-1\"><a href=\"#子：-1\" class=\"headerlink\" title=\"子：\"></a>子：</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">\"change\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            booLean: <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    methods: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        change() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.booLean = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">this</span>.$emit(<span class=\"string\">'change'</span>);   <span class=\"comment\">//触发</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在本例中，子组件已经和它外部完全解耦了。它所做的只是报告自己的内部事件  </p>\n<p><a href=\"https://cn.vuejs.org/v2/guide/components.html\" target=\"_blank\">组件</a></p>\n"},{"layout":"post","title":"vue-cli webpack 配置笔记","date":"2017-04-11T13:52:00.000Z","_content":"\n<a href=\"http://idmrchan.com/2017/04/09/VueRouter-VueResource-webpack/\" target=\"_blank\">上一篇</a>\n\n### 初始化\n\n控制台输入：`vue init webpack test`   \n前几下直接回车，到 `Install vue-router? (Y/n)` y，后面的什么 ` Use ESLint to lint your code ` 之类的，建议选择否。  \n除了第一个问你是否安装 vue-router ，其他的是用来检查你的代码是否符合规范，缩进，空格，分号之类的。我觉得可烦。初学的时候总是报一大堆错误，导致我一直对 vue 官方的 webpack 模板有阴影，所以建议不要添加这些测试代码。\n\n初始化成功后  \n\n- cd test\n- npm install     //安装依赖\n- npm run dev     //启动服务\n- npm run build   //发布代码\n\n### 项目结构\n\n原来的 webpack-config-js 拆分到 build 项目里面了，里面还有一些 express 配置。  \n打开 webpack.base.conf.js 文件，可以看到。entry 还是 src/main.js , output 封装起来了\n\nnpm run build 可以看到，生成 dist 文件夹，并且包括 index.html 都配置好了，不需要在手动添加。  \n\n接下来是一些 babel，vue，图片和 css 文件配置。详情可以看<a href=\"https://github.com/DDFE/DDFE-blog/issues/10\" target=\"_blank\">这里</a>  \n\n直接用 vue-cli 创建，主要是因为配置好了 webpack 和 express 之间的热加载问题，使用同一个端口，可以实时查看编写的代码。如果不需要，其他的 vue 文件加载和 vue-router 等配置都挺简单的，可以直接用 webpack-simple。  \n\n### 修改代码\n\n##### 添加sass\n\n控制台 ` npm install node-sass sass-loader --save-dev ` 添加到项目里  \n\n打开 build/webpack.base.conf.js \n\n```js\n...\nvar vueLoaderConfig = require('./vue-loader.conf')\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig    //这里添加 sass\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      ...\n    ]\n  }\n}\n```\n\n图示代码处 vueLoaderConfig 似乎是将 vue 里面 css 文件处理成 map 还是单独的文件，反正看不懂，webpack-simple 内也没有，估计是扩展的功能，我感觉用不到，就替换为：\n\n```js\n  test: /\\.vue$/,\n  loader: 'vue-loader',\n  options: {\n    loaders: {\n      'scss': 'vue-style-loader!css-loader!sass-loader',\n      'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax'\n    }\n  }\n```\n\n然后在 vue 模板里的  `<style></style>` 改成 `<style lang=\"scss\"></style>`  \n就可以使用 sass 了\n\n##### vue-router\n\nwebpack 模板已经添加了 vue-router 功能  \n打开 src/main.js 看到 ```import router from './router'``` \n打开 router/index.js\n\n```js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Hello from '@/components/Hello'\nVue.use(Router)               //vue2.0 语法\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n```\n\nwebpack 模板已经都添加好了，我们可以在添加一个 /test 路径试试\n\ncomponents 里添加 test.vue  \n\n```html\n<template>\n  <div class=\"test\">\n    <p>this is a test</p>\n  </div>\n</template>\n\n<script>\nexport default {}     //一定得有\n</script>\n\n<style lang=\"scss\">\n.test {\n  p {\n    color: red;\n  }\n}\n</style>\n```\n\n在刚才的 route 文件 index.js 里修改\n\n```js\nroutes: [\n  {\n    path: '/',\n    name: 'Hello',\n    component: Hello\n  },\n  {\n    path: '/test',\n    name: 'test',\n    component: test\n  }\n```\n\n回到项目 localhost:8080/test 看看是否添加进来了，应该是没有。因为我们没有把 `<router-view></router-view>` 挂载到首页。这时候问题来了，添加到首页的内容应该放 App.vue 还是 Hello.vue 内好。我个人倾向于认为 App.vue 为首页，那就不需要 Hello.vue \n\n我们重新构造下逻辑结构\n把 route 文件夹和模板给的 components/Hello.vue 文件删了  \n修改 src/main.js 文件  \n\n```js\nimport Vue from 'vue'\nimport App from './App'\nimport Router from 'vue-router'\nimport test from '@/components/test'\n\nVue.use(Router)\n\nlet routes = [\n  {\n    path: '/',\n    name: 'index',\n    component: App,     //把原来首页内容 Hello.vue 改为在 App.vue 内\n    children: [\n      {\n        path: '/test', \n        name: 'test',\n        component: test\n      }\n    ]\n  }\n];\n\nlet router = new Router({\n  'linkActiveClass': 'active',\n   routes // （缩写）相当于 routes: routes\n});\n\nlet app = new Vue({\n  router\n}).$mount('#app');\n  router.push('/test');     //默认打开的是 test路径\n\nexport default app;\n```\n\n我们把 main.js 和 router/index.js 整合到了一起，这个代码是 vue-router 官方下给的代码，我们就按照这样修改 ` router.push('/test') ` 可以让打开首页时自动进入 /test 路径。  \n\n在 App.vue 下添加\n\n```html\n<template>\n  <div>\n    <img src=\"./assets/logo.png\">\n    <router-view></router-view>\n  </div>\n</template>\n```\n\n这样就清晰多了\n\n##### mock 数据\n\n首先添加一个 data.json 文件\n\n```json\n{\n  \"dataOne\": {\n    \"name\": \"dataOne name\",\n    \"content\": [\n      {\n        \"type\": 0,\n        \"description\": \"hhhhhh\"\n      },\n      {\n        \"type\": 1,\n        \"description\": \"hhhhhh\"\n      }\n    ]\n  },\n  \"dataTwo\": {\n    \"name\": \"dataTwo name\",\n    \"content\": [\n      {\n        \"type\": 0,\n        \"description\": \"hhhhhh\"\n      },\n      {\n        \"type\": 1,\n        \"description\": \"hhhhhh\"\n      }\n    ]\n  }\n}\n```\n\n我随便写了一个数据，然后在首页 App.vue 内获取数据\n\n```js\n<script>\n  import data from './data.json';\n\n  export default {\n    data() {\n      return {\n        dataOne: {}\n      }\n    },\n    created() {\n      this.dataOne = data.dataOne;\n    }\n  }\n</script>\n```\n\n这样就获取了 data.json 内的 dataOne 数据，那接下来怎么添加到文件里面呢？  \n\n我们在 components 下建一个 content.vue 文件，用来演示数据的传递\n\n```html\n<template>\n  <div>\n    <p>{{ dataOne.name }}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: {\n      dataOne: {\n        type: Object\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n</style>\n```\n\n并在 App.vue 内注册 content.vue 并传递内容  \n\n```html\n<template>\n  ...\n  <v-content :dataOne='dataOne'></v-content>\n  ...\n</template>\n\n<script>\n  import content from './components/content.vue';\n  import data from './data.json';\n  export default {\n    data() {\n      return {\n        dataOne: {}\n      }\n    },\n    created() {\n      this.dataOne = data.dataOne;\n    },\n    components: {\n      'v-content' : content   // 不能使用 content 名字注册，这样可能会出现注册不成功，因为 vue 不允许使用 html 同名标签\n    }\n  }\n</script>\n```\n\n此时就把内容添加到 content.vue 了，这是就可以查看下内容是否被添加进去。\n\n##### 手机端查看\n\n首先需要你的手机和电脑连接的是同一个网关，比如电脑开个 wifi 让手机连上。  \ncmd 内 ipconfig ，查看自己的 ip 地址，将 localhost:8080 改成 [ip] + :8080 看看是不是还是原来的页面  \n此时打开手机，输入 [ip] + :8080 ，就可以在手机上查看  \n这也是我使用 vue-cli webpack 模板的一个原因，他可以实时在手机端修改代码，因为使用了 webpack-dev-middleware 和 webpack-hot-middleware 绑定了 webpack 内存和 express，实现了手机端的热加载\n\n","source":"_posts/vue-cli-module.markdown","raw":"---\nlayout:     post\ntitle:      \"vue-cli webpack 配置笔记\"\ndate:       2017-04-11 21:52:00\ntags:\n    - Vue\n    - WebPack\n---\n\n<a href=\"http://idmrchan.com/2017/04/09/VueRouter-VueResource-webpack/\" target=\"_blank\">上一篇</a>\n\n### 初始化\n\n控制台输入：`vue init webpack test`   \n前几下直接回车，到 `Install vue-router? (Y/n)` y，后面的什么 ` Use ESLint to lint your code ` 之类的，建议选择否。  \n除了第一个问你是否安装 vue-router ，其他的是用来检查你的代码是否符合规范，缩进，空格，分号之类的。我觉得可烦。初学的时候总是报一大堆错误，导致我一直对 vue 官方的 webpack 模板有阴影，所以建议不要添加这些测试代码。\n\n初始化成功后  \n\n- cd test\n- npm install     //安装依赖\n- npm run dev     //启动服务\n- npm run build   //发布代码\n\n### 项目结构\n\n原来的 webpack-config-js 拆分到 build 项目里面了，里面还有一些 express 配置。  \n打开 webpack.base.conf.js 文件，可以看到。entry 还是 src/main.js , output 封装起来了\n\nnpm run build 可以看到，生成 dist 文件夹，并且包括 index.html 都配置好了，不需要在手动添加。  \n\n接下来是一些 babel，vue，图片和 css 文件配置。详情可以看<a href=\"https://github.com/DDFE/DDFE-blog/issues/10\" target=\"_blank\">这里</a>  \n\n直接用 vue-cli 创建，主要是因为配置好了 webpack 和 express 之间的热加载问题，使用同一个端口，可以实时查看编写的代码。如果不需要，其他的 vue 文件加载和 vue-router 等配置都挺简单的，可以直接用 webpack-simple。  \n\n### 修改代码\n\n##### 添加sass\n\n控制台 ` npm install node-sass sass-loader --save-dev ` 添加到项目里  \n\n打开 build/webpack.base.conf.js \n\n```js\n...\nvar vueLoaderConfig = require('./vue-loader.conf')\n...\nmodule.exports = {\n  ...\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig    //这里添加 sass\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test')]\n      },\n      ...\n    ]\n  }\n}\n```\n\n图示代码处 vueLoaderConfig 似乎是将 vue 里面 css 文件处理成 map 还是单独的文件，反正看不懂，webpack-simple 内也没有，估计是扩展的功能，我感觉用不到，就替换为：\n\n```js\n  test: /\\.vue$/,\n  loader: 'vue-loader',\n  options: {\n    loaders: {\n      'scss': 'vue-style-loader!css-loader!sass-loader',\n      'sass': 'vue-style-loader!css-loader!sass-loader?indentedSyntax'\n    }\n  }\n```\n\n然后在 vue 模板里的  `<style></style>` 改成 `<style lang=\"scss\"></style>`  \n就可以使用 sass 了\n\n##### vue-router\n\nwebpack 模板已经添加了 vue-router 功能  \n打开 src/main.js 看到 ```import router from './router'``` \n打开 router/index.js\n\n```js\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport Hello from '@/components/Hello'\nVue.use(Router)               //vue2.0 语法\nexport default new Router({\n  routes: [\n    {\n      path: '/',\n      name: 'Hello',\n      component: Hello\n    }\n  ]\n})\n```\n\nwebpack 模板已经都添加好了，我们可以在添加一个 /test 路径试试\n\ncomponents 里添加 test.vue  \n\n```html\n<template>\n  <div class=\"test\">\n    <p>this is a test</p>\n  </div>\n</template>\n\n<script>\nexport default {}     //一定得有\n</script>\n\n<style lang=\"scss\">\n.test {\n  p {\n    color: red;\n  }\n}\n</style>\n```\n\n在刚才的 route 文件 index.js 里修改\n\n```js\nroutes: [\n  {\n    path: '/',\n    name: 'Hello',\n    component: Hello\n  },\n  {\n    path: '/test',\n    name: 'test',\n    component: test\n  }\n```\n\n回到项目 localhost:8080/test 看看是否添加进来了，应该是没有。因为我们没有把 `<router-view></router-view>` 挂载到首页。这时候问题来了，添加到首页的内容应该放 App.vue 还是 Hello.vue 内好。我个人倾向于认为 App.vue 为首页，那就不需要 Hello.vue \n\n我们重新构造下逻辑结构\n把 route 文件夹和模板给的 components/Hello.vue 文件删了  \n修改 src/main.js 文件  \n\n```js\nimport Vue from 'vue'\nimport App from './App'\nimport Router from 'vue-router'\nimport test from '@/components/test'\n\nVue.use(Router)\n\nlet routes = [\n  {\n    path: '/',\n    name: 'index',\n    component: App,     //把原来首页内容 Hello.vue 改为在 App.vue 内\n    children: [\n      {\n        path: '/test', \n        name: 'test',\n        component: test\n      }\n    ]\n  }\n];\n\nlet router = new Router({\n  'linkActiveClass': 'active',\n   routes // （缩写）相当于 routes: routes\n});\n\nlet app = new Vue({\n  router\n}).$mount('#app');\n  router.push('/test');     //默认打开的是 test路径\n\nexport default app;\n```\n\n我们把 main.js 和 router/index.js 整合到了一起，这个代码是 vue-router 官方下给的代码，我们就按照这样修改 ` router.push('/test') ` 可以让打开首页时自动进入 /test 路径。  \n\n在 App.vue 下添加\n\n```html\n<template>\n  <div>\n    <img src=\"./assets/logo.png\">\n    <router-view></router-view>\n  </div>\n</template>\n```\n\n这样就清晰多了\n\n##### mock 数据\n\n首先添加一个 data.json 文件\n\n```json\n{\n  \"dataOne\": {\n    \"name\": \"dataOne name\",\n    \"content\": [\n      {\n        \"type\": 0,\n        \"description\": \"hhhhhh\"\n      },\n      {\n        \"type\": 1,\n        \"description\": \"hhhhhh\"\n      }\n    ]\n  },\n  \"dataTwo\": {\n    \"name\": \"dataTwo name\",\n    \"content\": [\n      {\n        \"type\": 0,\n        \"description\": \"hhhhhh\"\n      },\n      {\n        \"type\": 1,\n        \"description\": \"hhhhhh\"\n      }\n    ]\n  }\n}\n```\n\n我随便写了一个数据，然后在首页 App.vue 内获取数据\n\n```js\n<script>\n  import data from './data.json';\n\n  export default {\n    data() {\n      return {\n        dataOne: {}\n      }\n    },\n    created() {\n      this.dataOne = data.dataOne;\n    }\n  }\n</script>\n```\n\n这样就获取了 data.json 内的 dataOne 数据，那接下来怎么添加到文件里面呢？  \n\n我们在 components 下建一个 content.vue 文件，用来演示数据的传递\n\n```html\n<template>\n  <div>\n    <p>{{ dataOne.name }}</p>\n  </div>\n</template>\n\n<script>\n  export default {\n    props: {\n      dataOne: {\n        type: Object\n      }\n    }\n  }\n</script>\n\n<style lang=\"scss\">\n</style>\n```\n\n并在 App.vue 内注册 content.vue 并传递内容  \n\n```html\n<template>\n  ...\n  <v-content :dataOne='dataOne'></v-content>\n  ...\n</template>\n\n<script>\n  import content from './components/content.vue';\n  import data from './data.json';\n  export default {\n    data() {\n      return {\n        dataOne: {}\n      }\n    },\n    created() {\n      this.dataOne = data.dataOne;\n    },\n    components: {\n      'v-content' : content   // 不能使用 content 名字注册，这样可能会出现注册不成功，因为 vue 不允许使用 html 同名标签\n    }\n  }\n</script>\n```\n\n此时就把内容添加到 content.vue 了，这是就可以查看下内容是否被添加进去。\n\n##### 手机端查看\n\n首先需要你的手机和电脑连接的是同一个网关，比如电脑开个 wifi 让手机连上。  \ncmd 内 ipconfig ，查看自己的 ip 地址，将 localhost:8080 改成 [ip] + :8080 看看是不是还是原来的页面  \n此时打开手机，输入 [ip] + :8080 ，就可以在手机上查看  \n这也是我使用 vue-cli webpack 模板的一个原因，他可以实时在手机端修改代码，因为使用了 webpack-dev-middleware 和 webpack-hot-middleware 绑定了 webpack 内存和 express，实现了手机端的热加载\n\n","slug":"vue-cli-module","published":1,"updated":"2018-05-09T08:38:33.175Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41y002o2mhsxdd9qori","content":"<p><a href=\"http://idmrchan.com/2017/04/09/VueRouter-VueResource-webpack/\" target=\"_blank\">上一篇</a></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>控制台输入：<code>vue init webpack test</code><br>前几下直接回车，到 <code>Install vue-router? (Y/n)</code> y，后面的什么 <code>Use ESLint to lint your code</code> 之类的，建议选择否。<br>除了第一个问你是否安装 vue-router ，其他的是用来检查你的代码是否符合规范，缩进，空格，分号之类的。我觉得可烦。初学的时候总是报一大堆错误，导致我一直对 vue 官方的 webpack 模板有阴影，所以建议不要添加这些测试代码。</p>\n<p>初始化成功后  </p>\n<ul>\n<li>cd test</li>\n<li>npm install     //安装依赖</li>\n<li>npm run dev     //启动服务</li>\n<li>npm run build   //发布代码</li>\n</ul>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>原来的 webpack-config-js 拆分到 build 项目里面了，里面还有一些 express 配置。<br>打开 webpack.base.conf.js 文件，可以看到。entry 还是 src/main.js , output 封装起来了</p>\n<p>npm run build 可以看到，生成 dist 文件夹，并且包括 index.html 都配置好了，不需要在手动添加。  </p>\n<p>接下来是一些 babel，vue，图片和 css 文件配置。详情可以看<a href=\"https://github.com/DDFE/DDFE-blog/issues/10\" target=\"_blank\">这里</a>  </p>\n<p>直接用 vue-cli 创建，主要是因为配置好了 webpack 和 express 之间的热加载问题，使用同一个端口，可以实时查看编写的代码。如果不需要，其他的 vue 文件加载和 vue-router 等配置都挺简单的，可以直接用 webpack-simple。  </p>\n<h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><h5 id=\"添加sass\"><a href=\"#添加sass\" class=\"headerlink\" title=\"添加sass\"></a>添加sass</h5><p>控制台 <code>npm install node-sass sass-loader --save-dev</code> 添加到项目里  </p>\n<p>打开 build/webpack.base.conf.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> vueLoaderConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./vue-loader.conf'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: vueLoaderConfig    <span class=\"comment\">//这里添加 sass</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图示代码处 vueLoaderConfig 似乎是将 vue 里面 css 文件处理成 map 还是单独的文件，反正看不懂，webpack-simple 内也没有，估计是扩展的功能，我感觉用不到，就替换为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">options: &#123;</span><br><span class=\"line\">  loaders: &#123;</span><br><span class=\"line\">    <span class=\"string\">'scss'</span>: <span class=\"string\">'vue-style-loader!css-loader!sass-loader'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sass'</span>: <span class=\"string\">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 vue 模板里的  <code>&lt;style&gt;&lt;/style&gt;</code> 改成 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code><br>就可以使用 sass 了</p>\n<h5 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h5><p>webpack 模板已经添加了 vue-router 功能<br>打开 src/main.js 看到 <figure class=\"highlight plain\"><figcaption><span>router from './router'``` </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开 router/index.js</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Router from &apos;vue-router&apos;</span><br><span class=\"line\">import Hello from &apos;@/components/Hello&apos;</span><br><span class=\"line\">Vue.use(Router)               //vue2.0 语法</span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/&apos;,</span><br><span class=\"line\">      name: &apos;Hello&apos;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>webpack 模板已经都添加好了，我们可以在添加一个 /test 路径试试</p>\n<p>components 里添加 test.vue  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is a test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;     <span class=\"comment\">//一定得有</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  p &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在刚才的 route 文件 index.js 里修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Hello'</span>,</span><br><span class=\"line\">    component: Hello</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/test'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    component: test</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>回到项目 localhost:8080/test 看看是否添加进来了，应该是没有。因为我们没有把 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 挂载到首页。这时候问题来了，添加到首页的内容应该放 App.vue 还是 Hello.vue 内好。我个人倾向于认为 App.vue 为首页，那就不需要 Hello.vue </p>\n<p>我们重新构造下逻辑结构<br>把 route 文件夹和模板给的 components/Hello.vue 文件删了<br>修改 src/main.js 文件  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'@/components/test'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'index'</span>,</span><br><span class=\"line\">    component: App,     <span class=\"comment\">//把原来首页内容 Hello.vue 改为在 App.vue 内</span></span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/test'</span>, </span><br><span class=\"line\">        name: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        component: test</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"string\">'linkActiveClass'</span>: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">   routes <span class=\"comment\">// （缩写）相当于 routes: routes</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">  router.push(<span class=\"string\">'/test'</span>);     <span class=\"comment\">//默认打开的是 test路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app;</span><br></pre></td></tr></table></figure>\n<p>我们把 main.js 和 router/index.js 整合到了一起，这个代码是 vue-router 官方下给的代码，我们就按照这样修改 <code>router.push(&#39;/test&#39;)</code> 可以让打开首页时自动进入 /test 路径。  </p>\n<p>在 App.vue 下添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就清晰多了</p>\n<h5 id=\"mock-数据\"><a href=\"#mock-数据\" class=\"headerlink\" title=\"mock 数据\"></a>mock 数据</h5><p>首先添加一个 data.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dataOne\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dataOne name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dataTwo\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dataTwo name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我随便写了一个数据，然后在首页 App.vue 内获取数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dataOne: &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOne = data.dataOne;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就获取了 data.json 内的 dataOne 数据，那接下来怎么添加到文件里面呢？  </p>\n<p>我们在 components 下建一个 content.vue 文件，用来演示数据的传递</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; dataOne.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      dataOne: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">Object</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并在 App.vue 内注册 content.vue 并传递内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-content</span> <span class=\"attr\">:dataOne</span>=<span class=\"string\">'dataOne'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-content</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> content <span class=\"keyword\">from</span> <span class=\"string\">'./components/content.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        dataOne: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dataOne = data.dataOne;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'v-content'</span> : content   <span class=\"comment\">// 不能使用 content 名字注册，这样可能会出现注册不成功，因为 vue 不允许使用 html 同名标签</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时就把内容添加到 content.vue 了，这是就可以查看下内容是否被添加进去。</p>\n<h5 id=\"手机端查看\"><a href=\"#手机端查看\" class=\"headerlink\" title=\"手机端查看\"></a>手机端查看</h5><p>首先需要你的手机和电脑连接的是同一个网关，比如电脑开个 wifi 让手机连上。<br>cmd 内 ipconfig ，查看自己的 ip 地址，将 localhost:8080 改成 [ip] + :8080 看看是不是还是原来的页面<br>此时打开手机，输入 [ip] + :8080 ，就可以在手机上查看<br>这也是我使用 vue-cli webpack 模板的一个原因，他可以实时在手机端修改代码，因为使用了 webpack-dev-middleware 和 webpack-hot-middleware 绑定了 webpack 内存和 express，实现了手机端的热加载</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://idmrchan.com/2017/04/09/VueRouter-VueResource-webpack/\" target=\"_blank\">上一篇</a></p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>控制台输入：<code>vue init webpack test</code><br>前几下直接回车，到 <code>Install vue-router? (Y/n)</code> y，后面的什么 <code>Use ESLint to lint your code</code> 之类的，建议选择否。<br>除了第一个问你是否安装 vue-router ，其他的是用来检查你的代码是否符合规范，缩进，空格，分号之类的。我觉得可烦。初学的时候总是报一大堆错误，导致我一直对 vue 官方的 webpack 模板有阴影，所以建议不要添加这些测试代码。</p>\n<p>初始化成功后  </p>\n<ul>\n<li>cd test</li>\n<li>npm install     //安装依赖</li>\n<li>npm run dev     //启动服务</li>\n<li>npm run build   //发布代码</li>\n</ul>\n<h3 id=\"项目结构\"><a href=\"#项目结构\" class=\"headerlink\" title=\"项目结构\"></a>项目结构</h3><p>原来的 webpack-config-js 拆分到 build 项目里面了，里面还有一些 express 配置。<br>打开 webpack.base.conf.js 文件，可以看到。entry 还是 src/main.js , output 封装起来了</p>\n<p>npm run build 可以看到，生成 dist 文件夹，并且包括 index.html 都配置好了，不需要在手动添加。  </p>\n<p>接下来是一些 babel，vue，图片和 css 文件配置。详情可以看<a href=\"https://github.com/DDFE/DDFE-blog/issues/10\" target=\"_blank\">这里</a>  </p>\n<p>直接用 vue-cli 创建，主要是因为配置好了 webpack 和 express 之间的热加载问题，使用同一个端口，可以实时查看编写的代码。如果不需要，其他的 vue 文件加载和 vue-router 等配置都挺简单的，可以直接用 webpack-simple。  </p>\n<h3 id=\"修改代码\"><a href=\"#修改代码\" class=\"headerlink\" title=\"修改代码\"></a>修改代码</h3><h5 id=\"添加sass\"><a href=\"#添加sass\" class=\"headerlink\" title=\"添加sass\"></a>添加sass</h5><p>控制台 <code>npm install node-sass sass-loader --save-dev</code> 添加到项目里  </p>\n<p>打开 build/webpack.base.conf.js </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">var</span> vueLoaderConfig = <span class=\"built_in\">require</span>(<span class=\"string\">'./vue-loader.conf'</span>)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">        options: vueLoaderConfig    <span class=\"comment\">//这里添加 sass</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">        loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">        include: [resolve(<span class=\"string\">'src'</span>), resolve(<span class=\"string\">'test'</span>)]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>图示代码处 vueLoaderConfig 似乎是将 vue 里面 css 文件处理成 map 还是单独的文件，反正看不懂，webpack-simple 内也没有，估计是扩展的功能，我感觉用不到，就替换为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test: <span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">loader: <span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">options: &#123;</span><br><span class=\"line\">  loaders: &#123;</span><br><span class=\"line\">    <span class=\"string\">'scss'</span>: <span class=\"string\">'vue-style-loader!css-loader!sass-loader'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sass'</span>: <span class=\"string\">'vue-style-loader!css-loader!sass-loader?indentedSyntax'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在 vue 模板里的  <code>&lt;style&gt;&lt;/style&gt;</code> 改成 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code><br>就可以使用 sass 了</p>\n<h5 id=\"vue-router\"><a href=\"#vue-router\" class=\"headerlink\" title=\"vue-router\"></a>vue-router</h5><p>webpack 模板已经添加了 vue-router 功能<br>打开 src/main.js 看到 <figure class=\"highlight plain\"><figcaption><span>router from './router'``` </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">打开 router/index.js</span><br><span class=\"line\"></span><br><span class=\"line\">```js</span><br><span class=\"line\">import Vue from &apos;vue&apos;</span><br><span class=\"line\">import Router from &apos;vue-router&apos;</span><br><span class=\"line\">import Hello from &apos;@/components/Hello&apos;</span><br><span class=\"line\">Vue.use(Router)               //vue2.0 语法</span><br><span class=\"line\">export default new Router(&#123;</span><br><span class=\"line\">  routes: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      path: &apos;/&apos;,</span><br><span class=\"line\">      name: &apos;Hello&apos;,</span><br><span class=\"line\">      component: Hello</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>webpack 模板已经都添加好了，我们可以在添加一个 /test 路径试试</p>\n<p>components 里添加 test.vue  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>this is a test<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;     <span class=\"comment\">//一定得有</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"css\"><span class=\"selector-class\">.test</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  p &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    color: red;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在刚才的 route 文件 index.js 里修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'Hello'</span>,</span><br><span class=\"line\">    component: Hello</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/test'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">    component: test</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>回到项目 localhost:8080/test 看看是否添加进来了，应该是没有。因为我们没有把 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 挂载到首页。这时候问题来了，添加到首页的内容应该放 App.vue 还是 Hello.vue 内好。我个人倾向于认为 App.vue 为首页，那就不需要 Hello.vue </p>\n<p>我们重新构造下逻辑结构<br>把 route 文件夹和模板给的 components/Hello.vue 文件删了<br>修改 src/main.js 文件  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">'vue'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Router <span class=\"keyword\">from</span> <span class=\"string\">'vue-router'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'@/components/test'</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Router)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> routes = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    path: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    name: <span class=\"string\">'index'</span>,</span><br><span class=\"line\">    component: App,     <span class=\"comment\">//把原来首页内容 Hello.vue 改为在 App.vue 内</span></span><br><span class=\"line\">    children: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        path: <span class=\"string\">'/test'</span>, </span><br><span class=\"line\">        name: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">        component: test</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> router = <span class=\"keyword\">new</span> Router(&#123;</span><br><span class=\"line\">  <span class=\"string\">'linkActiveClass'</span>: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">   routes <span class=\"comment\">// （缩写）相当于 routes: routes</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">'#app'</span>);</span><br><span class=\"line\">  router.push(<span class=\"string\">'/test'</span>);     <span class=\"comment\">//默认打开的是 test路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> app;</span><br></pre></td></tr></table></figure>\n<p>我们把 main.js 和 router/index.js 整合到了一起，这个代码是 vue-router 官方下给的代码，我们就按照这样修改 <code>router.push(&#39;/test&#39;)</code> 可以让打开首页时自动进入 /test 路径。  </p>\n<p>在 App.vue 下添加</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"./assets/logo.png\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就清晰多了</p>\n<h5 id=\"mock-数据\"><a href=\"#mock-数据\" class=\"headerlink\" title=\"mock 数据\"></a>mock 数据</h5><p>首先添加一个 data.json 文件</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"dataOne\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dataOne name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"dataTwo\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"dataTwo name\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"content\"</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"type\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"hhhhhh\"</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我随便写了一个数据，然后在首页 App.vue 内获取数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    data() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        dataOne: &#123;&#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    created() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.dataOne = data.dataOne;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样就获取了 data.json 内的 dataOne 数据，那接下来怎么添加到文件里面呢？  </p>\n<p>我们在 components 下建一个 content.vue 文件，用来演示数据的传递</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123; dataOne.name &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    props: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">      dataOne: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        type: <span class=\"built_in\">Object</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"scss\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>并在 App.vue 内注册 content.vue 并传递内容  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">v-content</span> <span class=\"attr\">:dataOne</span>=<span class=\"string\">'dataOne'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">v-content</span>&gt;</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> content <span class=\"keyword\">from</span> <span class=\"string\">'./components/content.vue'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> data <span class=\"keyword\">from</span> <span class=\"string\">'./data.json'</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    data() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        dataOne: &#123;&#125;</span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    created() &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">this</span>.dataOne = data.dataOne;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">    components: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"string\">'v-content'</span> : content   <span class=\"comment\">// 不能使用 content 名字注册，这样可能会出现注册不成功，因为 vue 不允许使用 html 同名标签</span></span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>此时就把内容添加到 content.vue 了，这是就可以查看下内容是否被添加进去。</p>\n<h5 id=\"手机端查看\"><a href=\"#手机端查看\" class=\"headerlink\" title=\"手机端查看\"></a>手机端查看</h5><p>首先需要你的手机和电脑连接的是同一个网关，比如电脑开个 wifi 让手机连上。<br>cmd 内 ipconfig ，查看自己的 ip 地址，将 localhost:8080 改成 [ip] + :8080 看看是不是还是原来的页面<br>此时打开手机，输入 [ip] + :8080 ，就可以在手机上查看<br>这也是我使用 vue-cli webpack 模板的一个原因，他可以实时在手机端修改代码，因为使用了 webpack-dev-middleware 和 webpack-hot-middleware 绑定了 webpack 内存和 express，实现了手机端的热加载</p>\n"},{"layout":"post","title":"前端模块化构建及单元测试入门","date":"2017-08-06T05:12:00.000Z","_content":"\n最近在看 Vue 源码，对模块化构建印象很深，现在做个什么项目都习惯性把功能拆分出来。拆分之后，对每个模块进行测试也成了必不可少的步骤，所以又花了点时间学习前端单元测试。  \n### 工具选择\n\n首选自然是 WebPack，配置比 grunt 什么的方便多了，测试用的是 Karma  \n\n### 模块化构建\n\n首先安装 WebPack 和 babel，ES6 转 ES5 是必不可少的\n\n    npm install --save-dev webpack babel-core babel-loader babel-preset-es2015\n\n创建 .babelrc  \n\n```json\n{\n    \"presets\": ['es2015']\n}\n```\n\n创建 webpack.config.js\n\n```js\nvar path = require('path')\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loaders: 'babel-loader',\n            query: {\n                presets: ['es2015']\n            },\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n- entry：文件入口\n- output：输出文件\n\n创建 src/main.js 和 test.js\n\nsrc/test.js\n\n```js\nexport default function(a, b) {\n    return a + b\n}\n```\n\nsrc/main.js\n\n```js\nimport test from './test'\nconsole.log(test(1,2)) // 3\n```\n\n执行 `webpack -w` 就可以监听文件改变，实时生成 `bundle.js`\n关于 import 语法可以看这篇 <a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\">Module 的加载实现</a>\n\n### 添加单元测试\n\n单元测试使用 karma  \n全局安装 karma-cli  \n\n    npm install -g karma-cli\n\n使用\n\n    npm install -save-dev karma\n    karma init\n\n- 选 jasmine\n- no 不使用 Require.js\n- 选 PhantomJs 不在浏览器下查看\n- test/\\*\\*/\\*.spec.js\n- no 不全局检查\n\n自动生成 karma.conf.js 文件\npackage.json 会添加 3 个依赖 ` jasmine-core karma-jasmine  karma-phantomjs-launcher ` 有时候不会 -.-! 需要你自己添加  \n\n创建 test/test.spec.js\n\n```js\nimport assert from 'assert'\nimport test from '../src/test.js'\n\ndescript('test', function() {\n    it('test(1, 2) => 3', function() {\n        assert.equal(test(1,2), 3)\n    })\n})\n```\n\n执行程序 `karma start` ，因为我们没有开自动检查 (autoWatch: false) 所以在重新打开一个程序， 执行 `karma run`  \n报错：\n>SyntaxError: Use of reserved word 'import'  \n\nPhantomJS 不支持 ES6 语法，需要安装 karma-babel-preprocessor 和 karma-webpack\n\n    npm install --save-dev karma-babel-preprocessor karma-webpack\n\nkarma.conf.js 添加以下代码\n\n```js\nmodule.exports = function(config) {\n  config.set({\n    ...\n    preprocessors: {\n        'test/**/*.spec.js': ['webpack', 'babel']\n    },\n\n    babelPreprocessor: {\n        options: {\n            presets: ['es2015']\n        }\n    },\n    ...\n    })\n}\n```\n\n在执行一次，OK。输出\n\n    PhantomJS 2.1.1 (Windows 8 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.002 secs)\n\n-------- 跑来更新 -------------\n\n### 如何比较对象\n\nassert.eqaul 断言才用的是 == 符号，碰上对象就 GG 了，所以我们添加一个叫 chai 的东西\n\n```js\n$ npm install --save-dev chai\n```\n\n在 test/test.spec.js 中修改\n\n```js\nimport chai from 'chai'\nchai.should()\n\nvar a = 1\nvar b = {}\na.should.be.equal(1)\nb.should.be.deep.equal({})\n```\n\n\n\n\n\n","source":"_posts/webpack-module-karma-test.markdown","raw":"---\nlayout:     post\ntitle:      \"前端模块化构建及单元测试入门\"\ndate:       2017-08-06 13:12:00\ntags:\n    - WebPack\n---\n\n最近在看 Vue 源码，对模块化构建印象很深，现在做个什么项目都习惯性把功能拆分出来。拆分之后，对每个模块进行测试也成了必不可少的步骤，所以又花了点时间学习前端单元测试。  \n### 工具选择\n\n首选自然是 WebPack，配置比 grunt 什么的方便多了，测试用的是 Karma  \n\n### 模块化构建\n\n首先安装 WebPack 和 babel，ES6 转 ES5 是必不可少的\n\n    npm install --save-dev webpack babel-core babel-loader babel-preset-es2015\n\n创建 .babelrc  \n\n```json\n{\n    \"presets\": ['es2015']\n}\n```\n\n创建 webpack.config.js\n\n```js\nvar path = require('path')\nmodule.exports = {\n    entry: './src/main.js',\n    output: {\n        path: path.resolve(__dirname, 'dist'),\n        filename: 'bundle.js'\n    },\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loaders: 'babel-loader',\n            query: {\n                presets: ['es2015']\n            },\n            exclude: /node_modules/\n        }]\n    }\n}\n```\n\n- entry：文件入口\n- output：输出文件\n\n创建 src/main.js 和 test.js\n\nsrc/test.js\n\n```js\nexport default function(a, b) {\n    return a + b\n}\n```\n\nsrc/main.js\n\n```js\nimport test from './test'\nconsole.log(test(1,2)) // 3\n```\n\n执行 `webpack -w` 就可以监听文件改变，实时生成 `bundle.js`\n关于 import 语法可以看这篇 <a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\">Module 的加载实现</a>\n\n### 添加单元测试\n\n单元测试使用 karma  \n全局安装 karma-cli  \n\n    npm install -g karma-cli\n\n使用\n\n    npm install -save-dev karma\n    karma init\n\n- 选 jasmine\n- no 不使用 Require.js\n- 选 PhantomJs 不在浏览器下查看\n- test/\\*\\*/\\*.spec.js\n- no 不全局检查\n\n自动生成 karma.conf.js 文件\npackage.json 会添加 3 个依赖 ` jasmine-core karma-jasmine  karma-phantomjs-launcher ` 有时候不会 -.-! 需要你自己添加  \n\n创建 test/test.spec.js\n\n```js\nimport assert from 'assert'\nimport test from '../src/test.js'\n\ndescript('test', function() {\n    it('test(1, 2) => 3', function() {\n        assert.equal(test(1,2), 3)\n    })\n})\n```\n\n执行程序 `karma start` ，因为我们没有开自动检查 (autoWatch: false) 所以在重新打开一个程序， 执行 `karma run`  \n报错：\n>SyntaxError: Use of reserved word 'import'  \n\nPhantomJS 不支持 ES6 语法，需要安装 karma-babel-preprocessor 和 karma-webpack\n\n    npm install --save-dev karma-babel-preprocessor karma-webpack\n\nkarma.conf.js 添加以下代码\n\n```js\nmodule.exports = function(config) {\n  config.set({\n    ...\n    preprocessors: {\n        'test/**/*.spec.js': ['webpack', 'babel']\n    },\n\n    babelPreprocessor: {\n        options: {\n            presets: ['es2015']\n        }\n    },\n    ...\n    })\n}\n```\n\n在执行一次，OK。输出\n\n    PhantomJS 2.1.1 (Windows 8 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.002 secs)\n\n-------- 跑来更新 -------------\n\n### 如何比较对象\n\nassert.eqaul 断言才用的是 == 符号，碰上对象就 GG 了，所以我们添加一个叫 chai 的东西\n\n```js\n$ npm install --save-dev chai\n```\n\n在 test/test.spec.js 中修改\n\n```js\nimport chai from 'chai'\nchai.should()\n\nvar a = 1\nvar b = {}\na.should.be.equal(1)\nb.should.be.deep.equal({})\n```\n\n\n\n\n\n","slug":"webpack-module-karma-test","published":1,"updated":"2018-05-09T09:31:25.440Z","comments":1,"photos":[],"link":"","_id":"cjv7qf41z002r2mhs9qhmyvf0","content":"<p>最近在看 Vue 源码，对模块化构建印象很深，现在做个什么项目都习惯性把功能拆分出来。拆分之后，对每个模块进行测试也成了必不可少的步骤，所以又花了点时间学习前端单元测试。  </p>\n<h3 id=\"工具选择\"><a href=\"#工具选择\" class=\"headerlink\" title=\"工具选择\"></a>工具选择</h3><p>首选自然是 WebPack，配置比 grunt 什么的方便多了，测试用的是 Karma  </p>\n<h3 id=\"模块化构建\"><a href=\"#模块化构建\" class=\"headerlink\" title=\"模块化构建\"></a>模块化构建</h3><p>首先安装 WebPack 和 babel，ES6 转 ES5 是必不可少的</p>\n<pre><code>npm install --save-dev webpack babel-core babel-loader babel-preset-es2015\n</code></pre><p>创建 .babelrc  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: ['es2015']</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loaders: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>entry：文件入口</li>\n<li>output：输出文件</li>\n</ul>\n<p>创建 src/main.js 和 test.js</p>\n<p>src/test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>src/main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./test'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>webpack -w</code> 就可以监听文件改变，实时生成 <code>bundle.js</code><br>关于 import 语法可以看这篇 <a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\">Module 的加载实现</a></p>\n<h3 id=\"添加单元测试\"><a href=\"#添加单元测试\" class=\"headerlink\" title=\"添加单元测试\"></a>添加单元测试</h3><p>单元测试使用 karma<br>全局安装 karma-cli  </p>\n<pre><code>npm install -g karma-cli\n</code></pre><p>使用</p>\n<pre><code>npm install -save-dev karma\nkarma init\n</code></pre><ul>\n<li>选 jasmine</li>\n<li>no 不使用 Require.js</li>\n<li>选 PhantomJs 不在浏览器下查看</li>\n<li>test/**/*.spec.js</li>\n<li>no 不全局检查</li>\n</ul>\n<p>自动生成 karma.conf.js 文件<br>package.json 会添加 3 个依赖 <code>jasmine-core karma-jasmine  karma-phantomjs-launcher</code> 有时候不会 -.-! 需要你自己添加  </p>\n<p>创建 test/test.spec.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> assert <span class=\"keyword\">from</span> <span class=\"string\">'assert'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'../src/test.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">descript(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'test(1, 2) =&gt; 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        assert.equal(test(<span class=\"number\">1</span>,<span class=\"number\">2</span>), <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行程序 <code>karma start</code> ，因为我们没有开自动检查 (autoWatch: false) 所以在重新打开一个程序， 执行 <code>karma run</code><br>报错：</p>\n<blockquote>\n<p>SyntaxError: Use of reserved word ‘import’  </p>\n</blockquote>\n<p>PhantomJS 不支持 ES6 语法，需要安装 karma-babel-preprocessor 和 karma-webpack</p>\n<pre><code>npm install --save-dev karma-babel-preprocessor karma-webpack\n</code></pre><p>karma.conf.js 添加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">        <span class=\"string\">'test/**/*.spec.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'babel'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    babelPreprocessor: &#123;</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行一次，OK。输出</p>\n<pre><code>PhantomJS 2.1.1 (Windows 8 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.002 secs)\n</code></pre><p>——– 跑来更新 ————-</p>\n<h3 id=\"如何比较对象\"><a href=\"#如何比较对象\" class=\"headerlink\" title=\"如何比较对象\"></a>如何比较对象</h3><p>assert.eqaul 断言才用的是 == 符号，碰上对象就 GG 了，所以我们添加一个叫 chai 的东西</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev chai</span><br></pre></td></tr></table></figure>\n<p>在 test/test.spec.js 中修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;&#125;</span><br><span class=\"line\">a.should.be.equal(<span class=\"number\">1</span>)</span><br><span class=\"line\">b.should.be.deep.equal(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在看 Vue 源码，对模块化构建印象很深，现在做个什么项目都习惯性把功能拆分出来。拆分之后，对每个模块进行测试也成了必不可少的步骤，所以又花了点时间学习前端单元测试。  </p>\n<h3 id=\"工具选择\"><a href=\"#工具选择\" class=\"headerlink\" title=\"工具选择\"></a>工具选择</h3><p>首选自然是 WebPack，配置比 grunt 什么的方便多了，测试用的是 Karma  </p>\n<h3 id=\"模块化构建\"><a href=\"#模块化构建\" class=\"headerlink\" title=\"模块化构建\"></a>模块化构建</h3><p>首先安装 WebPack 和 babel，ES6 转 ES5 是必不可少的</p>\n<pre><code>npm install --save-dev webpack babel-core babel-loader babel-preset-es2015\n</code></pre><p>创建 .babelrc  </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"presets\"</span>: ['es2015']</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建 webpack.config.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    entry: <span class=\"string\">'./src/main.js'</span>,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">        filename: <span class=\"string\">'bundle.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">        loaders: [&#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">            loaders: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>entry：文件入口</li>\n<li>output：输出文件</li>\n</ul>\n<p>创建 src/main.js 和 test.js</p>\n<p>src/test.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>src/main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'./test'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(test(<span class=\"number\">1</span>,<span class=\"number\">2</span>)) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>执行 <code>webpack -w</code> 就可以监听文件改变，实时生成 <code>bundle.js</code><br>关于 import 语法可以看这篇 <a href=\"http://es6.ruanyifeng.com/#docs/module-loader\" target=\"_blank\">Module 的加载实现</a></p>\n<h3 id=\"添加单元测试\"><a href=\"#添加单元测试\" class=\"headerlink\" title=\"添加单元测试\"></a>添加单元测试</h3><p>单元测试使用 karma<br>全局安装 karma-cli  </p>\n<pre><code>npm install -g karma-cli\n</code></pre><p>使用</p>\n<pre><code>npm install -save-dev karma\nkarma init\n</code></pre><ul>\n<li>选 jasmine</li>\n<li>no 不使用 Require.js</li>\n<li>选 PhantomJs 不在浏览器下查看</li>\n<li>test/**/*.spec.js</li>\n<li>no 不全局检查</li>\n</ul>\n<p>自动生成 karma.conf.js 文件<br>package.json 会添加 3 个依赖 <code>jasmine-core karma-jasmine  karma-phantomjs-launcher</code> 有时候不会 -.-! 需要你自己添加  </p>\n<p>创建 test/test.spec.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> assert <span class=\"keyword\">from</span> <span class=\"string\">'assert'</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> test <span class=\"keyword\">from</span> <span class=\"string\">'../src/test.js'</span></span><br><span class=\"line\"></span><br><span class=\"line\">descript(<span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    it(<span class=\"string\">'test(1, 2) =&gt; 3'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        assert.equal(test(<span class=\"number\">1</span>,<span class=\"number\">2</span>), <span class=\"number\">3</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>执行程序 <code>karma start</code> ，因为我们没有开自动检查 (autoWatch: false) 所以在重新打开一个程序， 执行 <code>karma run</code><br>报错：</p>\n<blockquote>\n<p>SyntaxError: Use of reserved word ‘import’  </p>\n</blockquote>\n<p>PhantomJS 不支持 ES6 语法，需要安装 karma-babel-preprocessor 和 karma-webpack</p>\n<pre><code>npm install --save-dev karma-babel-preprocessor karma-webpack\n</code></pre><p>karma.conf.js 添加以下代码</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">config</span>) </span>&#123;</span><br><span class=\"line\">  config.set(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    preprocessors: &#123;</span><br><span class=\"line\">        <span class=\"string\">'test/**/*.spec.js'</span>: [<span class=\"string\">'webpack'</span>, <span class=\"string\">'babel'</span>]</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    babelPreprocessor: &#123;</span><br><span class=\"line\">        options: &#123;</span><br><span class=\"line\">            presets: [<span class=\"string\">'es2015'</span>]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在执行一次，OK。输出</p>\n<pre><code>PhantomJS 2.1.1 (Windows 8 0.0.0): Executed 1 of 1 SUCCESS (0.004 secs / 0.002 secs)\n</code></pre><p>——– 跑来更新 ————-</p>\n<h3 id=\"如何比较对象\"><a href=\"#如何比较对象\" class=\"headerlink\" title=\"如何比较对象\"></a>如何比较对象</h3><p>assert.eqaul 断言才用的是 == 符号，碰上对象就 GG 了，所以我们添加一个叫 chai 的东西</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install --save-dev chai</span><br></pre></td></tr></table></figure>\n<p>在 test/test.spec.js 中修改</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> chai <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span></span><br><span class=\"line\">chai.should()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;&#125;</span><br><span class=\"line\">a.should.be.equal(<span class=\"number\">1</span>)</span><br><span class=\"line\">b.should.be.deep.equal(&#123;&#125;)</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Windows 下对某个程序使用白名单","date":"2016-08-18T05:55:00.000Z","_content":"\n- 开始—》右击“计算机”—》管理—》任务计划程序—》任务计划程序库，点击右边的“创建任务”\n\n- 输入要创建的任务的名称 'youexeName'，以及勾选“使用最高权限运行”\n\n- 点击“操作”标签，点击“新建”—》浏览—》选择需要设置的程序，打开后点确定。\n\n- \n在桌面或某个文件夹内的空白处右击新建快捷方式：  \n在方框内键入：`schtasks.exe /run /tn \"youexeName\"`  \n完成\n\n- 双击快捷方式启动，可实现 uac 白名单\n\n>   来源：知乎\n    作者：jake lin\n    链接：https://www.zhihu.com/question/26629026/answer/73701164\n\n\n\n\n","source":"_posts/windows-uac-white.markdown","raw":"---\nlayout:     post\ntitle:      \"Windows 下对某个程序使用白名单\"\ndate:       2016-08-18 13:55:00\ntags:\n    - System\n---\n\n- 开始—》右击“计算机”—》管理—》任务计划程序—》任务计划程序库，点击右边的“创建任务”\n\n- 输入要创建的任务的名称 'youexeName'，以及勾选“使用最高权限运行”\n\n- 点击“操作”标签，点击“新建”—》浏览—》选择需要设置的程序，打开后点确定。\n\n- \n在桌面或某个文件夹内的空白处右击新建快捷方式：  \n在方框内键入：`schtasks.exe /run /tn \"youexeName\"`  \n完成\n\n- 双击快捷方式启动，可实现 uac 白名单\n\n>   来源：知乎\n    作者：jake lin\n    链接：https://www.zhihu.com/question/26629026/answer/73701164\n\n\n\n\n","slug":"windows-uac-white","published":1,"updated":"2018-05-09T06:53:52.979Z","comments":1,"photos":[],"link":"","_id":"cjv7qf420002t2mhsrq4l80fq","content":"<ul>\n<li><p>开始—》右击“计算机”—》管理—》任务计划程序—》任务计划程序库，点击右边的“创建任务”</p>\n</li>\n<li><p>输入要创建的任务的名称 ‘youexeName’，以及勾选“使用最高权限运行”</p>\n</li>\n<li><p>点击“操作”标签，点击“新建”—》浏览—》选择需要设置的程序，打开后点确定。</p>\n</li>\n<li><p>在桌面或某个文件夹内的空白处右击新建快捷方式：<br>在方框内键入：<code>schtasks.exe /run /tn &quot;youexeName&quot;</code><br>完成</p>\n</li>\n<li><p>双击快捷方式启动，可实现 uac 白名单</p>\n</li>\n</ul>\n<blockquote>\n<p>  来源：知乎<br>    作者：jake lin<br>    链接：<a href=\"https://www.zhihu.com/question/26629026/answer/73701164\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26629026/answer/73701164</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>开始—》右击“计算机”—》管理—》任务计划程序—》任务计划程序库，点击右边的“创建任务”</p>\n</li>\n<li><p>输入要创建的任务的名称 ‘youexeName’，以及勾选“使用最高权限运行”</p>\n</li>\n<li><p>点击“操作”标签，点击“新建”—》浏览—》选择需要设置的程序，打开后点确定。</p>\n</li>\n<li><p>在桌面或某个文件夹内的空白处右击新建快捷方式：<br>在方框内键入：<code>schtasks.exe /run /tn &quot;youexeName&quot;</code><br>完成</p>\n</li>\n<li><p>双击快捷方式启动，可实现 uac 白名单</p>\n</li>\n</ul>\n<blockquote>\n<p>  来源：知乎<br>    作者：jake lin<br>    链接：<a href=\"https://www.zhihu.com/question/26629026/answer/73701164\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26629026/answer/73701164</a></p>\n</blockquote>\n"},{"layout":"post","title":"制作 WordPress 主题","date":"2016-08-24T02:20:00.000Z","_content":"\n前言：用 WordPress 来制作博客真的是很方便，尤其是像我这种不会写后台的人来说，只要稍微修改下代码就能实现后台很多功能。这篇文章列出了一些 WordPress 基础操作步骤。\n\n### WordPress 本机环境搭建\n\n- 下载 XAMPP 安装后打开 Apache，MySQL 在浏览器中输入 localhost,即可检测是否安装成功。\n- 打开 MySQL 的 Admin 按钮。新建一个数据库（例如:wp）\n- 在 WordPress 官网上下载程序包，在 xampp 下创建文件夹 wordpress，放在 X:\\xampp\\htdocs 下。在浏览器中输入 localhost/wordpress 即可安装 WordPress \n\n> wp为你刚才建的数据库名。用户名为root ，密码无。这样WordPress就安装好了。\n\n### WordPress 文件构建\n\n首先你要有一个写好的静态页面，你可以打开下载的 WordPress 程序包，在 wp-content\\themes 下有 WordPress 预设的模板。接下来要做的就是将写好的静态页面修改成模板形式。  \n一般来说，每个主题都带有：  \n\n- index.php（首页）\n- header.php  \n- footer.php  \n- 404.php  \n- function.php（函数）\n- single.php（文章页面） \n- style.css  \n\n每个模板页面都至少要包含 index.html 和 style.css 文件。将所有的 .html 改成 .php  \n\n1）将你写的静态页文件夹放入 wp-content\\themes 我将其命名为 MyBlog 打开 style.css 文件，在最前面添加如下代码\n\n```\n>/*  \nTheme Name: 这里填主题名称  \nTheme URI: 这里填主题介绍的网址，没有就填你的博客网址吧  \nDescription: 这里填主题的简短介绍  \nVersion: 版本号  \nAuthor: 作者名  \nAuthor URI: 作者的网址  \nTags: 标签，多个用半角逗号隔开  \n*/\n```\n\n然后打开 WordPress 管理后台”外观”栏目下。就可以看到你的主题。  \n\n2）将你的静态页截下来，命名为 screenshot.png 作为主题目录的缩略图。  \n\n3）一般来说，一个网站所有的页面都有相同的部分，比如 header 和 footer 创建 header.php 和 footer.php 将相同部分的代码拷贝到这里面，然后在有 header 或 footer 部分的页面中将相同代码删掉，分别修改为 `<?php get_header(); ?>` 和 `<?php get_footer(); ?>` 若有需要，还可以添加 sidebar 和 404 等页面，使用方法相同。  \n\n这样你的 WordPress 框架就构建完成了\n\n#### 修改静态页\n\n博客内容都是从后台进行控制的，所以我们要将前台静止的东西修改成可动态获取的代码  \n\n1）修改 url 地址\n首先是特殊的 style.css 文件将\n\n```html\n<link rel=\"stylesheet\" href=\"../style.css\" type=\"text/css\" />\n```\n\n改成\n\n```html\n<link rel=\"stylesheet\" href=\"<?php bloginfo('stylesheet_url'); ?>\" type=\"text/css\" />\n```\n\n`bloginfo('stylesheet_url')` 输出的是你的主题css文件绝对网址。  \n\n如果 css 文件不是 style.css ，且不是在主题根目录下，可以用 `<?php bloginfo('template_url'); ?>` 来获取主题根目录的 URL  \n例如：如你的主题 css 文件是 main.css，那么我们可以这样写 ：`<?php bloginfo('template_url'); ?>/main.css` ，如果是在子目录css下那就这样： `<?php bloginfo('template_url'); ?>/css/main.css`   \n同理，加载js文件和添加图片链接也是这样，在前面加上 `<?php bloginfo(‘template_url’); ?>` 即可。  \n\n2）修改 `<title>` ，这里提供一个从别的网站扒下来的 SEO 优化的 title 写法，将 `<title></title>` 修改成\n\n```div\n<title>\n    <?php if ( is_home() ) {\n        bloginfo('name'); echo \" - \"; bloginfo('description');\n    } elseif ( is_category() ) {\n        single_cat_title(); echo \" - \"; bloginfo('name');\n    } elseif (is_single() || is_page() ) {\n        single_post_title();\n    } elseif (is_search() ) {\n        echo \"搜索结果\"; echo \" - \"; bloginfo('name');\n    } elseif (is_404() ) {\n        echo '页面未找到!';\n    } else {\n        wp_title('',true);\n    } ?>\n</title>\n```\n\n3）更改博客名和描述  \n将\n\n```html\n<h1>Aurelius</h1>\n<h2>这里是描述</h2>\n```\n\n改成\n\n```html\n<h1><a href=\"<?php echo get_option('home'); ?>/\"><?php bloginfo('name'); ?></a></h1>\n<h2><?php bloginfo('description'); ?></h2>\n```\n\n代码详解：\n\n- `<?php echo get_option('home'); ?>`  输出你的博客首页网址  \n- `<?php bloginfo('name'); ?>`  输出你的博客名称  \n- `<?php bloginfo('description'); ?>`  输出博客描述\n\n#### 修改文章\n\n前面都是一些 WordPress 写法的基本介绍，header.php 和 footer.php 一般都是通过这样设置的。接下来最关键的就是修改文章，使网页可以从后台动态添加删除文章，可以参考以下这两片文章。 \n\n<a href=\"http://idmrchan.com/2016/08/24/wordpress-page/\" target=\"_blank\">WordPress文章制作</a>\n<a href=\"http://idmrchan.com/2016/08/24/wordpress-sidebar/\" target=\"_blank\">WordPress Sidebar制作</a>\n","source":"_posts/wordpress-basic.markdown","raw":"---\nlayout:     post\ntitle:      \"制作 WordPress 主题\"\ndate:       2016-08-24 10:20:00\ntags:\n    - WordPress\n---\n\n前言：用 WordPress 来制作博客真的是很方便，尤其是像我这种不会写后台的人来说，只要稍微修改下代码就能实现后台很多功能。这篇文章列出了一些 WordPress 基础操作步骤。\n\n### WordPress 本机环境搭建\n\n- 下载 XAMPP 安装后打开 Apache，MySQL 在浏览器中输入 localhost,即可检测是否安装成功。\n- 打开 MySQL 的 Admin 按钮。新建一个数据库（例如:wp）\n- 在 WordPress 官网上下载程序包，在 xampp 下创建文件夹 wordpress，放在 X:\\xampp\\htdocs 下。在浏览器中输入 localhost/wordpress 即可安装 WordPress \n\n> wp为你刚才建的数据库名。用户名为root ，密码无。这样WordPress就安装好了。\n\n### WordPress 文件构建\n\n首先你要有一个写好的静态页面，你可以打开下载的 WordPress 程序包，在 wp-content\\themes 下有 WordPress 预设的模板。接下来要做的就是将写好的静态页面修改成模板形式。  \n一般来说，每个主题都带有：  \n\n- index.php（首页）\n- header.php  \n- footer.php  \n- 404.php  \n- function.php（函数）\n- single.php（文章页面） \n- style.css  \n\n每个模板页面都至少要包含 index.html 和 style.css 文件。将所有的 .html 改成 .php  \n\n1）将你写的静态页文件夹放入 wp-content\\themes 我将其命名为 MyBlog 打开 style.css 文件，在最前面添加如下代码\n\n```\n>/*  \nTheme Name: 这里填主题名称  \nTheme URI: 这里填主题介绍的网址，没有就填你的博客网址吧  \nDescription: 这里填主题的简短介绍  \nVersion: 版本号  \nAuthor: 作者名  \nAuthor URI: 作者的网址  \nTags: 标签，多个用半角逗号隔开  \n*/\n```\n\n然后打开 WordPress 管理后台”外观”栏目下。就可以看到你的主题。  \n\n2）将你的静态页截下来，命名为 screenshot.png 作为主题目录的缩略图。  \n\n3）一般来说，一个网站所有的页面都有相同的部分，比如 header 和 footer 创建 header.php 和 footer.php 将相同部分的代码拷贝到这里面，然后在有 header 或 footer 部分的页面中将相同代码删掉，分别修改为 `<?php get_header(); ?>` 和 `<?php get_footer(); ?>` 若有需要，还可以添加 sidebar 和 404 等页面，使用方法相同。  \n\n这样你的 WordPress 框架就构建完成了\n\n#### 修改静态页\n\n博客内容都是从后台进行控制的，所以我们要将前台静止的东西修改成可动态获取的代码  \n\n1）修改 url 地址\n首先是特殊的 style.css 文件将\n\n```html\n<link rel=\"stylesheet\" href=\"../style.css\" type=\"text/css\" />\n```\n\n改成\n\n```html\n<link rel=\"stylesheet\" href=\"<?php bloginfo('stylesheet_url'); ?>\" type=\"text/css\" />\n```\n\n`bloginfo('stylesheet_url')` 输出的是你的主题css文件绝对网址。  \n\n如果 css 文件不是 style.css ，且不是在主题根目录下，可以用 `<?php bloginfo('template_url'); ?>` 来获取主题根目录的 URL  \n例如：如你的主题 css 文件是 main.css，那么我们可以这样写 ：`<?php bloginfo('template_url'); ?>/main.css` ，如果是在子目录css下那就这样： `<?php bloginfo('template_url'); ?>/css/main.css`   \n同理，加载js文件和添加图片链接也是这样，在前面加上 `<?php bloginfo(‘template_url’); ?>` 即可。  \n\n2）修改 `<title>` ，这里提供一个从别的网站扒下来的 SEO 优化的 title 写法，将 `<title></title>` 修改成\n\n```div\n<title>\n    <?php if ( is_home() ) {\n        bloginfo('name'); echo \" - \"; bloginfo('description');\n    } elseif ( is_category() ) {\n        single_cat_title(); echo \" - \"; bloginfo('name');\n    } elseif (is_single() || is_page() ) {\n        single_post_title();\n    } elseif (is_search() ) {\n        echo \"搜索结果\"; echo \" - \"; bloginfo('name');\n    } elseif (is_404() ) {\n        echo '页面未找到!';\n    } else {\n        wp_title('',true);\n    } ?>\n</title>\n```\n\n3）更改博客名和描述  \n将\n\n```html\n<h1>Aurelius</h1>\n<h2>这里是描述</h2>\n```\n\n改成\n\n```html\n<h1><a href=\"<?php echo get_option('home'); ?>/\"><?php bloginfo('name'); ?></a></h1>\n<h2><?php bloginfo('description'); ?></h2>\n```\n\n代码详解：\n\n- `<?php echo get_option('home'); ?>`  输出你的博客首页网址  \n- `<?php bloginfo('name'); ?>`  输出你的博客名称  \n- `<?php bloginfo('description'); ?>`  输出博客描述\n\n#### 修改文章\n\n前面都是一些 WordPress 写法的基本介绍，header.php 和 footer.php 一般都是通过这样设置的。接下来最关键的就是修改文章，使网页可以从后台动态添加删除文章，可以参考以下这两片文章。 \n\n<a href=\"http://idmrchan.com/2016/08/24/wordpress-page/\" target=\"_blank\">WordPress文章制作</a>\n<a href=\"http://idmrchan.com/2016/08/24/wordpress-sidebar/\" target=\"_blank\">WordPress Sidebar制作</a>\n","slug":"wordpress-basic","published":1,"updated":"2018-05-09T08:13:42.016Z","comments":1,"photos":[],"link":"","_id":"cjv7qf421002w2mhsk9xxoz10","content":"<p>前言：用 WordPress 来制作博客真的是很方便，尤其是像我这种不会写后台的人来说，只要稍微修改下代码就能实现后台很多功能。这篇文章列出了一些 WordPress 基础操作步骤。</p>\n<h3 id=\"WordPress-本机环境搭建\"><a href=\"#WordPress-本机环境搭建\" class=\"headerlink\" title=\"WordPress 本机环境搭建\"></a>WordPress 本机环境搭建</h3><ul>\n<li>下载 XAMPP 安装后打开 Apache，MySQL 在浏览器中输入 localhost,即可检测是否安装成功。</li>\n<li>打开 MySQL 的 Admin 按钮。新建一个数据库（例如:wp）</li>\n<li>在 WordPress 官网上下载程序包，在 xampp 下创建文件夹 wordpress，放在 X:\\xampp\\htdocs 下。在浏览器中输入 localhost/wordpress 即可安装 WordPress </li>\n</ul>\n<blockquote>\n<p>wp为你刚才建的数据库名。用户名为root ，密码无。这样WordPress就安装好了。</p>\n</blockquote>\n<h3 id=\"WordPress-文件构建\"><a href=\"#WordPress-文件构建\" class=\"headerlink\" title=\"WordPress 文件构建\"></a>WordPress 文件构建</h3><p>首先你要有一个写好的静态页面，你可以打开下载的 WordPress 程序包，在 wp-content\\themes 下有 WordPress 预设的模板。接下来要做的就是将写好的静态页面修改成模板形式。<br>一般来说，每个主题都带有：  </p>\n<ul>\n<li>index.php（首页）</li>\n<li>header.php  </li>\n<li>footer.php  </li>\n<li>404.php  </li>\n<li>function.php（函数）</li>\n<li>single.php（文章页面） </li>\n<li>style.css  </li>\n</ul>\n<p>每个模板页面都至少要包含 index.html 和 style.css 文件。将所有的 .html 改成 .php  </p>\n<p>1）将你写的静态页文件夹放入 wp-content\\themes 我将其命名为 MyBlog 打开 style.css 文件，在最前面添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;/*  </span><br><span class=\"line\">Theme Name: 这里填主题名称  </span><br><span class=\"line\">Theme URI: 这里填主题介绍的网址，没有就填你的博客网址吧  </span><br><span class=\"line\">Description: 这里填主题的简短介绍  </span><br><span class=\"line\">Version: 版本号  </span><br><span class=\"line\">Author: 作者名  </span><br><span class=\"line\">Author URI: 作者的网址  </span><br><span class=\"line\">Tags: 标签，多个用半角逗号隔开  </span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>然后打开 WordPress 管理后台”外观”栏目下。就可以看到你的主题。  </p>\n<p>2）将你的静态页截下来，命名为 screenshot.png 作为主题目录的缩略图。  </p>\n<p>3）一般来说，一个网站所有的页面都有相同的部分，比如 header 和 footer 创建 header.php 和 footer.php 将相同部分的代码拷贝到这里面，然后在有 header 或 footer 部分的页面中将相同代码删掉，分别修改为 <code>&lt;?php get_header(); ?&gt;</code> 和 <code>&lt;?php get_footer(); ?&gt;</code> 若有需要，还可以添加 sidebar 和 404 等页面，使用方法相同。  </p>\n<p>这样你的 WordPress 框架就构建完成了</p>\n<h4 id=\"修改静态页\"><a href=\"#修改静态页\" class=\"headerlink\" title=\"修改静态页\"></a>修改静态页</h4><p>博客内容都是从后台进行控制的，所以我们要将前台静止的东西修改成可动态获取的代码  </p>\n<p>1）修改 url 地址<br>首先是特殊的 style.css 文件将</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;?php bloginfo('stylesheet_url'); ?&gt;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>bloginfo(&#39;stylesheet_url&#39;)</code> 输出的是你的主题css文件绝对网址。  </p>\n<p>如果 css 文件不是 style.css ，且不是在主题根目录下，可以用 <code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;</code> 来获取主题根目录的 URL<br>例如：如你的主题 css 文件是 main.css，那么我们可以这样写 ：<code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;/main.css</code> ，如果是在子目录css下那就这样： <code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;/css/main.css</code><br>同理，加载js文件和添加图片链接也是这样，在前面加上 <code>&lt;?php bloginfo(‘template_url’); ?&gt;</code> 即可。  </p>\n<p>2）修改 <code>&lt;title&gt;</code> ，这里提供一个从别的网站扒下来的 SEO 优化的 title 写法，将 <code>&lt;title&gt;&lt;/title&gt;</code> 修改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;</span><br><span class=\"line\">    &lt;?php if ( is_home() ) &#123;</span><br><span class=\"line\">        bloginfo(&apos;name&apos;); echo &quot; - &quot;; bloginfo(&apos;description&apos;);</span><br><span class=\"line\">    &#125; elseif ( is_category() ) &#123;</span><br><span class=\"line\">        single_cat_title(); echo &quot; - &quot;; bloginfo(&apos;name&apos;);</span><br><span class=\"line\">    &#125; elseif (is_single() || is_page() ) &#123;</span><br><span class=\"line\">        single_post_title();</span><br><span class=\"line\">    &#125; elseif (is_search() ) &#123;</span><br><span class=\"line\">        echo &quot;搜索结果&quot;; echo &quot; - &quot;; bloginfo(&apos;name&apos;);</span><br><span class=\"line\">    &#125; elseif (is_404() ) &#123;</span><br><span class=\"line\">        echo &apos;页面未找到!&apos;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        wp_title(&apos;&apos;,true);</span><br><span class=\"line\">    &#125; ?&gt;</span><br><span class=\"line\">&lt;/title&gt;</span><br></pre></td></tr></table></figure>\n<p>3）更改博客名和描述<br>将</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Aurelius<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>这里是描述<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;?php echo get_option('home'); ?&gt;/\"</span>&gt;</span>&lt;?php bloginfo('name'); ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;?php bloginfo('description'); ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码详解：</p>\n<ul>\n<li><code>&lt;?php echo get_option(&#39;home&#39;); ?&gt;</code>  输出你的博客首页网址  </li>\n<li><code>&lt;?php bloginfo(&#39;name&#39;); ?&gt;</code>  输出你的博客名称  </li>\n<li><code>&lt;?php bloginfo(&#39;description&#39;); ?&gt;</code>  输出博客描述</li>\n</ul>\n<h4 id=\"修改文章\"><a href=\"#修改文章\" class=\"headerlink\" title=\"修改文章\"></a>修改文章</h4><p>前面都是一些 WordPress 写法的基本介绍，header.php 和 footer.php 一般都是通过这样设置的。接下来最关键的就是修改文章，使网页可以从后台动态添加删除文章，可以参考以下这两片文章。 </p>\n<p><a href=\"http://idmrchan.com/2016/08/24/wordpress-page/\" target=\"_blank\">WordPress文章制作</a><br><a href=\"http://idmrchan.com/2016/08/24/wordpress-sidebar/\" target=\"_blank\">WordPress Sidebar制作</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前言：用 WordPress 来制作博客真的是很方便，尤其是像我这种不会写后台的人来说，只要稍微修改下代码就能实现后台很多功能。这篇文章列出了一些 WordPress 基础操作步骤。</p>\n<h3 id=\"WordPress-本机环境搭建\"><a href=\"#WordPress-本机环境搭建\" class=\"headerlink\" title=\"WordPress 本机环境搭建\"></a>WordPress 本机环境搭建</h3><ul>\n<li>下载 XAMPP 安装后打开 Apache，MySQL 在浏览器中输入 localhost,即可检测是否安装成功。</li>\n<li>打开 MySQL 的 Admin 按钮。新建一个数据库（例如:wp）</li>\n<li>在 WordPress 官网上下载程序包，在 xampp 下创建文件夹 wordpress，放在 X:\\xampp\\htdocs 下。在浏览器中输入 localhost/wordpress 即可安装 WordPress </li>\n</ul>\n<blockquote>\n<p>wp为你刚才建的数据库名。用户名为root ，密码无。这样WordPress就安装好了。</p>\n</blockquote>\n<h3 id=\"WordPress-文件构建\"><a href=\"#WordPress-文件构建\" class=\"headerlink\" title=\"WordPress 文件构建\"></a>WordPress 文件构建</h3><p>首先你要有一个写好的静态页面，你可以打开下载的 WordPress 程序包，在 wp-content\\themes 下有 WordPress 预设的模板。接下来要做的就是将写好的静态页面修改成模板形式。<br>一般来说，每个主题都带有：  </p>\n<ul>\n<li>index.php（首页）</li>\n<li>header.php  </li>\n<li>footer.php  </li>\n<li>404.php  </li>\n<li>function.php（函数）</li>\n<li>single.php（文章页面） </li>\n<li>style.css  </li>\n</ul>\n<p>每个模板页面都至少要包含 index.html 和 style.css 文件。将所有的 .html 改成 .php  </p>\n<p>1）将你写的静态页文件夹放入 wp-content\\themes 我将其命名为 MyBlog 打开 style.css 文件，在最前面添加如下代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;/*  </span><br><span class=\"line\">Theme Name: 这里填主题名称  </span><br><span class=\"line\">Theme URI: 这里填主题介绍的网址，没有就填你的博客网址吧  </span><br><span class=\"line\">Description: 这里填主题的简短介绍  </span><br><span class=\"line\">Version: 版本号  </span><br><span class=\"line\">Author: 作者名  </span><br><span class=\"line\">Author URI: 作者的网址  </span><br><span class=\"line\">Tags: 标签，多个用半角逗号隔开  </span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n<p>然后打开 WordPress 管理后台”外观”栏目下。就可以看到你的主题。  </p>\n<p>2）将你的静态页截下来，命名为 screenshot.png 作为主题目录的缩略图。  </p>\n<p>3）一般来说，一个网站所有的页面都有相同的部分，比如 header 和 footer 创建 header.php 和 footer.php 将相同部分的代码拷贝到这里面，然后在有 header 或 footer 部分的页面中将相同代码删掉，分别修改为 <code>&lt;?php get_header(); ?&gt;</code> 和 <code>&lt;?php get_footer(); ?&gt;</code> 若有需要，还可以添加 sidebar 和 404 等页面，使用方法相同。  </p>\n<p>这样你的 WordPress 框架就构建完成了</p>\n<h4 id=\"修改静态页\"><a href=\"#修改静态页\" class=\"headerlink\" title=\"修改静态页\"></a>修改静态页</h4><p>博客内容都是从后台进行控制的，所以我们要将前台静止的东西修改成可动态获取的代码  </p>\n<p>1）修改 url 地址<br>首先是特殊的 style.css 文件将</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"../style.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;?php bloginfo('stylesheet_url'); ?&gt;\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>bloginfo(&#39;stylesheet_url&#39;)</code> 输出的是你的主题css文件绝对网址。  </p>\n<p>如果 css 文件不是 style.css ，且不是在主题根目录下，可以用 <code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;</code> 来获取主题根目录的 URL<br>例如：如你的主题 css 文件是 main.css，那么我们可以这样写 ：<code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;/main.css</code> ，如果是在子目录css下那就这样： <code>&lt;?php bloginfo(&#39;template_url&#39;); ?&gt;/css/main.css</code><br>同理，加载js文件和添加图片链接也是这样，在前面加上 <code>&lt;?php bloginfo(‘template_url’); ?&gt;</code> 即可。  </p>\n<p>2）修改 <code>&lt;title&gt;</code> ，这里提供一个从别的网站扒下来的 SEO 优化的 title 写法，将 <code>&lt;title&gt;&lt;/title&gt;</code> 修改成</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;</span><br><span class=\"line\">    &lt;?php if ( is_home() ) &#123;</span><br><span class=\"line\">        bloginfo(&apos;name&apos;); echo &quot; - &quot;; bloginfo(&apos;description&apos;);</span><br><span class=\"line\">    &#125; elseif ( is_category() ) &#123;</span><br><span class=\"line\">        single_cat_title(); echo &quot; - &quot;; bloginfo(&apos;name&apos;);</span><br><span class=\"line\">    &#125; elseif (is_single() || is_page() ) &#123;</span><br><span class=\"line\">        single_post_title();</span><br><span class=\"line\">    &#125; elseif (is_search() ) &#123;</span><br><span class=\"line\">        echo &quot;搜索结果&quot;; echo &quot; - &quot;; bloginfo(&apos;name&apos;);</span><br><span class=\"line\">    &#125; elseif (is_404() ) &#123;</span><br><span class=\"line\">        echo &apos;页面未找到!&apos;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        wp_title(&apos;&apos;,true);</span><br><span class=\"line\">    &#125; ?&gt;</span><br><span class=\"line\">&lt;/title&gt;</span><br></pre></td></tr></table></figure>\n<p>3）更改博客名和描述<br>将</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Aurelius<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>这里是描述<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>改成</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&lt;?php echo get_option('home'); ?&gt;/\"</span>&gt;</span>&lt;?php bloginfo('name'); ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&lt;?php bloginfo('description'); ?&gt;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>代码详解：</p>\n<ul>\n<li><code>&lt;?php echo get_option(&#39;home&#39;); ?&gt;</code>  输出你的博客首页网址  </li>\n<li><code>&lt;?php bloginfo(&#39;name&#39;); ?&gt;</code>  输出你的博客名称  </li>\n<li><code>&lt;?php bloginfo(&#39;description&#39;); ?&gt;</code>  输出博客描述</li>\n</ul>\n<h4 id=\"修改文章\"><a href=\"#修改文章\" class=\"headerlink\" title=\"修改文章\"></a>修改文章</h4><p>前面都是一些 WordPress 写法的基本介绍，header.php 和 footer.php 一般都是通过这样设置的。接下来最关键的就是修改文章，使网页可以从后台动态添加删除文章，可以参考以下这两片文章。 </p>\n<p><a href=\"http://idmrchan.com/2016/08/24/wordpress-page/\" target=\"_blank\">WordPress文章制作</a><br><a href=\"http://idmrchan.com/2016/08/24/wordpress-sidebar/\" target=\"_blank\">WordPress Sidebar制作</a></p>\n"},{"layout":"post","title":"WordPress 文章制作","date":"2016-08-24T01:50:00.000Z","_content":"\n一篇博客文章html骨架大致为：  \n\n```html\n<div>\n    <h3><a href=\"#\">文章标题</a></h3>\n    <p>\n        <a href=\"#\">标签1</a>\n        <a href=\"#\">标签2</a>\n        发布时间 \n    </p>\n    <img class=\"thumb\" alt=\"\" src=\"<?php bloginfo('template_url'); ?>/images/610x150.gif\" />\n    文章内容\n    <p><a href=\"#\"- 阅读全文按钮</a></p>\n</div>\n```\n\n### 修改文章\n\n-  `<?php the_permalink(); ?>`  文章的URL链接  \n- `<?php the_title(); ?>`  文章的标题  \n- `<?php the_author(); ?>` 作者名字  \n- `<?php the_category(', ', ''); ?>` 分类目录  \n- `<?php the_tags(‘标签：’, ‘, ‘, ”); ?>` 文章标签  \n- `<?php the_time(‘Y年n月j日’) ?>` 添加日期  \n- `<?php comments_popup_link('0 条评论', '1 条评论', '% 条评论', '', '评论已关闭'); ?>` 评论  \n- `<?php echo mb_strimwidth(strip_tags(apply_filters('the_content', $post->post_content)), 0, 200,\"...\"); ?>` 显示文章摘要200为200字  \n- `<?php the_permalink(); ?>` 阅读全文\n\n### 添加文章循环\n\n到目前为止，首页还只能显示一篇文章，要想输出所有文章，需要添加循环：\n\n```php\n<?php if (have_posts()) : while (have_posts()) : the_post(); ?>\n<article></article>\n<?php endwhile; ?>\n<?php else : ?>\n<h3 class=\"title\"><a href=\"#\" rel=\"bookmark\">未找到</a></h3>\n<p>没有找到任何文章！</p>\n<?php endif; ?>\n```\n\n在 WordPress 后台设置内可以控制首页显示文章的数目。\n\n### 添加文章分页\n\nfunction 代码，添加到最后一个 `?-` 的前面\n\n```javascript\nfunction par_pagenavi($range = 9){\n    global $paged, $wp_query;\n    if ( !$max_page ) {$max_page = $wp_query->max_num_pages;}\n    if($max_page - 1){if(!$paged){$paged = 1;}\n    if($paged != 1){echo \"<a href='\" . get_pagenum_link(1) . \"' class='extend' title='跳转到首页'- 返回首页 </a>\";}\n    previous_posts_link(' 上一页 ');\n    if($max_page - $range){\n    if($paged < $range){for($i = 1; $i <= ($range + 1); $i++){echo \"<a href='\" .get_pagenum_link($i) .\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    elseif($paged >= ($max_page - ceil(($range/2)))){\n    for($i = $max_page - $range; $i <= $max_page; $i++){echo \"<a href='\" .get_pagenum_link($i) .\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    elseif($paged >= $range && $paged < ($max_page - ceil(($range/2)))){\n    for($i = ($paged - ceil($range/2)); $i <= ($paged + ceil(($range/2))); $i++){echo \"<a href='\" . get_pagenum_link($i) .\"'\";if($i==$paged) echo \" class='current'\";echo\">$i</a>\";}}}\n    else{for($i = 1; $i <= $max_page; $i++){echo \"<a href='\" . get_pagenum_link($i).\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    next_posts_link(' 下一页 ');\n    if($paged != $max_page){echo \"<a href='\" . get_pagenum_link($max_page) . \"' class='extend' title='跳转到最后一页'- 最后一页 </a>\";}}\n}\n```\n\ncss代码\n\n```css\n.page_navi{overflow:hidden;width:100%;text-align:center}\n \n.page_navi a{height:36px;border:1px solid #DDD;-webkit-border-radius:12px;-moz-border-radius:12px;border-radius:12px;color:#888;text-decoration:none;line-height:36px;margin:2px;padding:3px 8px}\n \n.page_navi a:hover,.page_navi a.current{border:1px solid #FFBB76;color:#FF7200;font-weight:bolder}\n```\n\nhtml引入\n\n```html\n<div class=\"page_navi\"><?php par_pagenavi(5); ?></div-  //5为每页显示的文章数。\n```\n","source":"_posts/wordpress-page.markdown","raw":"---\nlayout:     post\ntitle:      \"WordPress 文章制作\"\ndate:       2016-08-24 09:50:00\ntags:\n    - WordPress\n---\n\n一篇博客文章html骨架大致为：  \n\n```html\n<div>\n    <h3><a href=\"#\">文章标题</a></h3>\n    <p>\n        <a href=\"#\">标签1</a>\n        <a href=\"#\">标签2</a>\n        发布时间 \n    </p>\n    <img class=\"thumb\" alt=\"\" src=\"<?php bloginfo('template_url'); ?>/images/610x150.gif\" />\n    文章内容\n    <p><a href=\"#\"- 阅读全文按钮</a></p>\n</div>\n```\n\n### 修改文章\n\n-  `<?php the_permalink(); ?>`  文章的URL链接  \n- `<?php the_title(); ?>`  文章的标题  \n- `<?php the_author(); ?>` 作者名字  \n- `<?php the_category(', ', ''); ?>` 分类目录  \n- `<?php the_tags(‘标签：’, ‘, ‘, ”); ?>` 文章标签  \n- `<?php the_time(‘Y年n月j日’) ?>` 添加日期  \n- `<?php comments_popup_link('0 条评论', '1 条评论', '% 条评论', '', '评论已关闭'); ?>` 评论  \n- `<?php echo mb_strimwidth(strip_tags(apply_filters('the_content', $post->post_content)), 0, 200,\"...\"); ?>` 显示文章摘要200为200字  \n- `<?php the_permalink(); ?>` 阅读全文\n\n### 添加文章循环\n\n到目前为止，首页还只能显示一篇文章，要想输出所有文章，需要添加循环：\n\n```php\n<?php if (have_posts()) : while (have_posts()) : the_post(); ?>\n<article></article>\n<?php endwhile; ?>\n<?php else : ?>\n<h3 class=\"title\"><a href=\"#\" rel=\"bookmark\">未找到</a></h3>\n<p>没有找到任何文章！</p>\n<?php endif; ?>\n```\n\n在 WordPress 后台设置内可以控制首页显示文章的数目。\n\n### 添加文章分页\n\nfunction 代码，添加到最后一个 `?-` 的前面\n\n```javascript\nfunction par_pagenavi($range = 9){\n    global $paged, $wp_query;\n    if ( !$max_page ) {$max_page = $wp_query->max_num_pages;}\n    if($max_page - 1){if(!$paged){$paged = 1;}\n    if($paged != 1){echo \"<a href='\" . get_pagenum_link(1) . \"' class='extend' title='跳转到首页'- 返回首页 </a>\";}\n    previous_posts_link(' 上一页 ');\n    if($max_page - $range){\n    if($paged < $range){for($i = 1; $i <= ($range + 1); $i++){echo \"<a href='\" .get_pagenum_link($i) .\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    elseif($paged >= ($max_page - ceil(($range/2)))){\n    for($i = $max_page - $range; $i <= $max_page; $i++){echo \"<a href='\" .get_pagenum_link($i) .\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    elseif($paged >= $range && $paged < ($max_page - ceil(($range/2)))){\n    for($i = ($paged - ceil($range/2)); $i <= ($paged + ceil(($range/2))); $i++){echo \"<a href='\" . get_pagenum_link($i) .\"'\";if($i==$paged) echo \" class='current'\";echo\">$i</a>\";}}}\n    else{for($i = 1; $i <= $max_page; $i++){echo \"<a href='\" . get_pagenum_link($i).\"'\";\n    if($i==$paged)echo \" class='current'\";echo \">$i</a>\";}}\n    next_posts_link(' 下一页 ');\n    if($paged != $max_page){echo \"<a href='\" . get_pagenum_link($max_page) . \"' class='extend' title='跳转到最后一页'- 最后一页 </a>\";}}\n}\n```\n\ncss代码\n\n```css\n.page_navi{overflow:hidden;width:100%;text-align:center}\n \n.page_navi a{height:36px;border:1px solid #DDD;-webkit-border-radius:12px;-moz-border-radius:12px;border-radius:12px;color:#888;text-decoration:none;line-height:36px;margin:2px;padding:3px 8px}\n \n.page_navi a:hover,.page_navi a.current{border:1px solid #FFBB76;color:#FF7200;font-weight:bolder}\n```\n\nhtml引入\n\n```html\n<div class=\"page_navi\"><?php par_pagenavi(5); ?></div-  //5为每页显示的文章数。\n```\n","slug":"wordpress-page","published":1,"updated":"2018-05-09T07:53:19.612Z","comments":1,"photos":[],"link":"","_id":"cjv7qf423002y2mhs6fx1idpd","content":"<p>一篇博客文章html骨架大致为：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>标签1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>标签2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        发布时间 </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thumb\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;?php bloginfo('template_url'); ?&gt;/images/610x150.gif\"</span> /&gt;</span></span><br><span class=\"line\">    文章内容</span><br><span class=\"line\">    &lt;p&gt;&lt;a href=\"#\"- 阅读全文按钮&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改文章\"><a href=\"#修改文章\" class=\"headerlink\" title=\"修改文章\"></a>修改文章</h3><ul>\n<li><code>&lt;?php the_permalink(); ?&gt;</code>  文章的URL链接  </li>\n<li><code>&lt;?php the_title(); ?&gt;</code>  文章的标题  </li>\n<li><code>&lt;?php the_author(); ?&gt;</code> 作者名字  </li>\n<li><code>&lt;?php the_category(&#39;, &#39;, &#39;&#39;); ?&gt;</code> 分类目录  </li>\n<li><code>&lt;?php the_tags(‘标签：’, ‘, ‘, ”); ?&gt;</code> 文章标签  </li>\n<li><code>&lt;?php the_time(‘Y年n月j日’) ?&gt;</code> 添加日期  </li>\n<li><code>&lt;?php comments_popup_link(&#39;0 条评论&#39;, &#39;1 条评论&#39;, &#39;% 条评论&#39;, &#39;&#39;, &#39;评论已关闭&#39;); ?&gt;</code> 评论  </li>\n<li><code>&lt;?php echo mb_strimwidth(strip_tags(apply_filters(&#39;the_content&#39;, $post-&gt;post_content)), 0, 200,&quot;...&quot;); ?&gt;</code> 显示文章摘要200为200字  </li>\n<li><code>&lt;?php the_permalink(); ?&gt;</code> 阅读全文</li>\n</ul>\n<h3 id=\"添加文章循环\"><a href=\"#添加文章循环\" class=\"headerlink\" title=\"添加文章循环\"></a>添加文章循环</h3><p>到目前为止，首页还只能显示一篇文章，要想输出所有文章，需要添加循环：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> (have_posts()) : <span class=\"keyword\">while</span> (have_posts()) : the_post(); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;article&gt;&lt;/article&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endwhile</span>; <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">else</span> : <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;h3 class=\"title\"&gt;&lt;a href=\"#\" rel=\"bookmark\"&gt;未找到&lt;/a&gt;&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;没有找到任何文章！&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 WordPress 后台设置内可以控制首页显示文章的数目。</p>\n<h3 id=\"添加文章分页\"><a href=\"#添加文章分页\" class=\"headerlink\" title=\"添加文章分页\"></a>添加文章分页</h3><p>function 代码，添加到最后一个 <code>?-</code> 的前面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">par_pagenavi</span>(<span class=\"params\">$range = <span class=\"number\">9</span></span>)</span>&#123;</span><br><span class=\"line\">    global $paged, $wp_query;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !$max_page ) &#123;$max_page = $wp_query-&gt;max_num_pages;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($max_page - <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(!$paged)&#123;$paged = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged != <span class=\"number\">1</span>)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link(<span class=\"number\">1</span>) . <span class=\"string\">\"' class='extend' title='跳转到首页'- 返回首页 &lt;/a&gt;\"</span>;&#125;</span><br><span class=\"line\">    previous_posts_link(<span class=\"string\">' 上一页 '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($max_page - $range)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged &lt; $range)&#123;<span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt;= ($range + <span class=\"number\">1</span>); $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> .get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    elseif($paged &gt;= ($max_page - ceil(($range/<span class=\"number\">2</span>))))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = $max_page - $range; $i &lt;= $max_page; $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> .get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    elseif($paged &gt;= $range &amp;&amp; $paged &lt; ($max_page - ceil(($range/<span class=\"number\">2</span>))))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = ($paged - ceil($range/<span class=\"number\">2</span>)); $i &lt;= ($paged + ceil(($range/<span class=\"number\">2</span>))); $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;<span class=\"keyword\">if</span>($i==$paged) echo <span class=\"string\">\" class='current'\"</span>;echo<span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt;= $max_page; $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($i).<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    next_posts_link(<span class=\"string\">' 下一页 '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged != $max_page)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($max_page) . <span class=\"string\">\"' class='extend' title='跳转到最后一页'- 最后一页 &lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page_navi</span>&#123;<span class=\"attribute\">overflow</span>:hidden;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"attribute\">text-align</span>:center&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">36px</span>;<span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#DDD</span>;<span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#888</span>;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">line-height</span>:<span class=\"number\">36px</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">2px</span>;<span class=\"attribute\">padding</span>:<span class=\"number\">3px</span> <span class=\"number\">8px</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.current</span>&#123;<span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#FFBB76</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FF7200</span>;<span class=\"attribute\">font-weight</span>:bolder&#125;</span><br></pre></td></tr></table></figure>\n<p>html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page_navi\"</span>&gt;</span><span class=\"php\"><span class=\"meta\">&lt;?php</span> par_pagenavi(<span class=\"number\">5</span>); <span class=\"meta\">?&gt;</span></span><span class=\"tag\">&lt;/<span class=\"name\">div-</span>  //<span class=\"attr\">5</span>为每页显示的文章数。</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一篇博客文章html骨架大致为：  </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>文章标题<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>标签1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span>&gt;</span>标签2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">        发布时间 </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">class</span>=<span class=\"string\">\"thumb\"</span> <span class=\"attr\">alt</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&lt;?php bloginfo('template_url'); ?&gt;/images/610x150.gif\"</span> /&gt;</span></span><br><span class=\"line\">    文章内容</span><br><span class=\"line\">    &lt;p&gt;&lt;a href=\"#\"- 阅读全文按钮&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改文章\"><a href=\"#修改文章\" class=\"headerlink\" title=\"修改文章\"></a>修改文章</h3><ul>\n<li><code>&lt;?php the_permalink(); ?&gt;</code>  文章的URL链接  </li>\n<li><code>&lt;?php the_title(); ?&gt;</code>  文章的标题  </li>\n<li><code>&lt;?php the_author(); ?&gt;</code> 作者名字  </li>\n<li><code>&lt;?php the_category(&#39;, &#39;, &#39;&#39;); ?&gt;</code> 分类目录  </li>\n<li><code>&lt;?php the_tags(‘标签：’, ‘, ‘, ”); ?&gt;</code> 文章标签  </li>\n<li><code>&lt;?php the_time(‘Y年n月j日’) ?&gt;</code> 添加日期  </li>\n<li><code>&lt;?php comments_popup_link(&#39;0 条评论&#39;, &#39;1 条评论&#39;, &#39;% 条评论&#39;, &#39;&#39;, &#39;评论已关闭&#39;); ?&gt;</code> 评论  </li>\n<li><code>&lt;?php echo mb_strimwidth(strip_tags(apply_filters(&#39;the_content&#39;, $post-&gt;post_content)), 0, 200,&quot;...&quot;); ?&gt;</code> 显示文章摘要200为200字  </li>\n<li><code>&lt;?php the_permalink(); ?&gt;</code> 阅读全文</li>\n</ul>\n<h3 id=\"添加文章循环\"><a href=\"#添加文章循环\" class=\"headerlink\" title=\"添加文章循环\"></a>添加文章循环</h3><p>到目前为止，首页还只能显示一篇文章，要想输出所有文章，需要添加循环：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> (have_posts()) : <span class=\"keyword\">while</span> (have_posts()) : the_post(); <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;article&gt;&lt;/article&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endwhile</span>; <span class=\"meta\">?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">else</span> : <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">&lt;h3 class=\"title\"&gt;&lt;a href=\"#\" rel=\"bookmark\"&gt;未找到&lt;/a&gt;&lt;/h3&gt;</span><br><span class=\"line\">&lt;p&gt;没有找到任何文章！&lt;/p&gt;</span><br><span class=\"line\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在 WordPress 后台设置内可以控制首页显示文章的数目。</p>\n<h3 id=\"添加文章分页\"><a href=\"#添加文章分页\" class=\"headerlink\" title=\"添加文章分页\"></a>添加文章分页</h3><p>function 代码，添加到最后一个 <code>?-</code> 的前面</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">par_pagenavi</span>(<span class=\"params\">$range = <span class=\"number\">9</span></span>)</span>&#123;</span><br><span class=\"line\">    global $paged, $wp_query;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !$max_page ) &#123;$max_page = $wp_query-&gt;max_num_pages;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($max_page - <span class=\"number\">1</span>)&#123;<span class=\"keyword\">if</span>(!$paged)&#123;$paged = <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged != <span class=\"number\">1</span>)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link(<span class=\"number\">1</span>) . <span class=\"string\">\"' class='extend' title='跳转到首页'- 返回首页 &lt;/a&gt;\"</span>;&#125;</span><br><span class=\"line\">    previous_posts_link(<span class=\"string\">' 上一页 '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($max_page - $range)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged &lt; $range)&#123;<span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt;= ($range + <span class=\"number\">1</span>); $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> .get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    elseif($paged &gt;= ($max_page - ceil(($range/<span class=\"number\">2</span>))))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = $max_page - $range; $i &lt;= $max_page; $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> .get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    elseif($paged &gt;= $range &amp;&amp; $paged &lt; ($max_page - ceil(($range/<span class=\"number\">2</span>))))&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>($i = ($paged - ceil($range/<span class=\"number\">2</span>)); $i &lt;= ($paged + ceil(($range/<span class=\"number\">2</span>))); $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($i) .<span class=\"string\">\"'\"</span>;<span class=\"keyword\">if</span>($i==$paged) echo <span class=\"string\">\" class='current'\"</span>;echo<span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;<span class=\"keyword\">for</span>($i = <span class=\"number\">1</span>; $i &lt;= $max_page; $i++)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($i).<span class=\"string\">\"'\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($i==$paged)echo <span class=\"string\">\" class='current'\"</span>;echo <span class=\"string\">\"&gt;$i&lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">    next_posts_link(<span class=\"string\">' 下一页 '</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>($paged != $max_page)&#123;echo <span class=\"string\">\"&lt;a href='\"</span> . get_pagenum_link($max_page) . <span class=\"string\">\"' class='extend' title='跳转到最后一页'- 最后一页 &lt;/a&gt;\"</span>;&#125;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>css代码</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.page_navi</span>&#123;<span class=\"attribute\">overflow</span>:hidden;<span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;<span class=\"attribute\">text-align</span>:center&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">36px</span>;<span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#DDD</span>;<span class=\"attribute\">-webkit-border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">-moz-border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">border-radius</span>:<span class=\"number\">12px</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#888</span>;<span class=\"attribute\">text-decoration</span>:none;<span class=\"attribute\">line-height</span>:<span class=\"number\">36px</span>;<span class=\"attribute\">margin</span>:<span class=\"number\">2px</span>;<span class=\"attribute\">padding</span>:<span class=\"number\">3px</span> <span class=\"number\">8px</span>&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>,<span class=\"selector-class\">.page_navi</span> <span class=\"selector-tag\">a</span><span class=\"selector-class\">.current</span>&#123;<span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid <span class=\"number\">#FFBB76</span>;<span class=\"attribute\">color</span>:<span class=\"number\">#FF7200</span>;<span class=\"attribute\">font-weight</span>:bolder&#125;</span><br></pre></td></tr></table></figure>\n<p>html引入</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"page_navi\"</span>&gt;</span><span class=\"php\"><span class=\"meta\">&lt;?php</span> par_pagenavi(<span class=\"number\">5</span>); <span class=\"meta\">?&gt;</span></span><span class=\"tag\">&lt;/<span class=\"name\">div-</span>  //<span class=\"attr\">5</span>为每页显示的文章数。</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"WordPress Sidebar制作","date":"2016-08-24T01:30:00.000Z","_content":"\n### 添加引用\n在 index 内把侧边栏代码复制到 sidebar.php 用 `<?php get_sidebar(); ?>` 引用\n\n### 添加函数\n添加 function 函数：其参数根据具体情况而定。\n\n```php\n<?php\n    //注册侧边栏\n    if ( function_exists('register_sidebar') ) {\n        register_sidebar(array(\n        'name'=>'首页侧边栏',\n        'id'=>'sidebar-1',\n        'before_widget' => '<li>',\n        'after_widget' => '</li>',\n        'before_title' => '<h4>',\n        'after_title' => '</h4>',\n    ));\n}?>\n```\n\n### 修改sidebar静态内容\n\n##### 添加循环\n\n```html\n<div>\n    <?php if ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘First_sidebar’) ) : ?>\n    <div>分类目录</div>\n    <?php endif; ?>\n</div>\n<div>\n    <?php if ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘Second_sidebar’) ) : ?>\n    <div>最新文章</div>\n    <?php endif; ?>\n</div>\n```\n\n##### 获取分类目录\n\n```html\n<ul>\n    <?php\n        wp_list_categories(‘depth=1&title_li=&orderby=id&show_count=0&hide_empty=1&child_of=0’);?>\n</ul>\n```\n\n##### 获取最新文章\n\n```html\n<ul>\n    <?php \n        $posts = get_posts(‘numberposts=6&orderby=post_date’);\n        foreach($posts as $post) {\n            setup_postdata($post);\n            echo '<li><a href=\"' . get_permalink() . '\"><i class=\"icon-folder-open-alt\"></i>'. get_the_title() . '</a></li>';\n        }\n        $post = $posts[0];?>\n</ul>\n```\n","source":"_posts/wordpress-sidebar.markdown","raw":"---\nlayout:     post\ntitle:      \"WordPress Sidebar制作\"\ndate:       2016-08-24 09:30:00\ntags:\n    - WordPress\n---\n\n### 添加引用\n在 index 内把侧边栏代码复制到 sidebar.php 用 `<?php get_sidebar(); ?>` 引用\n\n### 添加函数\n添加 function 函数：其参数根据具体情况而定。\n\n```php\n<?php\n    //注册侧边栏\n    if ( function_exists('register_sidebar') ) {\n        register_sidebar(array(\n        'name'=>'首页侧边栏',\n        'id'=>'sidebar-1',\n        'before_widget' => '<li>',\n        'after_widget' => '</li>',\n        'before_title' => '<h4>',\n        'after_title' => '</h4>',\n    ));\n}?>\n```\n\n### 修改sidebar静态内容\n\n##### 添加循环\n\n```html\n<div>\n    <?php if ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘First_sidebar’) ) : ?>\n    <div>分类目录</div>\n    <?php endif; ?>\n</div>\n<div>\n    <?php if ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘Second_sidebar’) ) : ?>\n    <div>最新文章</div>\n    <?php endif; ?>\n</div>\n```\n\n##### 获取分类目录\n\n```html\n<ul>\n    <?php\n        wp_list_categories(‘depth=1&title_li=&orderby=id&show_count=0&hide_empty=1&child_of=0’);?>\n</ul>\n```\n\n##### 获取最新文章\n\n```html\n<ul>\n    <?php \n        $posts = get_posts(‘numberposts=6&orderby=post_date’);\n        foreach($posts as $post) {\n            setup_postdata($post);\n            echo '<li><a href=\"' . get_permalink() . '\"><i class=\"icon-folder-open-alt\"></i>'. get_the_title() . '</a></li>';\n        }\n        $post = $posts[0];?>\n</ul>\n```\n","slug":"wordpress-sidebar","published":1,"updated":"2018-05-09T07:55:15.868Z","comments":1,"photos":[],"link":"","_id":"cjv7qf42400312mhsgxpeuzjz","content":"<h3 id=\"添加引用\"><a href=\"#添加引用\" class=\"headerlink\" title=\"添加引用\"></a>添加引用</h3><p>在 index 内把侧边栏代码复制到 sidebar.php 用 <code>&lt;?php get_sidebar(); ?&gt;</code> 引用</p>\n<h3 id=\"添加函数\"><a href=\"#添加函数\" class=\"headerlink\" title=\"添加函数\"></a>添加函数</h3><p>添加 function 函数：其参数根据具体情况而定。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"comment\">//注册侧边栏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( function_exists(<span class=\"string\">'register_sidebar'</span>) ) &#123;</span><br><span class=\"line\">        register_sidebar(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'首页侧边栏'</span>,</span><br><span class=\"line\">        <span class=\"string\">'id'</span>=&gt;<span class=\"string\">'sidebar-1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'before_widget'</span> =&gt; <span class=\"string\">'&lt;li&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'after_widget'</span> =&gt; <span class=\"string\">'&lt;/li&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'before_title'</span> =&gt; <span class=\"string\">'&lt;h4&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'after_title'</span> =&gt; <span class=\"string\">'&lt;/h4&gt;'</span>,</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改sidebar静态内容\"><a href=\"#修改sidebar静态内容\" class=\"headerlink\" title=\"修改sidebar静态内容\"></a>修改sidebar静态内容</h3><h5 id=\"添加循环\"><a href=\"#添加循环\" class=\"headerlink\" title=\"添加循环\"></a>添加循环</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘First_sidebar’) ) : <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>分类目录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘Second_sidebar’) ) : <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>最新文章<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"获取分类目录\"><a href=\"#获取分类目录\" class=\"headerlink\" title=\"获取分类目录\"></a>获取分类目录</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">        wp_list_categories(‘depth=<span class=\"number\">1</span>&amp;title_li=&amp;orderby=id&amp;show_count=<span class=\"number\">0</span>&amp;hide_empty=<span class=\"number\">1</span>&amp;child_of=<span class=\"number\">0</span>’);<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"获取最新文章\"><a href=\"#获取最新文章\" class=\"headerlink\" title=\"获取最新文章\"></a>获取最新文章</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\">        $posts = get_posts(‘numberposts=<span class=\"number\">6</span>&amp;orderby=post_date’);</span></span><br><span class=\"line\"><span class=\"php\">        <span class=\"keyword\">foreach</span>($posts <span class=\"keyword\">as</span> $post) &#123;</span></span><br><span class=\"line\"><span class=\"php\">            setup_postdata($post);</span></span><br><span class=\"line\"><span class=\"php\">            <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;li&gt;&lt;a href=\"'</span> . get_permalink() . <span class=\"string\">'\"&gt;&lt;i class=\"icon-folder-open-alt\"&gt;&lt;/i&gt;'</span>. get_the_title() . <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class=\"line\"><span class=\"php\">        &#125;</span></span><br><span class=\"line\"><span class=\"php\">        $post = $posts[<span class=\"number\">0</span>];<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"添加引用\"><a href=\"#添加引用\" class=\"headerlink\" title=\"添加引用\"></a>添加引用</h3><p>在 index 内把侧边栏代码复制到 sidebar.php 用 <code>&lt;?php get_sidebar(); ?&gt;</code> 引用</p>\n<h3 id=\"添加函数\"><a href=\"#添加函数\" class=\"headerlink\" title=\"添加函数\"></a>添加函数</h3><p>添加 function 函数：其参数根据具体情况而定。</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">    <span class=\"comment\">//注册侧边栏</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( function_exists(<span class=\"string\">'register_sidebar'</span>) ) &#123;</span><br><span class=\"line\">        register_sidebar(<span class=\"keyword\">array</span>(</span><br><span class=\"line\">        <span class=\"string\">'name'</span>=&gt;<span class=\"string\">'首页侧边栏'</span>,</span><br><span class=\"line\">        <span class=\"string\">'id'</span>=&gt;<span class=\"string\">'sidebar-1'</span>,</span><br><span class=\"line\">        <span class=\"string\">'before_widget'</span> =&gt; <span class=\"string\">'&lt;li&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'after_widget'</span> =&gt; <span class=\"string\">'&lt;/li&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'before_title'</span> =&gt; <span class=\"string\">'&lt;h4&gt;'</span>,</span><br><span class=\"line\">        <span class=\"string\">'after_title'</span> =&gt; <span class=\"string\">'&lt;/h4&gt;'</span>,</span><br><span class=\"line\">    ));</span><br><span class=\"line\">&#125;<span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"修改sidebar静态内容\"><a href=\"#修改sidebar静态内容\" class=\"headerlink\" title=\"修改sidebar静态内容\"></a>修改sidebar静态内容</h3><h5 id=\"添加循环\"><a href=\"#添加循环\" class=\"headerlink\" title=\"添加循环\"></a>添加循环</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘First_sidebar’) ) : <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>分类目录<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">if</span> ( !function_exists(‘dynamic_sidebar’)|| !dynamic_sidebar(‘Second_sidebar’) ) : <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>最新文章<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> <span class=\"keyword\">endif</span>; <span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"获取分类目录\"><a href=\"#获取分类目录\" class=\"headerlink\" title=\"获取分类目录\"></a>获取分类目录</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span></span></span><br><span class=\"line\"><span class=\"php\">        wp_list_categories(‘depth=<span class=\"number\">1</span>&amp;title_li=&amp;orderby=id&amp;show_count=<span class=\"number\">0</span>&amp;hide_empty=<span class=\"number\">1</span>&amp;child_of=<span class=\"number\">0</span>’);<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"获取最新文章\"><a href=\"#获取最新文章\" class=\"headerlink\" title=\"获取最新文章\"></a>获取最新文章</h5><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"php\"><span class=\"meta\">&lt;?php</span> </span></span><br><span class=\"line\"><span class=\"php\">        $posts = get_posts(‘numberposts=<span class=\"number\">6</span>&amp;orderby=post_date’);</span></span><br><span class=\"line\"><span class=\"php\">        <span class=\"keyword\">foreach</span>($posts <span class=\"keyword\">as</span> $post) &#123;</span></span><br><span class=\"line\"><span class=\"php\">            setup_postdata($post);</span></span><br><span class=\"line\"><span class=\"php\">            <span class=\"keyword\">echo</span> <span class=\"string\">'&lt;li&gt;&lt;a href=\"'</span> . get_permalink() . <span class=\"string\">'\"&gt;&lt;i class=\"icon-folder-open-alt\"&gt;&lt;/i&gt;'</span>. get_the_title() . <span class=\"string\">'&lt;/a&gt;&lt;/li&gt;'</span>;</span></span><br><span class=\"line\"><span class=\"php\">        &#125;</span></span><br><span class=\"line\"><span class=\"php\">        $post = $posts[<span class=\"number\">0</span>];<span class=\"meta\">?&gt;</span></span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"《集体编程智慧》—— 4.搜索与排名","date":"2018-06-10T14:13:08.000Z","_content":"\n以下代码完整步骤在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/4.%20Searching%20and%20Ranking\">Github</a> 上可看\n\n### 介绍\n\n《集体编程智慧》是一本介绍机器学习与计算统计的书，相当硬核，实际编程占了很大的篇幅。书里专门讲述如何挖掘和分析 Web 上的数据和资源，如何分析和获得更好的用户体验。包括协作过滤技术（实现关联产品推荐功能）、集群数据分析（在大规模数据集中发掘相似的数据子集）、搜索引擎核心技术（爬虫、索引、查询引擎、PageRank算法等）、搜索海量信息并进行分析统计得出结论的优化算法、贝叶斯过滤技术（垃圾邮件过滤、文本过滤）、用决策树技术实现预测和决策建模功能、社交网络的信息匹配技术、机器学习和人工智能应用等。\n\n本文总结的是《集体编程》第四章的内容，搜索引擎与排名。虽然是第四章，却是《集体智慧编程》系列的第一弹，之前看的零零散散，不成体系，如今打算拿出时间好好的学一学，虽然很可能又被我鸽掉，但至少这是个好的开始，不是么？\n\n### 搜索引擎的组成\n\n建立搜索引擎首要步骤是建立一个搜索文档的方法，即网页的抓取。从一小组网页开始，再根据网页内的链接逐步追踪其他的网页。\n\n搜集完文档后，对文档建立索引，表中包含文档所有不同单词的位置信息，最后通过查询返回一个经过排序的文档列表。根据不同的度量方法可以改变网页排名次序。\n\n### 爬虫程序\n\n首先是建立搜索文档，假定有一组网页链接，如何建立搜索文档？首先需要Python把网页加载下来，遍历网页内的链接内容，如此循环。然后需要将网页内容给分割成单词或词语，将单词和位置存到数据库里储存。\n\n##### requests\nrequests 是一个Python网络库，书里用的是urlib2，由于是几年前的书了，在对 HTTPS 处理有些问题，这里就不表了，用 requests 也是一样的。要解决 HTTPS 的问题，只需要修改一下代码：\n\n```python\nimport requests\nimport requests.packages.urllib3.util.ssl_\nrequests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'ALL'\n```\n\n```python\nc = requests.get('https://idmrchan.com')\nsoup = BeautifulSoup(c.text)\nlinks = soup('a')\nfor link in links:\n    if ('href' in dict(link.attrs)):\n        url = urljoin(page, link['href'])\n        if url.find(\"'\") != -1: continue\n        url = url.split('#')[0] # 去掉位置部分\n        if url[0:4] == 'http':\n            # 对获得的 url 进一步遍历\n```\n\n##### 分词\n\n首先将HTML里的文字提取出来\n\n```python\ndef gettextonly(soup):\n    v = soup.string\n    if v == None:\n        c = soup.contents\n        resulttext = ''\n        for t in c:\n            subtext = self.gettextonly(t)\n            resulttext += subtext + '\\n'\n        return resulttext\n    else:\n        return v.strip()\n```\n\n处理英文字符，中文分割用 <a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\">jieba</a>\n\n```python\n# 提取英文字符，如 vue, vue-cli, C++, don't ......\nl = re.findall(r'[\\w\\-?\\+*\\'?]+', text)\n# 去除英文字符和空格\ntext = re.sub(r'[\\w\\-?\\+*\\'?]+|\\s', '', text)\n# 用 jieba 分割中文\nseg_list = jieba.cut(text, cut_all=False, HMM=True)\nfor seg in seg_list:\n    l.append(seg)\n```\n\n\n##### 建立索引\n\n使用 sqlite3 建立数据库，SQLite 是一个嵌入式数据库，将整个数据库存入了一个文件之中，很方便。<a href=\"http://www.runoob.com/sqlite/sqlite-tutorial.html\" target=\"_blank\">菜鸟教程 SQLite</a>\n\n我们用3个表来储存，一个为 urllist，储存 url 链接，一个为 wordlist 储存单词表和，一个 wordlocation 储存链接 id，单词 id 和单词在网页的位置\n\n创建数据表\n\n```python\ncon = sqlite.connect(dbname)\ncon.execute('create table urllist(url)')\ncon.execute('create table wordlist(word)')\ncon.execute('create table wordlocation(urlid,wordid,location)')\n```\n\n添加函数，用于获取与插入条目\n\n```python\ndef getentryid(table, field, value):\n    # 查询 id\n    cur = con.execute(\n        \"select rowid from {} where {}=?\".format(table,field), (value,))\n    res = cur.fetchone()\n    # 如果不存在，则插入\n    if res == None:\n        cur = self.con.execute(\n            \"insert into {} ({}) values (?)\".format(table,field), (value,))\n        return cur.lastrowid\n    else:\n        return res[0]\n```\n\n为每个网页建立搜索引擎\n\n```python\ndef addtoindex(url, soup):\n    # soup 为去除 HTML 的文字\n    # ... 经如上步骤处理得到 words，文字库\n\n    # 得到url的id，没有则插入并返回 id\n    urlid = getentryid('urllist', 'url', url)\n\n    # 将每个单词与该url关联\n    for i in range(len(words)):\n        word = words[i]\n        wordid = getentryid('wordlist', 'word', word)\n        con.execute(\"insert into wordlocation(urlid, wordid, location) values (%d, %d, %d)\" % (urlid, wordid, i))\n```\n\n### 查询\n\n我们先建立一个简单的搜索方法，允许多次搜索，如 getmatchrows('vue webpack')\n\n```python\ncon = sqlite.connect(dbname)\ndef getmatchrows(q):\n    # 构造查询的字符串\n    fieldlist = 'w0.urlid'\n    tablelist = ''\n    clauselist = ''\n    wordids = []\n    # 根据空格拆分单词\n    words = q.split(' ')\n    tablenumber = 0\n    for word in words:\n        # 获取单词 id\n        wordrow = con.execute(\n            \"select rowid from wordlist where word='%s'\" % word).fetchone()\n\n        if wordrow != None:\n            wordid = wordrow[0]\n            wordids.append(wordid)\n            if tablenumber > 0:\n                tablelist += ','\n                clauselist += ' and '\n                clauselist += 'w%d.urlid=w%d.urlid and ' % (tablenumber-1, tablenumber)\n\n            fieldlist += ',w%d.location' % tablenumber\n            tablelist += 'wordlocation w%d' % tablenumber\n            clauselist += 'w%d.wordid=%d' % (tablenumber,wordid)\n            tablenumber += 1\n\n    # 根据各个分组，建立查询\n    fullquery = 'select %s from %s where %s' % (fieldlist, tablelist, clauselist)\n    cur = con.execute(fullquery)\n    rows = [row for row in cur]\n    return rows,wordids\n```\n\n这个程序看起来复杂，可以将 fullquery 输出出来看看，形如\n\n    select w0.urlid,w0.location,w1.location from wordlocation w0,wordlocation w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\n    select x from wordlocation w0, wordlocation w1 \n\n将wordlocation进行两次对比\n\n    select x from w0,w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\n419 是 vue 单词的位置，1295 是 webpack 单词的位置，需要匹配同一个 urlid，即同时出现了 vue 和 webpack 的网页id\n\n    select w0.urlid,w0.location,w1.location\n\n输出 urlid | vue 单词位置 | webpack 单词位置\n\n##### 排名\n以上输出的结果只是根据检索时的顺序，而我们需要根据相关性来对检索结果进行排名，包括以下三种方法。\n\n1. 单词频度\n根据位于查询条件中的单词在文档中出现的次数\n2. 文档位置\n文档主题有可能会靠近文档的开始处。实际上搜索引擎会根据网页结构来判断权重，比如 `<h1>` 权重就比 `<p>` 来的大\n3. 单词距离\n如果查询条件中有多个单词，则它们在文档中出现的位置应该靠的很近\n4. 利用外部回指链接\n外部回指链接是指在其他网页指向该网页的数目\n\n##### PageRank\nPageRank 算法 是 Google 发明的，其理论为，设指向 A 链接的有 B C D 三个链接，B C D 的 PageRank 值分别为 PR(B) PR(C) PR(D)，B C D 三个网页的链接分别有 link(B) link(C) link(D)，则 A 的 PageRank 是多少：\n\n>PR(A) = 0.15 + 0.85 * (PR(B)/link(B) + PR(C)/link(C) + PR(D)/link(D))\n\n0.15 为最小值，0.85 为阻尼系数，用以指示用户持续点击每个链接的概率\n\n此时有个问题，B C D 的 PageRank 怎么算出来的？\n\n解决这一问题的方法是将所有 PageRank 设置为 1，然后反复计算，迭代若干次后 PageRank 值就会接近于真实值。\n\n代码就不放出来了，可自行在 Github 上查看\n\n### 从点击行为中学习\n\n根据用户点击抉择来训练模型\n\n##### 设计思路\n\n模型需要用到神经网络，以一组节点（神经元）构成，彼此之间相连接，被称为多层感知机（multilayer perceptron, MLP）网络。其第一层神经元接收输入，本例中指用户输入的单词，最后一层输出结果，本例中即返回不同 URL 的权重。\n\n##### 设计数据库\n\n数据库分为3层，一层为中间的隐藏层，`hiddennode(create_key)`，输入层为单词与隐藏层之间的连接状态表 `wordhidden(fromid,toid,strength)`，输出层为隐藏层与输出链接之间的关系表 `hiddenurl(fromid,toid,strength)`\n\n##### 训练实验\n\n接下来我们模拟用户输入与选择 url，算法根据输入的值更新权重，其中用到了 tanh 函数与反向传播法，具体算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/blob/master/4.%20Searching%20and%20Ranking/nn.py\" target=\"_blank\">nn.py</a>，这里就不赘述。\n\n---\n\n总之，本章讲了如何使用 SQLite 建立数据库储存信息，爬取网页链接，建立词库。进行多词搜索，并且使用单词频度，相关性，用户点击抉择等来对链接进行排名。\n","source":"_posts/searching-and-ranking.md","raw":"---\nlayout:     post\ntitle:      \"《集体编程智慧》—— 4.搜索与排名\"\ndate:       2018-06-10 22:13:08\ntags:\n    - Python\n    - 机器学习\n---\n\n以下代码完整步骤在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/4.%20Searching%20and%20Ranking\">Github</a> 上可看\n\n### 介绍\n\n《集体编程智慧》是一本介绍机器学习与计算统计的书，相当硬核，实际编程占了很大的篇幅。书里专门讲述如何挖掘和分析 Web 上的数据和资源，如何分析和获得更好的用户体验。包括协作过滤技术（实现关联产品推荐功能）、集群数据分析（在大规模数据集中发掘相似的数据子集）、搜索引擎核心技术（爬虫、索引、查询引擎、PageRank算法等）、搜索海量信息并进行分析统计得出结论的优化算法、贝叶斯过滤技术（垃圾邮件过滤、文本过滤）、用决策树技术实现预测和决策建模功能、社交网络的信息匹配技术、机器学习和人工智能应用等。\n\n本文总结的是《集体编程》第四章的内容，搜索引擎与排名。虽然是第四章，却是《集体智慧编程》系列的第一弹，之前看的零零散散，不成体系，如今打算拿出时间好好的学一学，虽然很可能又被我鸽掉，但至少这是个好的开始，不是么？\n\n### 搜索引擎的组成\n\n建立搜索引擎首要步骤是建立一个搜索文档的方法，即网页的抓取。从一小组网页开始，再根据网页内的链接逐步追踪其他的网页。\n\n搜集完文档后，对文档建立索引，表中包含文档所有不同单词的位置信息，最后通过查询返回一个经过排序的文档列表。根据不同的度量方法可以改变网页排名次序。\n\n### 爬虫程序\n\n首先是建立搜索文档，假定有一组网页链接，如何建立搜索文档？首先需要Python把网页加载下来，遍历网页内的链接内容，如此循环。然后需要将网页内容给分割成单词或词语，将单词和位置存到数据库里储存。\n\n##### requests\nrequests 是一个Python网络库，书里用的是urlib2，由于是几年前的书了，在对 HTTPS 处理有些问题，这里就不表了，用 requests 也是一样的。要解决 HTTPS 的问题，只需要修改一下代码：\n\n```python\nimport requests\nimport requests.packages.urllib3.util.ssl_\nrequests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = 'ALL'\n```\n\n```python\nc = requests.get('https://idmrchan.com')\nsoup = BeautifulSoup(c.text)\nlinks = soup('a')\nfor link in links:\n    if ('href' in dict(link.attrs)):\n        url = urljoin(page, link['href'])\n        if url.find(\"'\") != -1: continue\n        url = url.split('#')[0] # 去掉位置部分\n        if url[0:4] == 'http':\n            # 对获得的 url 进一步遍历\n```\n\n##### 分词\n\n首先将HTML里的文字提取出来\n\n```python\ndef gettextonly(soup):\n    v = soup.string\n    if v == None:\n        c = soup.contents\n        resulttext = ''\n        for t in c:\n            subtext = self.gettextonly(t)\n            resulttext += subtext + '\\n'\n        return resulttext\n    else:\n        return v.strip()\n```\n\n处理英文字符，中文分割用 <a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\">jieba</a>\n\n```python\n# 提取英文字符，如 vue, vue-cli, C++, don't ......\nl = re.findall(r'[\\w\\-?\\+*\\'?]+', text)\n# 去除英文字符和空格\ntext = re.sub(r'[\\w\\-?\\+*\\'?]+|\\s', '', text)\n# 用 jieba 分割中文\nseg_list = jieba.cut(text, cut_all=False, HMM=True)\nfor seg in seg_list:\n    l.append(seg)\n```\n\n\n##### 建立索引\n\n使用 sqlite3 建立数据库，SQLite 是一个嵌入式数据库，将整个数据库存入了一个文件之中，很方便。<a href=\"http://www.runoob.com/sqlite/sqlite-tutorial.html\" target=\"_blank\">菜鸟教程 SQLite</a>\n\n我们用3个表来储存，一个为 urllist，储存 url 链接，一个为 wordlist 储存单词表和，一个 wordlocation 储存链接 id，单词 id 和单词在网页的位置\n\n创建数据表\n\n```python\ncon = sqlite.connect(dbname)\ncon.execute('create table urllist(url)')\ncon.execute('create table wordlist(word)')\ncon.execute('create table wordlocation(urlid,wordid,location)')\n```\n\n添加函数，用于获取与插入条目\n\n```python\ndef getentryid(table, field, value):\n    # 查询 id\n    cur = con.execute(\n        \"select rowid from {} where {}=?\".format(table,field), (value,))\n    res = cur.fetchone()\n    # 如果不存在，则插入\n    if res == None:\n        cur = self.con.execute(\n            \"insert into {} ({}) values (?)\".format(table,field), (value,))\n        return cur.lastrowid\n    else:\n        return res[0]\n```\n\n为每个网页建立搜索引擎\n\n```python\ndef addtoindex(url, soup):\n    # soup 为去除 HTML 的文字\n    # ... 经如上步骤处理得到 words，文字库\n\n    # 得到url的id，没有则插入并返回 id\n    urlid = getentryid('urllist', 'url', url)\n\n    # 将每个单词与该url关联\n    for i in range(len(words)):\n        word = words[i]\n        wordid = getentryid('wordlist', 'word', word)\n        con.execute(\"insert into wordlocation(urlid, wordid, location) values (%d, %d, %d)\" % (urlid, wordid, i))\n```\n\n### 查询\n\n我们先建立一个简单的搜索方法，允许多次搜索，如 getmatchrows('vue webpack')\n\n```python\ncon = sqlite.connect(dbname)\ndef getmatchrows(q):\n    # 构造查询的字符串\n    fieldlist = 'w0.urlid'\n    tablelist = ''\n    clauselist = ''\n    wordids = []\n    # 根据空格拆分单词\n    words = q.split(' ')\n    tablenumber = 0\n    for word in words:\n        # 获取单词 id\n        wordrow = con.execute(\n            \"select rowid from wordlist where word='%s'\" % word).fetchone()\n\n        if wordrow != None:\n            wordid = wordrow[0]\n            wordids.append(wordid)\n            if tablenumber > 0:\n                tablelist += ','\n                clauselist += ' and '\n                clauselist += 'w%d.urlid=w%d.urlid and ' % (tablenumber-1, tablenumber)\n\n            fieldlist += ',w%d.location' % tablenumber\n            tablelist += 'wordlocation w%d' % tablenumber\n            clauselist += 'w%d.wordid=%d' % (tablenumber,wordid)\n            tablenumber += 1\n\n    # 根据各个分组，建立查询\n    fullquery = 'select %s from %s where %s' % (fieldlist, tablelist, clauselist)\n    cur = con.execute(fullquery)\n    rows = [row for row in cur]\n    return rows,wordids\n```\n\n这个程序看起来复杂，可以将 fullquery 输出出来看看，形如\n\n    select w0.urlid,w0.location,w1.location from wordlocation w0,wordlocation w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\n    select x from wordlocation w0, wordlocation w1 \n\n将wordlocation进行两次对比\n\n    select x from w0,w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\n419 是 vue 单词的位置，1295 是 webpack 单词的位置，需要匹配同一个 urlid，即同时出现了 vue 和 webpack 的网页id\n\n    select w0.urlid,w0.location,w1.location\n\n输出 urlid | vue 单词位置 | webpack 单词位置\n\n##### 排名\n以上输出的结果只是根据检索时的顺序，而我们需要根据相关性来对检索结果进行排名，包括以下三种方法。\n\n1. 单词频度\n根据位于查询条件中的单词在文档中出现的次数\n2. 文档位置\n文档主题有可能会靠近文档的开始处。实际上搜索引擎会根据网页结构来判断权重，比如 `<h1>` 权重就比 `<p>` 来的大\n3. 单词距离\n如果查询条件中有多个单词，则它们在文档中出现的位置应该靠的很近\n4. 利用外部回指链接\n外部回指链接是指在其他网页指向该网页的数目\n\n##### PageRank\nPageRank 算法 是 Google 发明的，其理论为，设指向 A 链接的有 B C D 三个链接，B C D 的 PageRank 值分别为 PR(B) PR(C) PR(D)，B C D 三个网页的链接分别有 link(B) link(C) link(D)，则 A 的 PageRank 是多少：\n\n>PR(A) = 0.15 + 0.85 * (PR(B)/link(B) + PR(C)/link(C) + PR(D)/link(D))\n\n0.15 为最小值，0.85 为阻尼系数，用以指示用户持续点击每个链接的概率\n\n此时有个问题，B C D 的 PageRank 怎么算出来的？\n\n解决这一问题的方法是将所有 PageRank 设置为 1，然后反复计算，迭代若干次后 PageRank 值就会接近于真实值。\n\n代码就不放出来了，可自行在 Github 上查看\n\n### 从点击行为中学习\n\n根据用户点击抉择来训练模型\n\n##### 设计思路\n\n模型需要用到神经网络，以一组节点（神经元）构成，彼此之间相连接，被称为多层感知机（multilayer perceptron, MLP）网络。其第一层神经元接收输入，本例中指用户输入的单词，最后一层输出结果，本例中即返回不同 URL 的权重。\n\n##### 设计数据库\n\n数据库分为3层，一层为中间的隐藏层，`hiddennode(create_key)`，输入层为单词与隐藏层之间的连接状态表 `wordhidden(fromid,toid,strength)`，输出层为隐藏层与输出链接之间的关系表 `hiddenurl(fromid,toid,strength)`\n\n##### 训练实验\n\n接下来我们模拟用户输入与选择 url，算法根据输入的值更新权重，其中用到了 tanh 函数与反向传播法，具体算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/blob/master/4.%20Searching%20and%20Ranking/nn.py\" target=\"_blank\">nn.py</a>，这里就不赘述。\n\n---\n\n总之，本章讲了如何使用 SQLite 建立数据库储存信息，爬取网页链接，建立词库。进行多词搜索，并且使用单词频度，相关性，用户点击抉择等来对链接进行排名。\n","slug":"searching-and-ranking","published":1,"updated":"2018-06-14T10:02:20.205Z","comments":1,"photos":[],"link":"","_id":"cjv7qf430004p2mhs2enipgsq","content":"<p>以下代码完整步骤在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/4.%20Searching%20and%20Ranking\" target=\"_blank\" rel=\"noopener\">Github</a> 上可看</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>《集体编程智慧》是一本介绍机器学习与计算统计的书，相当硬核，实际编程占了很大的篇幅。书里专门讲述如何挖掘和分析 Web 上的数据和资源，如何分析和获得更好的用户体验。包括协作过滤技术（实现关联产品推荐功能）、集群数据分析（在大规模数据集中发掘相似的数据子集）、搜索引擎核心技术（爬虫、索引、查询引擎、PageRank算法等）、搜索海量信息并进行分析统计得出结论的优化算法、贝叶斯过滤技术（垃圾邮件过滤、文本过滤）、用决策树技术实现预测和决策建模功能、社交网络的信息匹配技术、机器学习和人工智能应用等。</p>\n<p>本文总结的是《集体编程》第四章的内容，搜索引擎与排名。虽然是第四章，却是《集体智慧编程》系列的第一弹，之前看的零零散散，不成体系，如今打算拿出时间好好的学一学，虽然很可能又被我鸽掉，但至少这是个好的开始，不是么？</p>\n<h3 id=\"搜索引擎的组成\"><a href=\"#搜索引擎的组成\" class=\"headerlink\" title=\"搜索引擎的组成\"></a>搜索引擎的组成</h3><p>建立搜索引擎首要步骤是建立一个搜索文档的方法，即网页的抓取。从一小组网页开始，再根据网页内的链接逐步追踪其他的网页。</p>\n<p>搜集完文档后，对文档建立索引，表中包含文档所有不同单词的位置信息，最后通过查询返回一个经过排序的文档列表。根据不同的度量方法可以改变网页排名次序。</p>\n<h3 id=\"爬虫程序\"><a href=\"#爬虫程序\" class=\"headerlink\" title=\"爬虫程序\"></a>爬虫程序</h3><p>首先是建立搜索文档，假定有一组网页链接，如何建立搜索文档？首先需要Python把网页加载下来，遍历网页内的链接内容，如此循环。然后需要将网页内容给分割成单词或词语，将单词和位置存到数据库里储存。</p>\n<h5 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h5><p>requests 是一个Python网络库，书里用的是urlib2，由于是几年前的书了，在对 HTTPS 处理有些问题，这里就不表了，用 requests 也是一样的。要解决 HTTPS 的问题，只需要修改一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests.packages.urllib3.util.ssl_</span><br><span class=\"line\">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = <span class=\"string\">'ALL'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = requests.get(<span class=\"string\">'https://idmrchan.com'</span>)</span><br><span class=\"line\">soup = BeautifulSoup(c.text)</span><br><span class=\"line\">links = soup(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> links:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'href'</span> <span class=\"keyword\">in</span> dict(link.attrs)):</span><br><span class=\"line\">        url = urljoin(page, link[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> url.find(<span class=\"string\">\"'\"</span>) != <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        url = url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>] <span class=\"comment\"># 去掉位置部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> url[<span class=\"number\">0</span>:<span class=\"number\">4</span>] == <span class=\"string\">'http'</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对获得的 url 进一步遍历</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h5><p>首先将HTML里的文字提取出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gettextonly</span><span class=\"params\">(soup)</span>:</span></span><br><span class=\"line\">    v = soup.string</span><br><span class=\"line\">    <span class=\"keyword\">if</span> v == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        c = soup.contents</span><br><span class=\"line\">        resulttext = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> c:</span><br><span class=\"line\">            subtext = self.gettextonly(t)</span><br><span class=\"line\">            resulttext += subtext + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> resulttext</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.strip()</span><br></pre></td></tr></table></figure>\n<p>处理英文字符，中文分割用 <a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\">jieba</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取英文字符，如 vue, vue-cli, C++, don't ......</span></span><br><span class=\"line\">l = re.findall(<span class=\"string\">r'[\\w\\-?\\+*\\'?]+'</span>, text)</span><br><span class=\"line\"><span class=\"comment\"># 去除英文字符和空格</span></span><br><span class=\"line\">text = re.sub(<span class=\"string\">r'[\\w\\-?\\+*\\'?]+|\\s'</span>, <span class=\"string\">''</span>, text)</span><br><span class=\"line\"><span class=\"comment\"># 用 jieba 分割中文</span></span><br><span class=\"line\">seg_list = jieba.cut(text, cut_all=<span class=\"keyword\">False</span>, HMM=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> seg <span class=\"keyword\">in</span> seg_list:</span><br><span class=\"line\">    l.append(seg)</span><br></pre></td></tr></table></figure>\n<h5 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h5><p>使用 sqlite3 建立数据库，SQLite 是一个嵌入式数据库，将整个数据库存入了一个文件之中，很方便。<a href=\"http://www.runoob.com/sqlite/sqlite-tutorial.html\" target=\"_blank\">菜鸟教程 SQLite</a></p>\n<p>我们用3个表来储存，一个为 urllist，储存 url 链接，一个为 wordlist 储存单词表和，一个 wordlocation 储存链接 id，单词 id 和单词在网页的位置</p>\n<p>创建数据表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con = sqlite.connect(dbname)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table urllist(url)'</span>)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table wordlist(word)'</span>)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table wordlocation(urlid,wordid,location)'</span>)</span><br></pre></td></tr></table></figure>\n<p>添加函数，用于获取与插入条目</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getentryid</span><span class=\"params\">(table, field, value)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 查询 id</span></span><br><span class=\"line\">    cur = con.execute(</span><br><span class=\"line\">        <span class=\"string\">\"select rowid from &#123;&#125; where &#123;&#125;=?\"</span>.format(table,field), (value,))</span><br><span class=\"line\">    res = cur.fetchone()</span><br><span class=\"line\">    <span class=\"comment\"># 如果不存在，则插入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> res == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        cur = self.con.execute(</span><br><span class=\"line\">            <span class=\"string\">\"insert into &#123;&#125; (&#123;&#125;) values (?)\"</span>.format(table,field), (value,))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.lastrowid</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>为每个网页建立搜索引擎</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addtoindex</span><span class=\"params\">(url, soup)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># soup 为去除 HTML 的文字</span></span><br><span class=\"line\">    <span class=\"comment\"># ... 经如上步骤处理得到 words，文字库</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 得到url的id，没有则插入并返回 id</span></span><br><span class=\"line\">    urlid = getentryid(<span class=\"string\">'urllist'</span>, <span class=\"string\">'url'</span>, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将每个单词与该url关联</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">        word = words[i]</span><br><span class=\"line\">        wordid = getentryid(<span class=\"string\">'wordlist'</span>, <span class=\"string\">'word'</span>, word)</span><br><span class=\"line\">        con.execute(<span class=\"string\">\"insert into wordlocation(urlid, wordid, location) values (%d, %d, %d)\"</span> % (urlid, wordid, i))</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>我们先建立一个简单的搜索方法，允许多次搜索，如 getmatchrows(‘vue webpack’)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con = sqlite.connect(dbname)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getmatchrows</span><span class=\"params\">(q)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 构造查询的字符串</span></span><br><span class=\"line\">    fieldlist = <span class=\"string\">'w0.urlid'</span></span><br><span class=\"line\">    tablelist = <span class=\"string\">''</span></span><br><span class=\"line\">    clauselist = <span class=\"string\">''</span></span><br><span class=\"line\">    wordids = []</span><br><span class=\"line\">    <span class=\"comment\"># 根据空格拆分单词</span></span><br><span class=\"line\">    words = q.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">    tablenumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">        <span class=\"comment\"># 获取单词 id</span></span><br><span class=\"line\">        wordrow = con.execute(</span><br><span class=\"line\">            <span class=\"string\">\"select rowid from wordlist where word='%s'\"</span> % word).fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> wordrow != <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            wordid = wordrow[<span class=\"number\">0</span>]</span><br><span class=\"line\">            wordids.append(wordid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tablenumber &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                tablelist += <span class=\"string\">','</span></span><br><span class=\"line\">                clauselist += <span class=\"string\">' and '</span></span><br><span class=\"line\">                clauselist += <span class=\"string\">'w%d.urlid=w%d.urlid and '</span> % (tablenumber<span class=\"number\">-1</span>, tablenumber)</span><br><span class=\"line\"></span><br><span class=\"line\">            fieldlist += <span class=\"string\">',w%d.location'</span> % tablenumber</span><br><span class=\"line\">            tablelist += <span class=\"string\">'wordlocation w%d'</span> % tablenumber</span><br><span class=\"line\">            clauselist += <span class=\"string\">'w%d.wordid=%d'</span> % (tablenumber,wordid)</span><br><span class=\"line\">            tablenumber += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据各个分组，建立查询</span></span><br><span class=\"line\">    fullquery = <span class=\"string\">'select %s from %s where %s'</span> % (fieldlist, tablelist, clauselist)</span><br><span class=\"line\">    cur = con.execute(fullquery)</span><br><span class=\"line\">    rows = [row <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rows,wordids</span><br></pre></td></tr></table></figure>\n<p>这个程序看起来复杂，可以将 fullquery 输出出来看看，形如</p>\n<pre><code>select w0.urlid,w0.location,w1.location from wordlocation w0,wordlocation w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\nselect x from wordlocation w0, wordlocation w1 \n</code></pre><p>将wordlocation进行两次对比</p>\n<pre><code>select x from w0,w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n</code></pre><p>419 是 vue 单词的位置，1295 是 webpack 单词的位置，需要匹配同一个 urlid，即同时出现了 vue 和 webpack 的网页id</p>\n<pre><code>select w0.urlid,w0.location,w1.location\n</code></pre><p>输出 urlid | vue 单词位置 | webpack 单词位置</p>\n<h5 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h5><p>以上输出的结果只是根据检索时的顺序，而我们需要根据相关性来对检索结果进行排名，包括以下三种方法。</p>\n<ol>\n<li>单词频度<br>根据位于查询条件中的单词在文档中出现的次数</li>\n<li>文档位置<br>文档主题有可能会靠近文档的开始处。实际上搜索引擎会根据网页结构来判断权重，比如 <code>&lt;h1&gt;</code> 权重就比 <code>&lt;p&gt;</code> 来的大</li>\n<li>单词距离<br>如果查询条件中有多个单词，则它们在文档中出现的位置应该靠的很近</li>\n<li>利用外部回指链接<br>外部回指链接是指在其他网页指向该网页的数目</li>\n</ol>\n<h5 id=\"PageRank\"><a href=\"#PageRank\" class=\"headerlink\" title=\"PageRank\"></a>PageRank</h5><p>PageRank 算法 是 Google 发明的，其理论为，设指向 A 链接的有 B C D 三个链接，B C D 的 PageRank 值分别为 PR(B) PR(C) PR(D)，B C D 三个网页的链接分别有 link(B) link(C) link(D)，则 A 的 PageRank 是多少：</p>\n<blockquote>\n<p>PR(A) = 0.15 + 0.85 * (PR(B)/link(B) + PR(C)/link(C) + PR(D)/link(D))</p>\n</blockquote>\n<p>0.15 为最小值，0.85 为阻尼系数，用以指示用户持续点击每个链接的概率</p>\n<p>此时有个问题，B C D 的 PageRank 怎么算出来的？</p>\n<p>解决这一问题的方法是将所有 PageRank 设置为 1，然后反复计算，迭代若干次后 PageRank 值就会接近于真实值。</p>\n<p>代码就不放出来了，可自行在 Github 上查看</p>\n<h3 id=\"从点击行为中学习\"><a href=\"#从点击行为中学习\" class=\"headerlink\" title=\"从点击行为中学习\"></a>从点击行为中学习</h3><p>根据用户点击抉择来训练模型</p>\n<h5 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h5><p>模型需要用到神经网络，以一组节点（神经元）构成，彼此之间相连接，被称为多层感知机（multilayer perceptron, MLP）网络。其第一层神经元接收输入，本例中指用户输入的单词，最后一层输出结果，本例中即返回不同 URL 的权重。</p>\n<h5 id=\"设计数据库\"><a href=\"#设计数据库\" class=\"headerlink\" title=\"设计数据库\"></a>设计数据库</h5><p>数据库分为3层，一层为中间的隐藏层，<code>hiddennode(create_key)</code>，输入层为单词与隐藏层之间的连接状态表 <code>wordhidden(fromid,toid,strength)</code>，输出层为隐藏层与输出链接之间的关系表 <code>hiddenurl(fromid,toid,strength)</code></p>\n<h5 id=\"训练实验\"><a href=\"#训练实验\" class=\"headerlink\" title=\"训练实验\"></a>训练实验</h5><p>接下来我们模拟用户输入与选择 url，算法根据输入的值更新权重，其中用到了 tanh 函数与反向传播法，具体算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/blob/master/4.%20Searching%20and%20Ranking/nn.py\" target=\"_blank\">nn.py</a>，这里就不赘述。</p>\n<hr>\n<p>总之，本章讲了如何使用 SQLite 建立数据库储存信息，爬取网页链接，建立词库。进行多词搜索，并且使用单词频度，相关性，用户点击抉择等来对链接进行排名。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以下代码完整步骤在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/tree/master/4.%20Searching%20and%20Ranking\" target=\"_blank\" rel=\"noopener\">Github</a> 上可看</p>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>《集体编程智慧》是一本介绍机器学习与计算统计的书，相当硬核，实际编程占了很大的篇幅。书里专门讲述如何挖掘和分析 Web 上的数据和资源，如何分析和获得更好的用户体验。包括协作过滤技术（实现关联产品推荐功能）、集群数据分析（在大规模数据集中发掘相似的数据子集）、搜索引擎核心技术（爬虫、索引、查询引擎、PageRank算法等）、搜索海量信息并进行分析统计得出结论的优化算法、贝叶斯过滤技术（垃圾邮件过滤、文本过滤）、用决策树技术实现预测和决策建模功能、社交网络的信息匹配技术、机器学习和人工智能应用等。</p>\n<p>本文总结的是《集体编程》第四章的内容，搜索引擎与排名。虽然是第四章，却是《集体智慧编程》系列的第一弹，之前看的零零散散，不成体系，如今打算拿出时间好好的学一学，虽然很可能又被我鸽掉，但至少这是个好的开始，不是么？</p>\n<h3 id=\"搜索引擎的组成\"><a href=\"#搜索引擎的组成\" class=\"headerlink\" title=\"搜索引擎的组成\"></a>搜索引擎的组成</h3><p>建立搜索引擎首要步骤是建立一个搜索文档的方法，即网页的抓取。从一小组网页开始，再根据网页内的链接逐步追踪其他的网页。</p>\n<p>搜集完文档后，对文档建立索引，表中包含文档所有不同单词的位置信息，最后通过查询返回一个经过排序的文档列表。根据不同的度量方法可以改变网页排名次序。</p>\n<h3 id=\"爬虫程序\"><a href=\"#爬虫程序\" class=\"headerlink\" title=\"爬虫程序\"></a>爬虫程序</h3><p>首先是建立搜索文档，假定有一组网页链接，如何建立搜索文档？首先需要Python把网页加载下来，遍历网页内的链接内容，如此循环。然后需要将网页内容给分割成单词或词语，将单词和位置存到数据库里储存。</p>\n<h5 id=\"requests\"><a href=\"#requests\" class=\"headerlink\" title=\"requests\"></a>requests</h5><p>requests 是一个Python网络库，书里用的是urlib2，由于是几年前的书了，在对 HTTPS 处理有些问题，这里就不表了，用 requests 也是一样的。要解决 HTTPS 的问题，只需要修改一下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests.packages.urllib3.util.ssl_</span><br><span class=\"line\">requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS = <span class=\"string\">'ALL'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = requests.get(<span class=\"string\">'https://idmrchan.com'</span>)</span><br><span class=\"line\">soup = BeautifulSoup(c.text)</span><br><span class=\"line\">links = soup(<span class=\"string\">'a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> link <span class=\"keyword\">in</span> links:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"string\">'href'</span> <span class=\"keyword\">in</span> dict(link.attrs)):</span><br><span class=\"line\">        url = urljoin(page, link[<span class=\"string\">'href'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> url.find(<span class=\"string\">\"'\"</span>) != <span class=\"number\">-1</span>: <span class=\"keyword\">continue</span></span><br><span class=\"line\">        url = url.split(<span class=\"string\">'#'</span>)[<span class=\"number\">0</span>] <span class=\"comment\"># 去掉位置部分</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> url[<span class=\"number\">0</span>:<span class=\"number\">4</span>] == <span class=\"string\">'http'</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 对获得的 url 进一步遍历</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"分词\"><a href=\"#分词\" class=\"headerlink\" title=\"分词\"></a>分词</h5><p>首先将HTML里的文字提取出来</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gettextonly</span><span class=\"params\">(soup)</span>:</span></span><br><span class=\"line\">    v = soup.string</span><br><span class=\"line\">    <span class=\"keyword\">if</span> v == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        c = soup.contents</span><br><span class=\"line\">        resulttext = <span class=\"string\">''</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> c:</span><br><span class=\"line\">            subtext = self.gettextonly(t)</span><br><span class=\"line\">            resulttext += subtext + <span class=\"string\">'\\n'</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> resulttext</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> v.strip()</span><br></pre></td></tr></table></figure>\n<p>处理英文字符，中文分割用 <a href=\"https://github.com/fxsjy/jieba\" target=\"_blank\">jieba</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 提取英文字符，如 vue, vue-cli, C++, don't ......</span></span><br><span class=\"line\">l = re.findall(<span class=\"string\">r'[\\w\\-?\\+*\\'?]+'</span>, text)</span><br><span class=\"line\"><span class=\"comment\"># 去除英文字符和空格</span></span><br><span class=\"line\">text = re.sub(<span class=\"string\">r'[\\w\\-?\\+*\\'?]+|\\s'</span>, <span class=\"string\">''</span>, text)</span><br><span class=\"line\"><span class=\"comment\"># 用 jieba 分割中文</span></span><br><span class=\"line\">seg_list = jieba.cut(text, cut_all=<span class=\"keyword\">False</span>, HMM=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> seg <span class=\"keyword\">in</span> seg_list:</span><br><span class=\"line\">    l.append(seg)</span><br></pre></td></tr></table></figure>\n<h5 id=\"建立索引\"><a href=\"#建立索引\" class=\"headerlink\" title=\"建立索引\"></a>建立索引</h5><p>使用 sqlite3 建立数据库，SQLite 是一个嵌入式数据库，将整个数据库存入了一个文件之中，很方便。<a href=\"http://www.runoob.com/sqlite/sqlite-tutorial.html\" target=\"_blank\">菜鸟教程 SQLite</a></p>\n<p>我们用3个表来储存，一个为 urllist，储存 url 链接，一个为 wordlist 储存单词表和，一个 wordlocation 储存链接 id，单词 id 和单词在网页的位置</p>\n<p>创建数据表</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con = sqlite.connect(dbname)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table urllist(url)'</span>)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table wordlist(word)'</span>)</span><br><span class=\"line\">con.execute(<span class=\"string\">'create table wordlocation(urlid,wordid,location)'</span>)</span><br></pre></td></tr></table></figure>\n<p>添加函数，用于获取与插入条目</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getentryid</span><span class=\"params\">(table, field, value)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 查询 id</span></span><br><span class=\"line\">    cur = con.execute(</span><br><span class=\"line\">        <span class=\"string\">\"select rowid from &#123;&#125; where &#123;&#125;=?\"</span>.format(table,field), (value,))</span><br><span class=\"line\">    res = cur.fetchone()</span><br><span class=\"line\">    <span class=\"comment\"># 如果不存在，则插入</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> res == <span class=\"keyword\">None</span>:</span><br><span class=\"line\">        cur = self.con.execute(</span><br><span class=\"line\">            <span class=\"string\">\"insert into &#123;&#125; (&#123;&#125;) values (?)\"</span>.format(table,field), (value,))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur.lastrowid</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>为每个网页建立搜索引擎</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addtoindex</span><span class=\"params\">(url, soup)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># soup 为去除 HTML 的文字</span></span><br><span class=\"line\">    <span class=\"comment\"># ... 经如上步骤处理得到 words，文字库</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 得到url的id，没有则插入并返回 id</span></span><br><span class=\"line\">    urlid = getentryid(<span class=\"string\">'urllist'</span>, <span class=\"string\">'url'</span>, url)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将每个单词与该url关联</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(len(words)):</span><br><span class=\"line\">        word = words[i]</span><br><span class=\"line\">        wordid = getentryid(<span class=\"string\">'wordlist'</span>, <span class=\"string\">'word'</span>, word)</span><br><span class=\"line\">        con.execute(<span class=\"string\">\"insert into wordlocation(urlid, wordid, location) values (%d, %d, %d)\"</span> % (urlid, wordid, i))</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h3><p>我们先建立一个简单的搜索方法，允许多次搜索，如 getmatchrows(‘vue webpack’)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">con = sqlite.connect(dbname)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">getmatchrows</span><span class=\"params\">(q)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 构造查询的字符串</span></span><br><span class=\"line\">    fieldlist = <span class=\"string\">'w0.urlid'</span></span><br><span class=\"line\">    tablelist = <span class=\"string\">''</span></span><br><span class=\"line\">    clauselist = <span class=\"string\">''</span></span><br><span class=\"line\">    wordids = []</span><br><span class=\"line\">    <span class=\"comment\"># 根据空格拆分单词</span></span><br><span class=\"line\">    words = q.split(<span class=\"string\">' '</span>)</span><br><span class=\"line\">    tablenumber = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> word <span class=\"keyword\">in</span> words:</span><br><span class=\"line\">        <span class=\"comment\"># 获取单词 id</span></span><br><span class=\"line\">        wordrow = con.execute(</span><br><span class=\"line\">            <span class=\"string\">\"select rowid from wordlist where word='%s'\"</span> % word).fetchone()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> wordrow != <span class=\"keyword\">None</span>:</span><br><span class=\"line\">            wordid = wordrow[<span class=\"number\">0</span>]</span><br><span class=\"line\">            wordids.append(wordid)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> tablenumber &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                tablelist += <span class=\"string\">','</span></span><br><span class=\"line\">                clauselist += <span class=\"string\">' and '</span></span><br><span class=\"line\">                clauselist += <span class=\"string\">'w%d.urlid=w%d.urlid and '</span> % (tablenumber<span class=\"number\">-1</span>, tablenumber)</span><br><span class=\"line\"></span><br><span class=\"line\">            fieldlist += <span class=\"string\">',w%d.location'</span> % tablenumber</span><br><span class=\"line\">            tablelist += <span class=\"string\">'wordlocation w%d'</span> % tablenumber</span><br><span class=\"line\">            clauselist += <span class=\"string\">'w%d.wordid=%d'</span> % (tablenumber,wordid)</span><br><span class=\"line\">            tablenumber += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 根据各个分组，建立查询</span></span><br><span class=\"line\">    fullquery = <span class=\"string\">'select %s from %s where %s'</span> % (fieldlist, tablelist, clauselist)</span><br><span class=\"line\">    cur = con.execute(fullquery)</span><br><span class=\"line\">    rows = [row <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> cur]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> rows,wordids</span><br></pre></td></tr></table></figure>\n<p>这个程序看起来复杂，可以将 fullquery 输出出来看看，形如</p>\n<pre><code>select w0.urlid,w0.location,w1.location from wordlocation w0,wordlocation w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n\nselect x from wordlocation w0, wordlocation w1 \n</code></pre><p>将wordlocation进行两次对比</p>\n<pre><code>select x from w0,w1 where w0.wordid=413 and w0.urlid=w1.urlid and w1.wordid=1295\n</code></pre><p>419 是 vue 单词的位置，1295 是 webpack 单词的位置，需要匹配同一个 urlid，即同时出现了 vue 和 webpack 的网页id</p>\n<pre><code>select w0.urlid,w0.location,w1.location\n</code></pre><p>输出 urlid | vue 单词位置 | webpack 单词位置</p>\n<h5 id=\"排名\"><a href=\"#排名\" class=\"headerlink\" title=\"排名\"></a>排名</h5><p>以上输出的结果只是根据检索时的顺序，而我们需要根据相关性来对检索结果进行排名，包括以下三种方法。</p>\n<ol>\n<li>单词频度<br>根据位于查询条件中的单词在文档中出现的次数</li>\n<li>文档位置<br>文档主题有可能会靠近文档的开始处。实际上搜索引擎会根据网页结构来判断权重，比如 <code>&lt;h1&gt;</code> 权重就比 <code>&lt;p&gt;</code> 来的大</li>\n<li>单词距离<br>如果查询条件中有多个单词，则它们在文档中出现的位置应该靠的很近</li>\n<li>利用外部回指链接<br>外部回指链接是指在其他网页指向该网页的数目</li>\n</ol>\n<h5 id=\"PageRank\"><a href=\"#PageRank\" class=\"headerlink\" title=\"PageRank\"></a>PageRank</h5><p>PageRank 算法 是 Google 发明的，其理论为，设指向 A 链接的有 B C D 三个链接，B C D 的 PageRank 值分别为 PR(B) PR(C) PR(D)，B C D 三个网页的链接分别有 link(B) link(C) link(D)，则 A 的 PageRank 是多少：</p>\n<blockquote>\n<p>PR(A) = 0.15 + 0.85 * (PR(B)/link(B) + PR(C)/link(C) + PR(D)/link(D))</p>\n</blockquote>\n<p>0.15 为最小值，0.85 为阻尼系数，用以指示用户持续点击每个链接的概率</p>\n<p>此时有个问题，B C D 的 PageRank 怎么算出来的？</p>\n<p>解决这一问题的方法是将所有 PageRank 设置为 1，然后反复计算，迭代若干次后 PageRank 值就会接近于真实值。</p>\n<p>代码就不放出来了，可自行在 Github 上查看</p>\n<h3 id=\"从点击行为中学习\"><a href=\"#从点击行为中学习\" class=\"headerlink\" title=\"从点击行为中学习\"></a>从点击行为中学习</h3><p>根据用户点击抉择来训练模型</p>\n<h5 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h5><p>模型需要用到神经网络，以一组节点（神经元）构成，彼此之间相连接，被称为多层感知机（multilayer perceptron, MLP）网络。其第一层神经元接收输入，本例中指用户输入的单词，最后一层输出结果，本例中即返回不同 URL 的权重。</p>\n<h5 id=\"设计数据库\"><a href=\"#设计数据库\" class=\"headerlink\" title=\"设计数据库\"></a>设计数据库</h5><p>数据库分为3层，一层为中间的隐藏层，<code>hiddennode(create_key)</code>，输入层为单词与隐藏层之间的连接状态表 <code>wordhidden(fromid,toid,strength)</code>，输出层为隐藏层与输出链接之间的关系表 <code>hiddenurl(fromid,toid,strength)</code></p>\n<h5 id=\"训练实验\"><a href=\"#训练实验\" class=\"headerlink\" title=\"训练实验\"></a>训练实验</h5><p>接下来我们模拟用户输入与选择 url，算法根据输入的值更新权重，其中用到了 tanh 函数与反向传播法，具体算法在 <a href=\"https://github.com/pansy-cx/Programming-Collective-Intelligence/blob/master/4.%20Searching%20and%20Ranking/nn.py\" target=\"_blank\">nn.py</a>，这里就不赘述。</p>\n<hr>\n<p>总之，本章讲了如何使用 SQLite 建立数据库储存信息，爬取网页链接，建立词库。进行多词搜索，并且使用单词频度，相关性，用户点击抉择等来对链接进行排名。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjv7qf3zw00012mhsu538gd58","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40900082mhs9uxksuc7"},{"post_id":"cjv7qf40200022mhs4uts7agd","tag_id":"cjv7qf40900072mhsw5q7424w","_id":"cjv7qf40e000d2mhsh77wxfr0"},{"post_id":"cjv7qf40d000c2mhs43nm3slw","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40g000g2mhslr9hwvw2"},{"post_id":"cjv7qf40600042mhs556p5vri","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf40l000l2mhs5yc06217"},{"post_id":"cjv7qf40600042mhs556p5vri","tag_id":"cjv7qf40g000f2mhsyfa7u2oi","_id":"cjv7qf40m000n2mhsob584b0w"},{"post_id":"cjv7qf40l000m2mhsc03m802w","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40o000q2mhswwnr3mgh"},{"post_id":"cjv7qf40700052mhsnwk25eta","tag_id":"cjv7qf40k000j2mhszrlw3bk4","_id":"cjv7qf40q000s2mhskw9pp1l7"},{"post_id":"cjv7qf40m000o2mhsq9074br2","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40t000v2mhszphdpyvy"},{"post_id":"cjv7qf40o000r2mhs9juqqf2v","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40u000x2mhso011vu1i"},{"post_id":"cjv7qf40800062mhs1xp2i6pn","tag_id":"cjv7qf40n000p2mhsbxfj5akm","_id":"cjv7qf40w00102mhs3thr5b09"},{"post_id":"cjv7qf40r000t2mhsfw7twhiy","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf40x00122mhs213mp2lg"},{"post_id":"cjv7qf40t000w2mhsbq1suoz2","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf40y00152mhsohhytr0j"},{"post_id":"cjv7qf40t000w2mhsbq1suoz2","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf41100172mhsmen4x0la"},{"post_id":"cjv7qf40v000y2mhsbl43m6p1","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf41300192mhswaupqh6h"},{"post_id":"cjv7qf40a00092mhstqazm3lx","tag_id":"cjv7qf40n000p2mhsbxfj5akm","_id":"cjv7qf415001c2mhsiwhau69u"},{"post_id":"cjv7qf40a00092mhstqazm3lx","tag_id":"cjv7qf40v000z2mhsz8eoqhjt","_id":"cjv7qf418001e2mhsg6359tip"},{"post_id":"cjv7qf40b000a2mhsv7iif9s4","tag_id":"cjv7qf40y00142mhsdmtftwix","_id":"cjv7qf419001h2mhs6kckz8xy"},{"post_id":"cjv7qf419001i2mhsqzgamqcy","tag_id":"cjv7qf40v000z2mhsz8eoqhjt","_id":"cjv7qf41b001l2mhsab4htf7a"},{"post_id":"cjv7qf40f000e2mhswm0tsig1","tag_id":"cjv7qf414001a2mhs67s7cyqt","_id":"cjv7qf41c001n2mhs697txab9"},{"post_id":"cjv7qf40f000e2mhswm0tsig1","tag_id":"cjv7qf418001g2mhsmty74tfc","_id":"cjv7qf41d001q2mhsw17acrfc"},{"post_id":"cjv7qf41a001j2mhsz44a90eq","tag_id":"cjv7qf40v000z2mhsz8eoqhjt","_id":"cjv7qf41e001s2mhs7ki4l4zk"},{"post_id":"cjv7qf40h000h2mhsisc5e9yf","tag_id":"cjv7qf40y00142mhsdmtftwix","_id":"cjv7qf41f001v2mhssnqo2r16"},{"post_id":"cjv7qf41c001o2mhsn6vsdwtq","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf41g001x2mhsu01krn6o"},{"post_id":"cjv7qf41d001r2mhsqmu7jcog","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf41h001z2mhst8t1r8h0"},{"post_id":"cjv7qf40i000i2mhswf71ph7b","tag_id":"cjv7qf41d001p2mhsmr34jgqc","_id":"cjv7qf41j00222mhsdi0g2jm8"},{"post_id":"cjv7qf40k000k2mhsng9ebfgn","tag_id":"cjv7qf41f001u2mhshm5axk9e","_id":"cjv7qf41l00262mhs43hq3ofk"},{"post_id":"cjv7qf40k000k2mhsng9ebfgn","tag_id":"cjv7qf41i00202mhsytvulzzl","_id":"cjv7qf41m00282mhsg0u8h1a1"},{"post_id":"cjv7qf40w00112mhsjt1me69t","tag_id":"cjv7qf41k00252mhsx4k7wwdb","_id":"cjv7qf41s002f2mhspq02e6di"},{"post_id":"cjv7qf40w00112mhsjt1me69t","tag_id":"cjv7qf41n002a2mhsj1nqao59","_id":"cjv7qf41u002h2mhsqdvn36eg"},{"post_id":"cjv7qf40x00132mhss9rawuxh","tag_id":"cjv7qf414001a2mhs67s7cyqt","_id":"cjv7qf41y002n2mhspc6driix"},{"post_id":"cjv7qf40x00132mhss9rawuxh","tag_id":"cjv7qf418001g2mhsmty74tfc","_id":"cjv7qf41z002p2mhsgrj4asj2"},{"post_id":"cjv7qf41w002k2mhstureysto","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf420002s2mhsobiahynm"},{"post_id":"cjv7qf41x002m2mhs9m1c2u1l","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf421002u2mhslqpx5711"},{"post_id":"cjv7qf41y002o2mhsxdd9qori","tag_id":"cjv7qf40d000b2mhsemsk874k","_id":"cjv7qf422002x2mhshk9tf546"},{"post_id":"cjv7qf41y002o2mhsxdd9qori","tag_id":"cjv7qf40g000f2mhsyfa7u2oi","_id":"cjv7qf424002z2mhs7w8kua0j"},{"post_id":"cjv7qf41z002r2mhs9qhmyvf0","tag_id":"cjv7qf40g000f2mhsyfa7u2oi","_id":"cjv7qf42500322mhscm4ob6vi"},{"post_id":"cjv7qf40z00162mhs7vx30wcw","tag_id":"cjv7qf414001a2mhs67s7cyqt","_id":"cjv7qf42600332mhsjzwjrkvt"},{"post_id":"cjv7qf40z00162mhs7vx30wcw","tag_id":"cjv7qf41z002q2mhsaes4aiy3","_id":"cjv7qf42700352mhsmo9knxui"},{"post_id":"cjv7qf420002t2mhsrq4l80fq","tag_id":"cjv7qf40n000p2mhsbxfj5akm","_id":"cjv7qf42700362mhs4su6og2s"},{"post_id":"cjv7qf41100182mhs2hwju444","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42700382mhs9q8wmk4l"},{"post_id":"cjv7qf41100182mhs2hwju444","tag_id":"cjv7qf418001g2mhsmty74tfc","_id":"cjv7qf42800392mhsw0rxpovd"},{"post_id":"cjv7qf414001b2mhsngpk08bp","tag_id":"cjv7qf42400302mhsq7zjywkl","_id":"cjv7qf429003b2mhsc0favxt2"},{"post_id":"cjv7qf416001d2mhsep91czbn","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf429003c2mhsimlqutpf"},{"post_id":"cjv7qf416001d2mhsep91czbn","tag_id":"cjv7qf42600342mhsforgw90v","_id":"cjv7qf429003d2mhs53547u4d"},{"post_id":"cjv7qf418001f2mhsycu1t9ve","tag_id":"cjv7qf41k00252mhsx4k7wwdb","_id":"cjv7qf42a003f2mhsr0ph8p4m"},{"post_id":"cjv7qf41b001m2mhskcp20jdh","tag_id":"cjv7qf40v000z2mhsz8eoqhjt","_id":"cjv7qf42a003g2mhswprd3uh9"},{"post_id":"cjv7qf41b001m2mhskcp20jdh","tag_id":"cjv7qf428003a2mhs1iax0ekk","_id":"cjv7qf42b003i2mhsb354ezlb"},{"post_id":"cjv7qf41e001t2mhs5oc5y0gq","tag_id":"cjv7qf429003e2mhswbe02uel","_id":"cjv7qf42b003j2mhsbmyglb4o"},{"post_id":"cjv7qf41g001w2mhseg3p6yaa","tag_id":"cjv7qf41z002q2mhsaes4aiy3","_id":"cjv7qf42c003l2mhsgupulwew"},{"post_id":"cjv7qf41g001w2mhseg3p6yaa","tag_id":"cjv7qf40n000p2mhsbxfj5akm","_id":"cjv7qf42c003m2mhsiaj5908f"},{"post_id":"cjv7qf41h001y2mhsu17l9ttw","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42d003o2mhsbxcvpzxt"},{"post_id":"cjv7qf41h001y2mhsu17l9ttw","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42d003p2mhsjknhbj5s"},{"post_id":"cjv7qf41i00212mhs8hmtzcll","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42d003r2mhsra3hhu21"},{"post_id":"cjv7qf41i00212mhs8hmtzcll","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42e003s2mhsmjlngamf"},{"post_id":"cjv7qf41j00232mhs51w73zsi","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42e003u2mhsb9kf31q1"},{"post_id":"cjv7qf41j00232mhs51w73zsi","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42f003v2mhs9blcwyxf"},{"post_id":"cjv7qf41k00242mhs1i8m8h7y","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42f003x2mhs4cxb8mfv"},{"post_id":"cjv7qf41k00242mhs1i8m8h7y","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42f003y2mhs57zrd6t1"},{"post_id":"cjv7qf41l00272mhsyn2h8yjp","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42g00402mhs1452vyg8"},{"post_id":"cjv7qf41l00272mhsyn2h8yjp","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42g00412mhst0x2lci6"},{"post_id":"cjv7qf41m00292mhs7sbo1umy","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42h00432mhs0t7n5i8w"},{"post_id":"cjv7qf41m00292mhs7sbo1umy","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42h00442mhs2rrasvy5"},{"post_id":"cjv7qf41n002b2mhsizxejjbd","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42h00462mhs4zh57ake"},{"post_id":"cjv7qf41n002b2mhsizxejjbd","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42i00472mhsfee18g9t"},{"post_id":"cjv7qf41p002c2mhs36e2n9fx","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42j00492mhsq0lr7msh"},{"post_id":"cjv7qf41p002c2mhs36e2n9fx","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42j004a2mhsnb4i2f2e"},{"post_id":"cjv7qf41r002e2mhsqq8vgckw","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42k004c2mhssd5y6jli"},{"post_id":"cjv7qf41r002e2mhsqq8vgckw","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42k004d2mhsjbc05quk"},{"post_id":"cjv7qf41t002g2mhsuu37hp8j","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42m004f2mhszll2jrtx"},{"post_id":"cjv7qf41t002g2mhsuu37hp8j","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42m004g2mhsq6mgga16"},{"post_id":"cjv7qf41u002j2mhsf66nsykt","tag_id":"cjv7qf40400032mhsku5gagj8","_id":"cjv7qf42n004i2mhs9aw45ofa"},{"post_id":"cjv7qf41u002j2mhsf66nsykt","tag_id":"cjv7qf42c003k2mhscs8pi6k4","_id":"cjv7qf42o004j2mhstp7pi83t"},{"post_id":"cjv7qf421002w2mhsk9xxoz10","tag_id":"cjv7qf42n004h2mhs7br8u8ll","_id":"cjv7qf42p004l2mhsznce4dtf"},{"post_id":"cjv7qf423002y2mhs6fx1idpd","tag_id":"cjv7qf42n004h2mhs7br8u8ll","_id":"cjv7qf42v004n2mhsquva1qj7"},{"post_id":"cjv7qf42400312mhsgxpeuzjz","tag_id":"cjv7qf42n004h2mhs7br8u8ll","_id":"cjv7qf42v004o2mhspql47qji"},{"post_id":"cjv7qf430004p2mhs2enipgsq","tag_id":"cjv7qf41k00252mhsx4k7wwdb","_id":"cjv7qf431004q2mhs817zb9zd"},{"post_id":"cjv7qf430004p2mhs2enipgsq","tag_id":"cjv7qf41n002a2mhsj1nqao59","_id":"cjv7qf431004r2mhsi0s08jf4"}],"Tag":[{"name":"JavaScript","_id":"cjv7qf40400032mhsku5gagj8"},{"name":"AngularJS","_id":"cjv7qf40900072mhsw5q7424w"},{"name":"Vue","_id":"cjv7qf40d000b2mhsemsk874k"},{"name":"WebPack","_id":"cjv7qf40g000f2mhsyfa7u2oi"},{"name":"CSS","_id":"cjv7qf40k000j2mhszrlw3bk4"},{"name":"System","_id":"cjv7qf40n000p2mhsbxfj5akm"},{"name":"Raspberry","_id":"cjv7qf40v000z2mhsz8eoqhjt"},{"name":"Git","_id":"cjv7qf40y00142mhsdmtftwix"},{"name":"NodeJS","_id":"cjv7qf414001a2mhs67s7cyqt"},{"name":"MongoDB","_id":"cjv7qf418001g2mhsmty74tfc"},{"name":"HTTP","_id":"cjv7qf41d001p2mhsmr34jgqc"},{"name":"iOS","_id":"cjv7qf41f001u2mhshm5axk9e"},{"name":"WKWebView","_id":"cjv7qf41i00202mhsytvulzzl"},{"name":"Python","_id":"cjv7qf41k00252mhsx4k7wwdb"},{"name":"机器学习","_id":"cjv7qf41n002a2mhsj1nqao59"},{"name":"Linux","_id":"cjv7qf41z002q2mhsaes4aiy3"},{"name":"Mysql","_id":"cjv7qf42400302mhsq7zjywkl"},{"name":"npm","_id":"cjv7qf42600342mhsforgw90v"},{"name":"OpenCV","_id":"cjv7qf428003a2mhs1iax0ekk"},{"name":"Tool","_id":"cjv7qf429003e2mhswbe02uel"},{"name":"UnderScore","_id":"cjv7qf42c003k2mhscs8pi6k4"},{"name":"WordPress","_id":"cjv7qf42n004h2mhs7br8u8ll"}]}}